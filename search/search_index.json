{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u2302","text":"<p>Protocol documentation can be accessed via the header. Have a look around ...</p> <pre><code>%%{init:{\n  \"theme\":\"neutral\",\n  \"fontFamily\":\"monospace\",\n  \"flowchart\":{\"curve\":\"linear\"}\n}}%%\n\nflowchart TB\n  subgraph DataFlow[\"io-homecontrol Data Format Flow\"]\n    mcu{{\"Microcontroller&lt;br/&gt;STM8 / STM32\"}}\n    radio{{\"Radio&lt;br/&gt;SX12xx/Si446x\"}}\n    ant(((\"\ud83d\udce1&lt;br/&gt;868-870 &lt;br/&gt;MHz\")))\n    ext[\"External&lt;br/&gt;PC&lt;br/&gt;Serial over USB&lt;br/&gt;\"]\n    int[\"Internal&lt;br/&gt;TaHoma, Cozytouch, ...&lt;br/&gt;SoC or MCU&lt;br/&gt;\"]\n    ext&lt;--\"SLIP\"--&gt;mcu\n    int&lt;--\"SPI\"--&gt;mcu\n    mcu&lt;--\"UART&lt;br/&gt;38400-8N1\"--&gt;radio\n    radio&lt;--\"NRZ\"--&gt;ant\n  end</code></pre>"},{"location":"#project-layout","title":"Project Layout","text":"Bash<pre><code>scripts        # Random scripts and code snippets\nscripts/renode # ioHome STM32 Emulation!!! (Thanks Pascal!)\n</code></pre>"},{"location":"COMMANDS/","title":"Commands","text":"<p>This document lists the known io-homecontrol \"Command IDs\" (CMD), their corresponding parameters and structure.</p>"},{"location":"COMMANDS/#basics","title":"Basics","text":"<p>These basics should help you understand which wording is used to find parameter information inside the LuaJIT files.</p> <p>The io-homecontrol\u00ae concept is built on the idea of different \"applications\" or \"profiles\". Each vendor has to implement a basic set of standard profiles but can also implement its own set of pre-defined profiles.</p> <p>A Session in the context of io-homecontrol is a predefined Action. As an example this Action could be the exchange of a key or the opening of a window and could consist of one or more packets (with each consisting of 4 frame). A Use Case (UC) is the payload of an io-homecontrol frame. Each UC consists of a Command ID (CMD) and corresponding Parameter (MP = MainParameter) with up to 16 Functional Parameter (FP). The MP is predefined by the CMD. Not every command has a MP. If it has a MP it is either a value or predefined Function. Commands are combined in groups of Command Types.</p>"},{"location":"COMMANDS/#naming-wording-abbreviations","title":"Naming &amp; Wording &amp; Abbreviations","text":"Naming Conventions &amp; Wording  &gt; Based on the official iohc wording and [Ethernet Frame](https://en.wikipedia.org/wiki/Ethernet_frame) description.  - Session: Abstraction describing the whole communication process for one action (eg. close windows) - Action: A command executed by the actuator - Layer 1: Packet = Physical (RF/Radio) - Packet: Breaks down a session transmission into chunks with each containing a preamble, sync word, frame and interpacket gap. - Carrier Sense: In case of iohc the abuse of the preamble as detection of an incoming signal. Normally just a unmodulated signal. - Ramp Up Phase: Time it takes for the radio to initiate the power amplifier. - Preamble: Sequence of a repeating bit pattern (0101010101...) to synchronize the receiver clock with the sender clock and determine the baud rate. At the same time this is also used to announce a transmission to wake-up a receiver from a low-power mode. - Sync Word (SFD = Start Frame Delimiter): Breaks the preamble and signals the start of the frame. - Frame: Data after the sync word including the CRC. - Postamble: Same as preamble but this time it is to signal the end of a transmission. - (Interframe/Interpacket) Gap: Time between a repeated packet transmission of a session. - Layer 2: Frame = Data Link - Transmission Control / Header: Describes a header (CtrlByte1/2) which holds information about the iohc protocol and frame - MAC Header: Sender &amp; Receiver NodeID in EUI/OUI-48 form - NodeID: built-in 3-bytes device address (LSBF!)   - Used in every communication to identify the transmitter and the receiver(s).   - Programmed during manufacturing and \"cannot be changed\" (which is untrue as we will see later...).   - Predefined ranges exist to differentiate manufacturers, types, etc.   - Found on the device labels in plain text and as barcode/qr-code.   - &gt; \"NodeIDs are recycled on a 3 to 5 years basis, depending on the product sales.\"   - &gt; \"NodeID can be considered unique per installation/home.\"   - Broadcasts are valid OUI-48 when Bit-Reversed and then Bit-Inverted (see LSBF). 00:00:3F &gt; Reverse &gt; Invert = 03:FF:FF.     - See: [Universal vs. Local Bit](https://en.wikipedia.org/wiki/MAC_address#Universal_vs._local_(U/L_bit))     - Mentioned in SDN (Somfy Digital Network) documents and observable via SDN Frame Builder - Payload: Variable length field after the MAC header excluding the CRC which holds the usable data aka Message - CRC (FCS = Frame Check Sequence): Calculated over the Frame. ([CRC/CRC16-CCITT](https://srecord.sourceforge.net/crc16-ccitt.html) vs. [CRC16-KERMIT](https://reveng.sourceforge.io/crc-catalogue/16.htm#crc.cat.crc-16-kermit))   Abbreviations  &gt; ![NOTE] &gt; Those values are taken from the ioHome firmware and LuaJIT files and represent only official abbreviations.  | Abr.   | Meaning                                      | | -----: | :------------------------------------------- | | DCT    | Dry Contact Trigger                          | | IP     | Intermediate Position                        | | OSB    | Outdoor Sensor Box                           | | ISB    | Indoor  Sensor Box                           | | MP     | Main       Parameter                         | | FP     | Functional Parameter                         | |        |                                              | | DHW    | Domestic Hot Water                           | | FCM    |                                              | | RCM    | Receive Config Mode                          | | TCM    | Transmit Config Mode                         | | CMD    | Command (ID)                                 | | ACT    | Actuator                                     | | REV    |                                              | | WDT    |                                              | | RX     | Receive                                      | | TX     | Transmit                                     | | GRP    | Group                                        | | SID    | SystemID                                     | | POS    | Current Position                             | | OTL    | Over The Line                                | | APC    | Atlantic                                     | | IVB    | Interior Venitian Blind                      | | EVB    | Exterior Venetian Blind                      | | SUC    | Static Update Controller                     | | IO_SWF | Somfy iohc WireFree (SWF): IO 2.4Ghz Variant | | OVP    | Overkiz Radio Protocol                       | | SCD    | Secure Configuration/Credential Device       | | SFY    | Somfy                                        | | VLX    | Velux                                        | | ISB    | Inside Sensor Box                            | | OSB    | Outside Sensor Box                           | | RD     | RailDIN                                      | |        |                                              | | ZIC    | InstallCode                                  | | DI     | DeviceId                                     | | BPC    | BPinCode                                     | | IR     | IndustrialReference                          |"},{"location":"COMMANDS/#device-labels-serial-numbers-qr-codes-barcodes","title":"Device: Labels, Serial Numbers, QR Codes / Barcodes","text":"Labels, Serial Numbers, QR Codes / Barcodes  Software Revision Is = Somfy=%d     S2IH=%d  POD=%d Rev=%d Hardware Revision Is = Type=0x%02X Month=%d Year=%d Rev=0x%02X  #### Serial Number  The Serial Number is a 12 byte ASCII string used as a unique identifier for a given product.  | Length | 6 byte | 2 byte | 2 byte | 2 byte | | -----: | :----: | :----: | :----: | :----: | | Name   | NodeID | OemID  | Year   | Week   |  - NodeID: Built-in Address - OemID: Manufacturer Identification of the Supplier - Year: Year of manufacturing - Week: Week of manufacturing  #### QR Code  For some devices the length of the QR code gives a hint about the device itself. The minimum length is 40 hex characters (20 byte).  - QR Code Length   - KeyGo: 40 Hex Chars (20 Byte)   - Situo: 56 Hex Chars (23 Byte)  ##### Example  *Somfy Situo* QR codes: - `452A1F832ADDFC13C9976011B1C109FBF3952FA14E846341FFFFFFFF` - `455B9AA02CC31E641F61C503B74C112A41A11FA94E650A41FFFFFFFF` - `4540A05DCC7AD1FD67BB1EDDE33ECD09DC602DBF4E846341FFFFFFFF`  Python<pre><code>qrPayload = \"452A1F832ADDFC13C9976011B1C109FBF3952FA14E846341FFFFFFFF\"\n\ndef parseOneWayControllerQRPayload(qrPayload):\n  \"\"\"Parse 1W Controller QR Payload.\"\"\"\n  address = qrPayload[2:8]\n  productKey = qrPayload[8:40]\n  return address, productKey\n\n\ndef computeOneWayControllerAddress(controllerAddress, channel = 1)\n  \"\"\"Compute 1W Controller Address. It is unknown if this function just translates to BigEndian.\"\"\"\n  # channelAddress = controllerAddress + channel - 1\n  channelAddress = [0x83, 0x1F, 0x2A]\n  return channelAddress\n\n\ndef function handleOneWayController(qrPayload, channel = 1, addOrRemove = 1)\n  payload = [] # Create list which holds the payload\n\n  # address = \"2A1F83\", productKey = \"2ADDFC13C9976011B1C109FBF3952FA1\"\n  controllerAddress, productKey = parseOneWayControllerQRPayload(qrPayload)\n  channelAddress = computeOneWayControllerAddress(controllerAddress, channel)\n  channelAddress = [0x83, 0x1F, 0x2A]\n\n  payload.append(addOrRemove)      # Unknown: Either 0 or 1\n  payload.append(channelAddress)   # Channel Address: Same as controllerAddress (but BigEndian)\n  payload.append(0x00, 0x00, 0x3F) # Broadcast Address\n  payload.append(productKey)       # Product Key\n  payload.append(0x00, 0x00)       # Unknown\n  payload.append(0x00)             # Unknown\n  payload.append(0x03)             # Unknown\n</code></pre>"},{"location":"COMMANDS/#command-structure","title":"Command Structure","text":"<p>A command is built as follow:</p> Command ID Parameter 1 Byte n Byte <ul> <li>Command ID (CMD): Identifies the desired action</li> <li>Parameter (MP): Optional Parameter for the desired action.</li> <li>The type of the parameter is defined by the CMD</li> </ul>"},{"location":"COMMANDS/#parameter","title":"Parameter","text":"<p>For detailed information on parameters see Parameter</p> <p>![NOTE] See also KLF200 API: <code>Appendix 2: List of actuator types and their use of Main Parameter and Functional Parameters</code></p> Parameter Details  #### ACEI  &gt; NOTE: LSB must be 1: The frame is not considered valid if this bit is set to 0!  | **PARAMETER** | A: Level | C: Service | E: Extended Info | I: IsValid | | ------------: | :------: | :--------: | :--------------: | :--------: | | **BIT**       | 7-5      | 4-3        | 2-1              | 0          |  - bit[3] Priority Level (Velux KLF200 API @ Page 58/59)   - Protection Level     - 0 b[000] = Personal/Human: Most secure level. Will disable all categories (Level 0 to 7).       &gt; \"*Since consequences of misusing this level can deeply impact the system behaviour, and therefore the io-homecontrol image, it is mandatory for the manufacturer that wants to use this level of priority to receive an agreement from io-homecontrol\u00ae.*\"     - 1 b[001] = End Product/Environment = (House) Goods Protection: Local Sensors   - User Level = User Control     - 2 b[010] = Level 1 - High: Controllers have a higher level of priority than others.     - 3 b[011] = Level 2 - Default: Default for (Remote) Controllers. Send immediate Command(s).   - Comfort Level = Automatic Control     - 4 b[100] = Level 1 - TBD     - 5 b[101] = Level 2 - TBD     - 6 b[110] = Level 3 - SAAC: Stand Alone Automatic Controls     - 7 b[111] = Level 4 - TBD (Default Channel: KLF100) - bit[2] Priority Service Number   - 0 b[00] = Service 1 - TBD   - 1 b[01] = Service 2 - TBD   - 2 b[10] = Service 3 - TBD   - 3 b[11] = Service 4 - TBD - bit[2] Extended Info TODO   - 0 b[00] = TBD   - 1 b[01] = TBD   - 2 b[10] = TBD   - 3 b[11] = TBD - bit[1] Is Valid Frame/Session: Always 1.  #### Multi Information Byte  | **Parameter** | Actuator Turnaround Time | SyncCtrlGrp | Unknown | RF Support | io-Membership | Power Save Mode | | :-----------: | :----------------------: | :---------: | :-----: | :--------: | :-----------: | :-------------: | | **Bit**       | 7-6                      | 5           | 4       | 3          | 2             | 1-0             |  - bit[7-6] Actuator Turnaround Time (ATT) = Time span in which the actuator normally responds   - 0b00 = 0:  5 seconds   - 0b01 = 1: 10 seconds   - 0b10 = 2: 20 seconds   - 0b11 = 3: 40 seconds - bit[5] SyncCtrlGrp - Supports Sync Control Group?   - 0 = b[0]: No   - 1 = b[1]: Yes - bit[4] Unknown - bit[3] RF Support in Node   - 0: Yes   - 1: No - bit[2] io-Membership (Always Yes...)   - 0: Yes   - 1: No - bit[1-0] Power Save Mode   - 0: Off = Always Alive   - 1: On  = Low Power Mode  #### Command Originator  Specifies what or who fired the command.  - 0x00 = User: Local - User button press on Actuator - 0x01 = **User**: User Remote Control causing Actuator Action - 0x02 = Sensor: Rain - 0x03 = Sensor: Timer - 0x04 = Security: SCD Controlling Actuator - 0x05 = UPS: Uninterruptible Power Supply Unit - 0x06 = SFC: Smart Function Controller - 0x07 = LSC: Lifestyle Scenario Controller - 0x08 = **SAAC**: Stand Alone Automatic Controls - 0x09 = Sensor: Wind - 0x0A = Unknown - 0x0B = Automatic Cycle/External Access/Load Shedding (Managers for requiring a particular electric load shed) - 0x0C = Sensor: Local Light - 0x0D = Sensor: Unspecified Enviroment Sensor (Used with commands of Unknown Sensor for Protection of End-Product or house goods) - 0x10 = Myself: Used when Actuator decides to move by itself (Generated by Actuator) - 0xC8 = Unknown - 0xFE = Automatic Cycle - 0xFF = Emergency: Used in context with Emergency or Security commands. *This command originator should never be disabled.*  &gt; [!NOTE] Typically only **USER** or **SAAC** are used.  #### Standard Values  Standard Parameter Values for Main and Functional Parameters (MP, FP)  | Min      | Max      | Std    | Type                             | Range                       | | -------: | -------: | -----: | -------------------------------: | --------------------------: | | 0x0000   | 0xFFFF   |        | 16-bit split into Access Methods | 0 - 65535                   | |          |          | 0x0000 | Min / On / 1W: Button Up         |                             | |          |          | 0x0001 | 1W: Button Down                  |                             | |          |          | 0x0002 | 1W: Button Stop                  |                             | |          |          | 0x0003 | 1W: Button Prog (My?)            |                             | |          |          | 0x00FE | Button Released                  |                             | |          |          | 0x00FF | Button Stop                      |                             | |          |          | 0xC800 | Max / Off / Down                 |                             | | 0x0000   | 0xC800   |        | Relative Percentage (%)          | 0 - 100                     | | *0xC801* | *0xC8FF* |        | *Unknown*                        |                             | | 0xC900   | 0xD0D0   |        | Percentage (%)                   | -100 - 100                  | | *0xD0D1* | *0xD0FF* |        | *Unknown*                        |                             | |          |          | 0xD100 | Target                           | Execution Parameter Buffer  | | 0xD101   | 0xD1FF   |        |                                  |                             | |          |          | 0xD200 | Current                          | Execution Parameter Buffer  | | *0xD201* | *0xD2FF* |        | *Unknown*                        |                             | |          |          | 0xD300 | Default                          | Relative / Target / Current | | *0xD301* | *0xD3FF* |        | *Unknown*                        |                             | |          |          | 0xD400 | MP: Ignore / FP: ReadOnly        |                             | | *0xD401* | *0x7CEE* |        | *Unknown*                        |                             | |          |          | 0x6E00 | Running                          |                             | |          |          | 0x7D00 | +/-                              | Default                     | |          |          | 0xE000 | Retry                            |                             | | *0x7D01* | *0xF7FE* |        | *Unknown*                        |                             | |          |          | 0xF7FF | Unknown Feedback Value           |                             | | *0xF800* | *0xFFFF* |        | *Unknown*                        |                             | |          |          |        |                                  |                             |  #### Function IDs  | HEX        | DEC        | NAME                                                                                         | | ---------: | ---------: | :------------------------------------------------------------------------------------------- | | 00         | 00         | No Parameter                                                                                 | | 01         | 01         | Name                                                                                         | | 02         | 02         | Unknown                                                                                      | | 03         | 03         | Unknown                                                                                      | | 04         | 04         | Identification                                                                               | | 05         | 05         | Refresh: Advanced                                                                            | | ...        | ...        | Unknown                                                                                      | | 0B         | 11         | Config State                                                                                 | | 01 00 D800 | 16832512   | Refresh: Memorized Position                                                                  | | 01 00 D80A | 16832522   | Secured Position                                                                             | | 01 00 01   | 65537      | My, Open/Up/Raise/Extend, Close/Down/Lower/Retract, Stop, Set: Closure, Deployment, Position | | 01 00 12   | 65554      | Manufacturer Settings                                                                        | | 02 F2 0200 | 49414656   | 1W Controller: Pairing All and Delete Node                                                   | | 7F F1 001D | 2146500637 | IO Key                                                                                       | | 7F F1 0022 | 2146500642 | 1W Controller: Pairing                                                                       | | 7F F1 0023 | 2146500643 | 1W Controller: Pairing All                                                                   |  ##### Private Function IDs  List of Private Function IDs  This data is from *Set&amp;Go io* XML definitions.  | MP     | FP1 | NAME                                                                  | | -----: | --: | :-------------------------------------------------------------------- | | 0x0004 | 000 | last-transmitted-orders                                               | | 0x0004 | 128 | nb-of-transmitted-orders                                              | | 0x0004 | 129 | nb-of-out-of-order-due-to-battery                                     | | 0x0005 | 000 | detailled-event-subscription                                          | | 0x0006 | 000 | batterystatus                                                         | | 0x0006 | 128 | battery-measurement-at-runtime                                        | | 0x0007 | 128 | threshold-per-sensor                                                  | | 0x0007 | 129 | sensor-status-ackstatus                                               | | 0x0007 | 130 | latest-read-environmental-magnitude-per-sensor                        | | 0x0008 | 000 | controller-type                                                       | | 0x0009 | 000 | battery-state                                                         | | 0x0009 | 001 | battery-level                                                         | | 0x4003 | 128 | battery-measurement-at-runtime                                        | | 0x4004 | 128 | environmental-magnitude                                               | | 0x4100 | 000 | sensor-type                                                           | | 0x4100 | 001 | benefit-type-group                                                    | | 0x4100 | 002 | activation-status                                                     | | 0x4100 | 003 | number-of-threshold-relative-values                                   | | 0x4100 | 004 | current-threshold-1-relative-value                                    | | 0x4100 | 005 | current-threshold-2-relative-value                                    | | 0x4100 | 006 | sensor-based-automatism-scale-factor-value                            | | 0x4100 | 007 | minimum-oem-threshold-absolute-value                                  | | 0x4100 | 008 | maximum-oem-threshold-absolute-value                                  | | 0x4100 | 009 | minimum-threshold-absolute-value                                      | | 0x4100 | 010 | maximum-threshold-absolute-value                                      | | 0x4100 | 011 | current-threshold-1-absolute-value                                    | | 0x4100 | 012 | current-threshold-2-absolute-value                                    | | 0x4100 | 020 | zone-1-action                                                         | | 0x4100 | 021 | zone-1-user-locking-time                                              | | 0x4100 | 022 | zone-1-automatism-locking-time                                        | | 0x4100 | 023 | zone-1-repetition-interval                                            | | 0x4100 | 024 | zone-1-movement-limitation                                            | | 0x4100 | 030 | zone-2-action                                                         | | 0x4100 | 031 | zone-2-user-locking-time                                              | | 0x4100 | 032 | zone-2-automatism-locking-time                                        | | 0x4100 | 033 | zone-2-repetition-interval                                            | | 0x4100 | 034 | zone-2-movement-limitation                                            | | 0x4100 | 040 | zone-3-action                                                         | | 0x4100 | 041 | zone-3-user-locking-time                                              | | 0x4100 | 042 | zone-3-automatism-locking-time                                        | | 0x4100 | 043 | zone-3-repetition-interval                                            | | 0x4100 | 044 | zone-3-movement-limitation                                            | | 0x4101 | 000 | sensor-type                                                           | | 0x4101 | 001 | linked-adress-that-sends-sensor-events                                | | 0x4101 | 002 | minimum-sensed-value                                                  | | 0x4101 | 003 | maximum-sensed-value                                                  | | 0x4101 | 004 | sensor-capacity-scale-factor-value                                    | | 0x6103 | 000 | 2way-key-is-recorded                                                  | | 0x6103 | 001 | local-stimuli-status                                                  | | 0x6104 | 128 | user-product-name                                                     | | 0x6105 | 000 | feedback-name                                                         | | 0x8002 |     | HARD_VERSION_3S                                                       | | 0x9800 | 000 | request-per-recorded-io-sensors                                       | | 0x9800 | 001 | status-of-request-per-recorded-io-sensors                             | | 0x9800 | 002 | request-per-recorded-private-sensors                                  | | 0x9800 | 003 | status-of-request-per-recorded-private-sensors                        | | 0x9801 | 000 | request-per-delegation                                                | | 0x9801 | 001 | status-of-request-per-delegation                                      | | 0xA100 |     | MODE_USER_TOTAL                                                       | | 0xA101 |     | CLOSE_TEMPO_TOTAL_MODE_3S                                             | | 0xA102 |     | MODE_USER_PARTAL                                                      | | 0xA103 |     | CLOSE_SHORT_TEMPO_PARTIAL_MODE                                        | | 0xA104 |     | CLOSE_LONG_TEMPO_PARTIAL_MODE                                         | | 0xA105 |     | ORANGE_LIGHT_PRE_LIGHTING                                             | | 0xA106 |     | CRUISING_SPEED_TYPE_CLOSING                                           | | 0xA107 |     | CRUISING_SPEED_TYPE_OPENING                                           | | 0xA108 |     | DOCKING_AREA_TYPE_IN_CLOSING                                          | | 0xA109 |     | DOCKING_AREA_TYPE_IN_OPENING                                          | | 0xA10A |     | MOTOR_SHIFT_IN_CLOSING                                                | | 0xA10B |     | MOTOR_SHIFT_IN_OPENING                                                | | 0xA10C |     | MOTOR1_CLOSING_TORQUE_LIMITATION                                      | | 0xA10D |     | MOTOR1_OPENING_TORQUE_LIMITATION                                      | | 0xA10E |     | MOTOR1_CLOSING_SLOWDOWN_TORQUE_LIMITATION                             | | 0xA10F |     | MOTOR1_OPENING_SLOWDOWN_TORQUE_LIMITATION                             | | 0xA110 |     | MOTOR2_CLOSING_TORQUE_LIMITATION                                      | | 0xA111 |     | MOTOR2_OPENING_TORQUE_LIMITATION                                      | | 0xA112 |     | MOTOR2_CLOSING_SLOWDOWN_TORQUE_LIMITATION                             | | 0xA113 |     | MOTOR2_OPENING_SLOWDOWN_TORQUE_LIMITATION                             | | 0xA114 |     | MOTOR_DIRECTION                                                       | | 0xA116 |     | RESISTANCE_SENSITIVITY                                                | | 0xA117 |     | CELLS_ACTIVATION                                                      | | 0xA118 |     | SAFETY_EDGE_ACTIVATION                                                | | 0xA119 |     | PROGRAMMABLE_SAFETY_INPUT                                             | | 0xA11A |     | PROGRAMMABLE_SAFETY_INPUT_FUNCTION                                    | | 0xA11B |     | PROGRAMMABLE_SAFETY_INPUT_ACTION                                      | | 0xA11C |     | WIRED_CONTROL                                                         | | 0xA11D |     | AREA_LIGHTING_ACTIVATION                                              | | 0xA11E |     | AREA_LIGHTING_TEMPORIZATION                                           | | 0xA11F |     | AUXILIARY_CONTROL_ACTIVATION                                          | | 0xA120 |     | AUXILIARY_CONTROL_TEMPORIZATION                                       | | 0xA121 |     | LOCK_OUTPUT                                                           | | 0xA122 |     | LOCK_RELEASE                                                          | | 0xA124 |     | ADDITIONAL_THRUST_IN_CLOSING                                          | | 0xA126 |     | POP_VALUE                                                             | | 0xA129 |     | SETTINGS_LOCK_STATUS                                                  | | 0xA12B |     | DOCKING_AREA_SPEED_CLOSING                                            | | 0xA12C |     | DOCKING_AREA_SPEED_OPENING                                            | | 0xA132 |     | ACTION_CONTROL                                                        | | 0xA133 |     | INTERMEDIARY_POSITION_IN_CM                                           | | 0xA134 |     | CLOSE_TEMPO_TOTAL_MODE                                                | | 0xA137 |     | IN_POP_POSITION                                                       | | 0xA138 |     | ACCESS_ACTUATOR_LOCATION_CURRENT_POSITION                             | | 0xA205 |     | M1_RACE_LENGHT                                                        | | 0xA226 |     | ACTUATOR_SETTINGS_STATE                                               | | 0xA227 |     | SUPPLY_POWER_TYPE                                                     | | 0xA228 |     | KEYSWITCH_INPUT_STATUS                                                | | 0xA229 |     | KEYSWITCH_INPUT2_STATUS                                               | | 0xA22A |     | PHOTOCELLS_INPUT_STATUS                                               | | 0xA22B |     | SAFETY_EDGE_INPUT_STATUS                                              | | 0xA22C |     | WICKET_DOOR_INPUT_STATUS                                              | | 0xA232 |     | DETAILED_ACTUATOR_TYPE                                                | | 0xA233 |     | LAST_PHOTOCELLS_SELF_TEST_STATUS                                      | | 0xA235 |     | INDUS_SOFTWARE_VERSION                                                | | 0xA236 |     | INDUS_PRODUCT_TECH_REF                                                | | 0xA237 |     | NB_RTX_1W_REMOTE_IN_CF                                                | | 0xA239 |     | INDUS_PRODUCT_COMM_NAME                                               | | 0xA23A |     | INDUS_PRODUCT_TECH_NAME                                               | | 0xA23E |     | HARD_VERSION                                                          | | 0xA246 |     | LAST_SAFETY_EDGE_SELF_TEST_STATUS                                     | | 0xA247 |     | LAST_WICKET_DOOR_SELF_TEST_STATUS                                     | | 0xA249 |     | LAST_PERIPH_POWER_SELF_TEST_STATUS                                    | | 0xA318 |     | NB_OF_LOCAL_ORDERS                                                    | | 0xA319 |     | NB_OF_REMOTE_ORDERS                                                   | | 0xA330 |     | EVENT_LIST                                                            | | 0xA400 |     | NB_GLOBAL_CYCLES                                                      | | 0xA401 |     | NB_PARTIAL_CYCLES                                                     | | 0xA402 |     | NB_GLOBAL_CYCLES_AFTER_LEARNING                                       | | 0xA403 |     | NB_GLOBAL_RESCALING                                                   | | 0xA404 |     | NB_GLOBAL_OBSTACLE_DETECTIONS                                         | | 0xA407 |     | NB_OBSTACLE_DETECTIONS_AFTER_LEARNING                                 | | 0xA409 |     | DEFAUT_LIST                                                           | | 0xA40E |     | RTX_INFO_REQUEST                                                      | | 0xA40F |     | NB_RTX_1W_REMOTE_FOR_LIGHT                                            | | 0xA410 |     | NB_RTX_1W_REMOTE_FOR_AUXILIARY                                        | | 0xA416 |     | NB_OF_REMOTE_ORDERS_FOR_MOTOR_3S                                      | | 0xA417 |     | NB_OF_REMOTE_ORDERS_FOR_LIGHT_AND_AUXILIARY_3S                        | | 0xA418 |     | NB_GLOBAL_OBSTACLE_DETECTIONS_3S                                      | | 0xA419 |     | NB_OBSTACLE_DETECTIONS_AFTER_LEARNING_3S                              | | 0xA41C |     | NB_GLOBAL_CYCLES_3S                                                   | | 0xA41D |     | NB_PARTIAL_CYCLES_3S                                                  | | 0xA41E |     | NB_GLOBAL_CYCLES_AFTER_LEARNING_3S                                    | | 0xA41F |     | NB_GLOBAL_RESCALING_3S                                                | | 0xA44D |     | RTX_INFO_REQUEST_TOTAL                                                | | 0xA44E |     | RTX_INFO_REQUEST_PARTIAL                                              | | 0xA450 |     | SYSTEM_KEY_2_WAY_STORED                                               | | 0xA451 |     | DAUGHTER_BOARD_ACTUATOR_NAME_RECEIVED                                 | | 0xA4FE |     | DATA_TRANSFER_SPECIFICATION_VERSION                                   | | 0xA4FF |     | LIST_OF_SUPPORTED_OBJECTS_ID                                          | | 0xA500 |     | DUMP_REQUEST                                                          | | 0xA504 |     | GO_INTO_FACTORY_MODE                                                  | | 0xA506 |     | PAIRING_MODE_REQUEST                                                  | | 0xA601 | 000 | power-supply-source                                                   | | 0xA601 | 001 | batterystatus                                                         | | 0xA601 | 002 | batterystatus-reliability                                             | | 0xA601 | 128 | power-supply-min                                                      | | 0xA601 | 128 | power-supply-min                                                      | | 0xA601 | 129 | power-supply-max-rms-value                                            | | 0xA601 | 129 | power-supply-max-rms-value                                            | | 0xA601 | 130 | nb-of-power-shutdown                                                  | | 0xA601 | 131 | nb-of-double-power-cut                                                | | 0xA601 | 132 | nb-of-swicth-from-mains-to-backup-battery                             | | 0xA601 | 133 | nb-of-swicth-from-battery-low-to-battery-very-low                     | | 0xA601 | 134 | battery-measurement-at-runtime                                        | | 0xA601 | 135 | nb-of-charge-by-external-power-supply                                 | | 0xA601 | 136 | nb-of-storage-mode                                                    | | 0xA601 | 137 | nb-of-swicth-from-battery-ok-to-battery-low                           | | 0xA602 | 000 | endofmovementcause                                                    | | 0xA602 | 128 | nb-of-return-in-factory-settings                                      | | 0xA602 | 129 | nb-of-return-in-factory-settings-caused-by-private-frame              | | 0xA602 | 130 | nb-of-stops-caused-by-crown-stop                                      | | 0xA602 | 131 | nb-of-stops-caused-by-thermal-protection                              | | 0xA602 | 131 | nb-of-stops-caused-by-thermal-protection                              | | 0xA602 | 132 | nb-of-eld-tcs-in-roll-at-rel                                          | | 0xA602 | 132 | nb-of-eld-tcs-in-roll-at-rel                                          | | 0xA602 | 133 | nb-of-eld-tcs-in-unroll-at-uel                                        | | 0xA602 | 133 | nb-of-eld-tcs-in-unroll-at-uel                                        | | 0xA602 | 134 | nb-of-rel-reached-in-counting-mode                                    | | 0xA602 | 135 | nb-of-uel-reached-in-counting-mode                                    | | 0xA602 | 136 | nb-of-obstacle-in-roll                                                | | 0xA602 | 137 | nb-of-obstacle-in-unroll                                              | | 0xA602 | 138 | motor-rotation-duration                                               | | 0xA602 | 138 | tube-rotation-in-pulses-nb                                            | | 0xA602 | 138 | tube-rotation-in-seconds                                              | | 0xA602 | 139 | nb-of-eld-in-roll-at-rel-low-level                                    | | 0xA602 | 140 | nb-of-eld-in-roll-at-rel-nominal-level                                | | 0xA602 | 141 | nb-of-eld-in-roll-at-rel-high-level                                   | | 0xA602 | 142 | total-actuator-functioning-hours                                      | | 0xA602 | 142 | total-actuator-functioning-seconds                                    | | 0xA602 | 143 | running-time-up-auto-calibration-iteration-quantity                   | | 0xA602 | 144 | running-time-down-auto-calibration-iteration-quantity                 | | 0xA602 | 145 | running-time-up-auto-calibration-setting-quantity                     | | 0xA602 | 146 | running-time-down-auto-calibration-setting-quantity                   | | 0xA602 | 147 | projection-cycles-nb                                                  | | 0xA602 | 148 | deprojection-cycles-nb                                                | | 0xA602 | 149 | nb-of-obstacle-in-projection-phase                                    | | 0xA602 | 150 | nb-of-obstacle-in-deprojection-phase                                  | | 0xA602 | 151 | nb-of-stops-in-abutment-or-rel-achieved-per-mode                      | | 0xA602 | 152 | nb-of-stops-in-abutment-or-uel-achieved-per-mode                      | | 0xA602 | 153 | nb-of-cycles-in-intermediate-maintenance-mode                         | | 0xA602 | 154 | bad-sensors-sequence-pec                                              | | 0xA602 | 155 | nb-of-bad-braking                                                     | | 0xA602 | 156 | nb-of-slip-after-braking                                              | | 0xA602 | 157 | max-slip-during-braking                                               | | 0xA602 | 158 | nbmotormoveerrors                                                     | | 0xA602 | 159 | nbmotorinternalbuserrors                                              | | 0xA602 | 160 | maxbatteryvoltage                                                     | | 0xA602 | 161 | nbendlimitdownadjustments                                             | | 0xA602 | 162 | nbendlimitupadjustments                                               | | 0xA602 | 163 | nbmotorfactoryreset                                                   | | 0xA602 | 164 | nbpowerinterruptduringmvt                                             | | 0xA602 | 166 | totalactuatorinlowpowermodeduration                                   | | 0xA602 | 167 | nbbuserrorreaddetectedbyradioboard                                    | | 0xA602 | 168 | nbbuserrorwritedetectedbyradioboard                                   | | 0xA602 | 169 | nbbuserrorcrcdetectedbyradioboard                                     | | 0xA602 | 170 | nbbuserrorcrcdetectedbymotor                                          | | 0xA602 | 171 | nbofmotorpermutations                                                 | | 0xA602 | 172 | nbofautomaticdesensitization-smart-protect                            | | 0xA602 | 173 | nbofautomaticresensitization-smart-protect                            | | 0xA602 | 174 | nb-of-high-speed-movements                                            | | 0xA602 | 175 | overcurrent-detected-before-regulation-pec                            | | 0xA602 | 176 | bad-current-check-before-start-pec                                    | | 0xA602 | 177 | bad-current-check-after-start-pec                                     | | 0xA602 | 178 | bad-current-check-during-regulation-pec                               | | 0xA602 | 179 | nb-of-eld-in-roll-at-rel-very-high-level                              | | 0xA602 | 180 | nb-of-eld-in-unroll-at-uel-low-level                                  | | 0xA602 | 181 | nb-of-eld-in-unroll-at-uel-nominal-level                              | | 0xA602 | 182 | nb-of-eld-in-unroll-at-uel-high-level                                 | | 0xA602 | 183 | nb-of-eld-in-unroll-at-uel-very-high-level                            | | 0xA602 | 184 | nb-time-out-detected-to-reach-rel                                     | | 0xA602 | 185 | nb-time-out-detected-to-reach-uel                                     | | 0xA602 | 186 | nb-overintensity-decteted                                             | | 0xA602 | 187 | nb-position-sensor-failures                                           | | 0xA602 | 188 | nb-current-sensor-failures                                            | | 0xA602 | 189 | nb-product-has-gone-in-secondary-secured-position                     | | 0xA602 | 190 | nb-order-received-on-wired-input                                      | | 0xA602 | 191 | nb-order-received-by-radio                                            | | 0xA602 | 192 | zones-learning-attempts-nb                                            | | 0xA602 | 193 | nb-mouvements-without-abutment                                        | | 0xA602 | 194 | nb-mouvements-to-ventilation                                          | | 0xA602 | 195 | odometer-in-integration-phase                                         | | 0xA603 | 000 | type-of-setting-for-roll-end-limit                                    | | 0xA603 | 001 | type-of-setting-for-unroll-end-limit                                  | | 0xA603 | 002 | current-status                                                        | | 0xA603 | 003 | rotation-direction                                                    | | 0xA603 | 003 | rotation-direction                                                    | | 0xA603 | 004 | status-of-intermediate-position                                       | | 0xA603 | 005 | rotation-direction-determination                                      | | 0xA603 | 006 | kinematics                                                            | | 0xA603 | 006 | kinematics                                                            | | 0xA603 | 007 | status-of-max-linear-position                                         | | 0xA603 | 008 | status-of-stop-mode                                                   | | 0xA603 | 009 | last-movement                                                         | | 0xA603 | 010 | travel-current-state                                                  | | 0xA603 | 010 | travel-current-state                                                  | | 0xA603 | 011 | travel-zone-state                                                     | | 0xA603 | 012 | movementmanager-current-state                                         | | 0xA603 | 013 | current-settings-within-evb-io                                        | | 0xA603 | 014 | brake-slip-upwards                                                    | | 0xA603 | 015 | brake-slip-downwards                                                  | | 0xA603 | 016 | initial-type-of-setting-for-roll-end-limit                            | | 0xA603 | 017 | initial-type-of-setting-for-unroll-end-limit                          | | 0xA603 | 018 | behaviour-at-roll-end-limit                                           | | 0xA603 | 019 | behaviour-at-unroll-end-limit                                         | | 0xA603 | 020 | status-of-flat-slat-position                                          | | 0xA603 | 021 | softstart-uel                                                         | | 0xA603 | 022 | softstop-uel                                                          | | 0xA603 | 023 | softstart-rel                                                         | | 0xA603 | 024 | softstop-rel                                                          | | 0xA603 | 025 | smart-protect-sensitivity                                             | | 0xA603 | 026 | visual-pictogram                                                      | | 0xA603 | 027 | coexistenceid                                                         | | 0xA603 | 028 | sound-enable                                                          | | 0xA603 | 029 | recovered-state-after-power-cut                                       | | 0xA603 | 030 | output-operator-type                                                  | | 0xA603 | 031 | input-ergonomy                                                        | | 0xA603 | 032 | lock-device                                                           | | 0xA603 | 033 | curtain-outstretching-level                                           | | 0xA603 | 128 | low-speed-value-min                                                   | | 0xA603 | 129 | low-speed-value-max                                                   | | 0xA603 | 130 | nominal-speed-value-min                                               | | 0xA603 | 131 | nominal-speed-value-max                                               | | 0xA603 | 132 | default-low-speed-value                                               | | 0xA603 | 133 | default-nominal-speed-value                                           | | 0xA603 | 134 | high-speed-current-value                                              | | 0xA603 | 135 | operationnal-running-timeout-enable                                   | | 0xA603 | 136 | operationnal-running-timeout-value-in-s                               | | 0xA603 | 137 | smart-protect-activation                                              | | 0xA603 | 138 | automatic-adjustment-of-the-roll-end-limit-every-x-cycles             | | 0xA603 | 139 | applicativeaccessories                                                | | 0xA603 | 140 | maintenance-by-up-down-wt-ergonomy                                    | | 0xA603 | 141 | wired-input-type                                                      | | 0xA603 | 142 | operationnal-running-remaining-time-in-s                              | | 0xA603 | 143 | max-acceptable-sink-current                                           | | 0xA604 | 000 | io-profile-and-sub-profile                                            | | 0xA604 | 001 | manufacturer-actuator-id                                              | | 0xA604 | 002 | product-address                                                       | | 0xA605 | 000 | current-movement-area                                                 | | 0xA605 | 001 | current-operating-mode                                                | | 0xA606 | 000 | ctn-is-operational                                                    | | 0xA606 | 128 | max-detected-temperature                                              | | 0xA606 | 129 | coil-temperature                                                      | | 0xA607 | 000 | paired-product-type                                                   | | 0xA607 | 001 | out-of-order-time-out-in-s                                            | | 0xA607 | 002 | paired-product-address-msb-first                                      | | 0xA607 | 003 | one-way-key                                                           | | 0xA607 | 004 | sequence-nb                                                           | | 0xA607 | 005 | manufacturer-id                                                       | | 0xA607 | 006 | io-membership-flag                                                    | | 0xA607 | 007 | controller-type                                                       | | 0xA607 | 008 | battery-state                                                         | | 0xA607 | 009 | battery-level                                                         | | 0xA608 | 000 | nb-of-motors                                                          | | 0xA608 | 001 | covering-panel                                                        | | 0xA608 | 002 | position-sensor-type                                                  | | 0xA609 | 000 | travel-zones-learning-phase                                           | | 0xA609 | 001 | secured-ventilation-entry-learning-state                              | | 0xA609 | 128 | current-position-lift                                                 | | 0xA609 | 128 | current-position-lift                                                 | | 0xA609 | 128 | current-position-lift                                                 | | 0xA609 | 129 | roll-end-limit-position                                               | | 0xA609 | 129 | roll-end-limit-position                                               | | 0xA609 | 129 | roll-end-limit-position                                               | | 0xA609 | 129 | roll-end-limit-position                                               | | 0xA609 | 130 | unroll-end-limit-position                                             | | 0xA609 | 130 | unroll-end-limit-position                                             | | 0xA609 | 130 | unroll-end-limit-position                                             | | 0xA609 | 130 | unroll-end-limit-position                                             | | 0xA609 | 131 | intermediate-position-lift                                            | | 0xA609 | 131 | intermediate-position-lift                                            | | 0xA609 | 131 | intermediate-position-lift                                            | | 0xA609 | 131 | intermediate-position-lift                                            | | 0xA609 | 132 | reference-position                                                    | | 0xA609 | 132 | reference-position                                                    | | 0xA609 | 133 | exit-unroll-end-limit-position                                        | | 0xA609 | 136 | current-position-tilt                                                 | | 0xA609 | 136 | current-position-tilt                                                 | | 0xA609 | 137 | intermediate-position-tilt                                            | | 0xA609 | 137 | intermediate-position-tilt                                            | | 0xA609 | 138 | running-time-up                                                       | | 0xA609 | 139 | running-time-down                                                     | | 0xA609 | 140 | flat-slats-value                                                      | | 0xA609 | 140 | flat-slats-value                                                      | | 0xA609 | 145 | min-linear-limit-position                                             | | 0xA609 | 146 | max-linear-limit-position                                             | | 0xA609 | 147 | max-toggle-limit-position                                             | | 0xA609 | 148 | current-position-in-percent                                           | | 0xA609 | 149 | automatic-max-linear-limit-position                                   | | 0xA609 | 150 | mp-middle-of-slide-in-order-to-project                                | | 0xA609 | 151 | mu-middle-of-slide-in-order-to-unproject                              | | 0xA609 | 152 | pelp-projection-end-limit-to-project                                  | | 0xA609 | 153 | pelu-projection-end-limit-to-unproject                                | | 0xA609 | 154 | nb-auto-learning-requested                                            | | 0xA609 | 155 | nb-auto-learning-not-validated                                        | | 0xA609 | 156 | secured-ventilation-position-lift                                     | | 0xA609 | 157 | secured-ventilation-entry-position-lift                               | | 0xA609 | 158 | seal-position-lift                                                    | | 0xA60A | 000 | operating-status                                                      | | 0xA60A | 001 | eld-inhibition-on-start                                               | | 0xA60A | 128 | general-eld-level                                                     | | 0xA60A | 129 | level-set-by-user-when-rolling                                        | | 0xA60A | 130 | level-set-by-user-when-unrolling                                      | | 0xA60B | 000 | stress-reduction-status                                               | | 0xA60B | 000 | stress-reduction-status                                               | | 0xA60B | 001 | warning-movement                                                      | | 0xA60B | 128 | back-impulse-angle                                                    | | 0xA60B | 129 | nb-of-distressing                                                     | | 0xA60B | 130 | stress-reduction-value                                                | | 0xA60B | 131 | backlashvalue                                                         | | 0xA60B | 132 | tiltingtime                                                           | | 0xA60B | 133 | startdelay                                                            | | 0xA60B | 134 | smart-back-release                                                    | | 0xA60B | 135 | delta-to-set-auto-uel                                                 | | 0xA60B | 136 | delta-to-set-auto-rel                                                 | | 0xA60B | 137 | choregraphy-disable-variator-down-move-min                            | | 0xA60B | 138 | choregraphy-disable-variator-up-move-min                              | | 0xA60B | 139 | choregraphy-enable-variator-down-move-min                             | | 0xA60B | 140 | choregraphy-enable-variator-up-move-min                               | | 0xA60B | 141 | working-angle-tilt-position                                           | | 0xA60B | 142 | tiltingtravel                                                         | | 0xA60B | 143 | covering-panel-closing-delay                                          | | 0xA60B | 144 | covered-panel-closing-delay                                           | | 0xA60B | 145 | covering-panel-opening-delay                                          | | 0xA60B | 146 | covered-panel-opening-delay                                           | | 0xA60B | 147 | minimum-angular-open-end-limit                                        | | 0xA60B | 148 | position-convertion                                                   | | 0xA60C | 000 | array-of-160-char                                                     | | 0xA60C | 001 | line-1-of-10-lines-of-16-char                                         | | 0xA60C | 002 | line-2-of-10-lines-of-16-char                                         | | 0xA60C | 003 | line-3-of-10-lines-of-16-char                                         | | 0xA60C | 004 | line-4-of-10-lines-of-16-char                                         | | 0xA60C | 005 | line-5-of-10-lines-of-16-char                                         | | 0xA60C | 006 | line-6-of-10-lines-of-16-char                                         | | 0xA60C | 007 | line-7-of-10-lines-of-16-char                                         | | 0xA60C | 008 | line-8-of-10-lines-of-16-char                                         | | 0xA60C | 009 | line-9-of-10-lines-of-16-char                                         | | 0xA60C | 010 | line-10-of-10-lines-of-16-char                                        | | 0xA60D | 128 | nb-of-paired-1w-controllers                                           | | 0xA60D | 129 | nb-of-alive-paired-1w-sensors                                         | | 0xA60D | 130 | nb-of-paired-1w-sensors-out-of-order                                  | | 0xA60E | 000 | io-1w-sensor-address                                                  | | 0xA60E | 001 | profil-id                                                             | | 0xA60E | 002 | battery-level                                                         | | 0xA60E | 003 | threshold-value                                                       | | 0xA60E | 004 | thresholds-range                                                      | | 0xA60E | 005 | status-protection                                                     | | 0xA60E | 006 | threshold-value-secondary                                             | | 0xA60E | 007 | demo-mode                                                             | | 0xA60F | 128 | nb-of-reset-caused-by-independant-watchdog                            | | 0xA60F | 129 | nb-of-reset-caused-by-external-pin                                    | | 0xA60F | 130 | nb-of-reset-caused-by-crc-error                                       | | 0xA60F | 131 | nb-of-reset-caused-by-system                                          | | 0xA60F | 132 | nb-of-reset-caused-by-brown-out                                       | | 0xA60F | 133 | nb-of-reset-caused-by-brown-out-during-power-on                       | | 0xA60F | 134 | nb-of-reset-caused-by-power-on                                        | | 0xA60F | 135 | nb-of-reset-caused-by-power-on-without-save-informations              | | 0xA60F | 136 | nb-of-reset-caused-by-others                                          | | 0xA60F | 137 | nb-of-reset-caused-by-window-watchdog                                 | | 0xA60F | 138 | nb-of-periodical-system-reset                                         | | 0xA60F | 139 | nb-of-reset-because-ram-is-ko                                         | | 0xA60F | 140 | total-nb-of-resets                                                    | | 0xA60F | 141 | nb-of-nominal-init                                                    | | 0xA60F | 142 | nb-of-warm-reset                                                      | | 0xA610 | 000 | initial-rotation-direction                                            | | 0xA610 | 002 | initial-behaviour-at-roll-end-limit                                   | | 0xA610 | 003 | initial-behaviour-at-unroll-end-limit                                 | | 0xA610 | 004 | initial-softstart-uel                                                 | | 0xA610 | 005 | initial-softstop-uel                                                  | | 0xA610 | 006 | initial-softstart-rel                                                 | | 0xA610 | 007 | initial-softstop-rel                                                  | | 0xA610 | 008 | initial-coexistence-id                                                | | 0xA610 | 009 | initial-nb-of-motors                                                  | | 0xA610 | 010 | initial-covering-panel                                                | | 0xA610 | 011 | initial-lock-device                                                   | | 0xA610 | 128 | initial-nb-of-cycles-in-intermediate-maintenance-mode                 | | 0xA610 | 129 | initial-low-speed-value-rpm                                           | | 0xA610 | 130 | initial-nominal-speed-value-rpm                                       | | 0xA610 | 131 | initial-smart-protect-activation                                      | | 0xA610 | 132 | initial-automatic-adjustment-of-the-roll-end-limit-every-x-cycles     | | 0xA610 | 133 | initial-general-eld-level                                             | | 0xA610 | 134 | initial-stress-reduction-value                                        | | 0xA610 | 135 | allow-changes-of-automatic-adjustment-at-the-roll-end-limit           | | 0xA610 | 136 | prohibit-changes-of-roll-end-limit                                    | | 0xA610 | 137 | prohibit-changes-of-unroll-end-limit                                  | | 0xA610 | 138 | initial-covering-panel-closing-delay                                  | | 0xA610 | 139 | initial-covered-panel-closing-delay                                   | | 0xA610 | 140 | initial-covering-panel-opening-delay                                  | | 0xA610 | 141 | initial-covered-panel-opening-delay                                   | | 0xA612 | 000 | pandp-uel-current-mode                                                | | 0xA612 | 001 | pandp-rel-current-mode                                                | | 0xA613 | 000 | last-events-type-of-last-stop                                         | | 0xA613 | 001 | historical-of-the-10-dwp-last-command-received                        | | 0xA613 | 002 | historical-of-the-last-10-orders-received-radio                       | | 0xA613 | 003 | historical-of-the-last-10-orders-manual-received-eg-order-wired       | | 0xA613 | 004 | historical-of-the-last-10-movements-made                              | | 0xA613 | 005 | historical-of-the-last-20-orders-received                             | | 0xA613 | 006 | 1of4parts-of-the-last-20-orders-received                              | | 0xA613 | 007 | 2of4parts-of-the-last-20-orders-received                              | | 0xA613 | 008 | 3of4parts-of-the-last-20-orders-received                              | | 0xA613 | 009 | 4of4parts-of-the-last-20-orders-received                              | | 0xA613 | 128 | historical-of-10-last-faults-or-failure                               | | 0xA613 | 133 | history-of-el-manual-reinit-in-unit-nb-of-stop-at-uel                 | | 0xA613 | 134 | history-of-el-manual-reinit-in-unit-nb-of-stop-at-del                 | | 0xA613 | 135 | history-of-pnp-auto-reinit-in-unit-nb-of-stop-at-uel                  | | 0xA613 | 136 | history-of-pnp-auto-reinit-in-unit-nb-of-stop-at-del                  | | 0xA613 | 137 | history-of-obstacle-in-unit-nb-of-stop-at-uel                         | | 0xA613 | 138 | history-of-obstacle-in-unit-nb-of-stop-at-del                         | | 0xA613 | 139 | history-of-auto-learning-in-unit-nb-of-el                             | | 0xA614 | 000 | motor-type                                                            | | 0xA614 | 001 | mode-user-or-production                                               | | 0xA614 | 002 | status-of-dielectric-test                                             | | 0xA614 | 003 | nb-of-passes-to-test-the-dielectric-test                              | | 0xA614 | 004 | reserve-functional-test                                               | | 0xA614 | 005 | functional-test-measured-values                                       | | 0xA614 | 006 | status-of-functional-test                                             | | 0xA614 | 007 | nb-of-passes-to-test-the-functional-test                              | | 0xA614 | 008 | reserve-programming-test                                              | | 0xA614 | 009 | status-of-programming-test                                            | | 0xA614 | 010 | nb-of-passes-to-test-the-programming-test                             | | 0xA614 | 011 | noise-value-measured                                                  | | 0xA614 | 012 | status-of-noise-test                                                  | | 0xA614 | 013 | nb-of-passes-to-test-the-noise-test                                   | | 0xA614 | 014 | last-post-past                                                        | | 0xA614 | 015 | status-of-the-last-post-made                                          | | 0xA614 | 016 | reserve-process                                                       | | 0xA614 | 017 | blocked-rotor-pec                                                     | | 0xA614 | 017 | blocked-rotor-pec                                                     | | 0xA614 | 018 | overcurrent-detected-during-regulation-pec                            | | 0xA614 | 018 | overcurrent-detected-during-regulation-pec                            | | 0xA614 | 019 | speed-pec                                                             | | 0xA614 | 019 | speed-pec                                                             | | 0xA614 | 020 | thermal-pec                                                           | | 0xA614 | 020 | thermal-pec                                                           | | 0xA614 | 021 | unique-io-nb                                                          | | 0xA614 | 022 | channel-1-calibration                                                 | | 0xA614 | 023 | channel-2-calibration                                                 | | 0xA614 | 024 | channel-3-calibration                                                 | | 0xA614 | 025 | radio-test-signature                                                  | | 0xA614 | 026 | vdd-measure                                                           | | 0xA614 | 027 | ems-software-test-revision                                            | | 0xA614 | 028 | ems-test-status                                                       | | 0xA614 | 029 | calibration-number                                                    | | 0xA614 | 128 | software-version                                                      | | 0xA614 | 129 | part-nb                                                               | | 0xA614 | 129 | part-nb                                                               | | 0xA614 | 130 | production-date                                                       | | 0xA614 | 130 | production-date                                                       | | 0xA614 | 130 | production-date                                                       | | 0xA614 | 132 | actuator-serial-nb                                                    | | 0xA614 | 132 | actuator-serial-nb                                                    | | 0xA614 | 133 | product-version-finished-product                                      | | 0xA614 | 134 | motor-identification-name-commercial-name                             | | 0xA614 | 135 | actuator-serial-nb-on-22-characters                                   | | 0xA614 | 137 | nominal-torque                                                        | | 0xA614 | 138 | commercial-speed                                                      | | 0xA614 | 139 | ems-date-code-of-manufacture                                          | | 0xA614 | 139 | ems-date-code-of-manufacture                                          | | 0xA614 | 140 | ems-manufacturing-order                                               | | 0xA614 | 141 | ems-plant-code-and-controller-nb                                      | | 0xA614 | 142 | ems-test-flags                                                        | | 0xA614 | 143 | injected-temperature-calibration                                      | | 0xA614 | 144 | temperature-calibration-motor-resistivity                             | | 0xA615 | 128 | oem-acces-code                                                        | | 0xA615 | 129 | eom-name                                                              | | 0xA615 | 129 | eom-name                                                              | | 0xA615 | 130 | production-site-name                                                  | | 0xA615 | 131 | oem-free-words                                                        | | 0xA615 | 132 | customer-production-date                                              | | 0xA615 | 133 | client-model-reference                                                | | 0xA615 | 133 | client-model-reference                                                | | 0xA615 | 134 | client-model-name                                                     | | 0xA615 | 134 | client-model-name                                                     | | 0xA615 | 135 | workstation-nb                                                        | | 0xA615 | 136 | of-nb                                                                 | | 0xA615 | 137 | cde-nb                                                                | | 0xA615 | 138 | cde-nb-rank                                                           | | 0xA615 | 139 | oem-battery-reference                                                 | | 0xA615 | 140 | oem-battery-name                                                      | | 0xA615 | 141 | oem-solarpanel-reference                                              | | 0xA615 | 142 | oem-solarpanel-name                                                   | | 0xA617 | 000 | wind-high-speed-activation                                            | | 0xA617 | 001 | sun-low-speed-activation                                              | | 0xA617 | 128 | low-speed-value                                                       | | 0xA617 | 129 | nominal-speed-value                                                   | | 0xA618 | 128 | nb-of-factory-mode-due-to-ems-frame-raz-oem                           | | 0xA618 | 129 | nb-of-factory-mode-due-to-a-prog-7s-on-a-1w-after-a-double-power-cut  | | 0xA618 | 130 | nb-of-factory-mode-due-to-an-explicit-io-frame                        | | 0xA618 | 131 | nb-of-factory-mode-due-to-a-warm-reset-with-unvalid-end-limits-in-ram | | 0xA618 | 132 | nb-of-factory-mode-due-to-a-warm-reset-in-movement                    | | 0xA618 | 133 | nb-of-factory-mode-due-to-bad-ram-and-flash                           | | 0xA618 | 134 | nb-of-withdraw-to-default-values-due-to-bad-flash                     | | 0xA618 | 135 | nb-of-oem-factory-mode-due-to-local-stimuli                           | | 0xA618 | 136 | nb-of-sfy-factory-mode-due-to-local-stimuli                           | | 0xA618 | 137 | nb-of-oem-factory-mode-due-to-serial-link                             | | 0xA618 | 138 | nb-of-sfy-factory-mode-due-to-serial-link                             | | 0xA618 | 139 | nb-of-oem-factory-mode-due-to-an-explicit-io-frame                    | | 0xA619 | 000 | initial-torque-curve                                                  | | 0xA619 | 001 | penultimate-torque-curve                                              | | 0xA619 | 002 | ultimate-torque-curve                                                 | | 0xA61A | 000 | time-stamp                                                            | | 0xA61A | 001 | event-name                                                            | | 0xA61A | 002 | raw-data                                                              | | 0xA61A | 003 | voltage-type                                                          | | 0xA61A | 004 | reset-type                                                            | | 0xA61A | 005 | motor-state-at-power-fail                                             | | 0xA61A | 006 | current-position                                                      | | 0xA61A | 007 | wt-command-type                                                       | | 0xA61A | 008 | wt-command-details                                                    | | 0xA61A | 009 | actuator-reaction-type                                                | | 0xA61A | 010 | thermal-protection-cause                                              | | 0xA61A | 011 | measure-location                                                      | | 0xA61A | 012 | origin-file-id                                                        | | 0xA61A | 013 | origin-function-id                                                    | | 0xA61A | 014 | initial-speed                                                         | | 0xA61A | 015 | movement-id                                                           | | 0xA61A | 016 | transmitter-address                                                   | | 0xA61A | 017 | io-command                                                            | | 0xA61A | 018 | io-frame-data                                                         | | 0xA61A | 019 | internal-event-type                                                   | | 0xA61A | 020 | time-out-origin                                                       | | 0xA61A | 021 | threshold-value                                                       | | 0xA61A | 022 | travel-zone                                                           | | 0xA61A | 023 | stop-type                                                             | | 0xA61A | 024 | rotation-dir-type                                                     | | 0xA61A | 025 | odometer-lsb                                                          | | 0xA61A | 026 | brake-slip-type                                                       | | 0xA61A | 027 | hot-reset-type                                                        | | 0xA61A | 028 | reset-count                                                           | | 0xA61A | 029 | pairing-type                                                          | | 0xA61A | 030 | manufacturer-id                                                       | | 0xA61A | 031 | sequence-number                                                       | | 0xA61A | 032 | master-1w-type                                                        | | 0xA61A | 033 | setting-modification-type                                             | | 0xA61A | 034 | requester                                                             | | 0xA61A | 035 | previous-value                                                        | | 0xA61A | 036 | new-value                                                             | | 0xA61A | 037 | back-to-factory-mode-cause                                            | | 0xA61A | 039 | ip-infos                                                              | | 0xA61A | 040 | rotation-direction                                                    | | 0xA61A | 041 | upper-end-limit-infos                                                 | | 0xA61A | 042 | lower-end-limit-infos                                                 | | 0xA61A | 043 | actuator-status                                                       | | 0xA61A | 044 | status-rx-frame                                                       | | 0xA61A | 045 | status-tx-frame                                                       | | 0xA61A | 046 | particular-position-infos                                             | | 0xA61A | 047 | radio-request                                                         | | 0xA61A | 048 | radio-target                                                          | | 0xA61B | 128 | nb-hard-obstacle-in-unpaired-mode-open                                | | 0xA61B | 129 | nb-hard-obstacle-in-unpaired-mode-close                               | | 0xA61B | 130 | nb-hard-obstacle-in-interm-maint-mode-z1-open                         | | 0xA61B | 131 | nb-hard-obstacle-in-interm-maint-mode-z2-open                         | | 0xA61B | 132 | nb-hard-obstacle-in-interm-maint-mode-z3-open                         | | 0xA61B | 133 | nb-hard-obstacle-in-interm-maint-mode-z1s-open                        | | 0xA61B | 134 | nb-hard-obstacle-in-interm-maint-mode-z1-close                        | | 0xA61B | 135 | nb-hard-obstacle-in-interm-maint-mode-z2-close                        | | 0xA61B | 136 | nb-hard-obstacle-in-interm-maint-mode-z3-close                        | | 0xA61B | 137 | nb-hard-obstacle-in-interm-maint-mode-z1s-close                       | | 0xA61B | 138 | nb-hard-obstacle-in-count-or-maint-mode-z1-open                       | | 0xA61B | 139 | nb-hard-obstacle-in-count-or-maint-mode-z2-open                       | | 0xA61B | 140 | nb-hard-obstacle-in-count-or-maint-mode-z3-open                       | | 0xA61B | 141 | nb-hard-obstacle-in-count-or-maint-mode-z1s-open                      | | 0xA61B | 142 | nb-hard-obstacle-in-count-or-maint-mode-z1-close                      | | 0xA61B | 143 | nb-hard-obstacle-in-count-or-maint-mode-z2-close                      | | 0xA61B | 144 | nb-hard-obstacle-in-count-or-maint-mode-z3-close                      | | 0xA61B | 145 | nb-hard-obstacle-in-count-or-maint-mode-z1s-close                     | | 0xA61B | 146 | nb-soft-obstacle-in-interm-maint-mode-z1-open                         | | 0xA61B | 147 | nb-soft-obstacle-in-interm-maint-mode-z2-open                         | | 0xA61B | 148 | nb-soft-obstacle-in-interm-maint-mode-z3-open                         | | 0xA61B | 149 | nb-soft-obstacle-in-interm-maint-mode-z1s-open                        | | 0xA61B | 150 | nb-soft-obstacle-in-interm-maint-mode-z1-close                        | | 0xA61B | 151 | nb-soft-obstacle-in-interm-maint-mode-z2-close                        | | 0xA61B | 152 | nb-soft-obstacle-in-interm-maint-mode-z3-close                        | | 0xA61B | 153 | nb-soft-obstacle-in-interm-maint-mode-z1s-close                       | | 0xA61B | 154 | nb-soft-obstacle-in-count-or-maint-mode-z1-open                       | | 0xA61B | 155 | nb-soft-obstacle-in-count-or-maint-mode-z2-open                       | | 0xA61B | 156 | nb-soft-obstacle-in-count-or-maint-mode-z3-open                       | | 0xA61B | 157 | nb-soft-obstacle-in-count-or-maint-mode-z1s-open                      | | 0xA61B | 158 | nb-soft-obstacle-in-count-or-maint-mode-z1-close                      | | 0xA61B | 159 | nb-soft-obstacle-in-count-or-maint-mode-z2-close                      | | 0xA61B | 160 | nb-soft-obstacle-in-count-or-maint-mode-z3-close                      | | 0xA61B | 161 | nb-soft-obstacle-in-count-or-maint-mode-z1s-close                     | | 0xA61B | 162 | nb-obstacle-zair-open                                                 | | 0xA61B | 163 | nb-obstacle-zair-close                                                | | 0xA61B | 164 | nb-in-normative-area-obstacle-open                                    | | 0xA61B | 165 | nb-out-normative-area-obstacle-open                                   | | 0xA61B | 166 | nb-in-normative-area-obstacle-close                                   | | 0xA61B | 167 | nb-out-normative-area-obstacle-close                                  | | 0xA61B | 168 | nb-abnormal-resistance-in-initial-mode-open                           | | 0xA61B | 169 | nb-abnormal-resistance-in-initial-mode-close                          | | 0xA61B | 170 | nb-abnormal-resistance-in-interm-maint-mode-open                      | | 0xA61B | 171 | nb-abnormal-resistance-in-interm-maint-mode-close                     | | 0xA61B | 172 | nb-abnormal-resistance-in-count-or-maint-mode-z1-open                 | | 0xA61B | 173 | nb-abnormal-resistance-in-count-or-maint-mode-z2-open                 | | 0xA61B | 174 | nb-abnormal-resistance-in-count-or-maint-mode-z1-close                | | 0xA61B | 175 | nb-abnormal-resistance-in-count-or-maint-mode-z2-close                | | 0xA61B | 176 | nb-crown-stop-in-interm-maint-mode-z1-open                            | | 0xA61B | 177 | nb-crown-stop-in-interm-maint-mode-z2-open                            | | 0xA61B | 178 | nb-crown-stop-in-interm-maint-mode-z3-open                            | | 0xA61B | 179 | nb-crown-stop-in-interm-maint-mode-z1s-open                           | | 0xA61B | 180 | nb-crown-stop-in-interm-maint-mode-z1-close                           | | 0xA61B | 181 | nb-crown-stop-in-interm-maint-mode-z2-close                           | | 0xA61B | 182 | nb-crown-stop-in-interm-maint-mode-z3-close                           | | 0xA61B | 183 | nb-crown-stop-in-interm-maint-mode-z1s-close                          | | 0xA61B | 184 | nb-crown-stop-in-count-or-maint-mode-z1-open                          | | 0xA61B | 185 | nb-crown-stop-in-count-or-maint-mode-z2-open                          | | 0xA61B | 186 | nb-crown-stop-in-count-or-maint-mode-z3-open                          | | 0xA61B | 187 | nb-crown-stop-in-count-or-maint-mode-z1s-open                         | | 0xA61B | 188 | nb-crown-stop-in-count-or-maint-mode-z1-close                         | | 0xA61B | 189 | nb-crown-stop-in-count-or-maint-mode-z2-close                         | | 0xA61B | 190 | nb-crown-stop-in-count-or-maint-mode-z3-close                         | | 0xA61B | 191 | nb-crown-stop-in-count-or-maint-mode-z1s-close                        | | 0xA61B | 192 | nb-open-over-speed-in-unpaired-phase                                  | | 0xA61B | 193 | nb-close-over-speed-in-unpaired-phase                                 | | 0xA61B | 194 | nb-open-over-speed-in-initial-mode                                    | | 0xA61B | 195 | nb-close-over-speed-in-initial-mode                                   | | 0xA61B | 196 | nb-overspeed-in-interm-maint-mode-z1-open                             | | 0xA61B | 197 | nb-overspeed-in-interm-maint-mode-z2-open                             | | 0xA61B | 198 | nb-overspeed-in-interm-maint-mode-z3-open                             | | 0xA61B | 199 | nb-overspeed-in-interm-maint-mode-z1s-open                            | | 0xA61B | 200 | nb-overspeed-in-interm-maint-mode-z1-close                            | | 0xA61B | 201 | nb-overspeed-in-interm-maint-mode-z2-close                            | | 0xA61B | 202 | nb-overspeed-in-interm-maint-mode-z3-close                            | | 0xA61B | 203 | nb-overspeed-in-interm-maint-mode-z1s-close                           | | 0xA61B | 204 | nb-overspeed-in-count-or-maint-mode-z1-open                           | | 0xA61B | 205 | nb-overspeed-in-count-or-maint-mode-z2-open                           | | 0xA61B | 206 | nb-overspeed-in-count-or-maint-mode-z3-open                           | | 0xA61B | 207 | nb-overspeed-in-count-or-maint-mode-z1s-open                          | | 0xA61B | 208 | nb-overspeed-in-count-or-maint-mode-z1-close                          | | 0xA61B | 209 | nb-overspeed-in-count-or-maint-mode-z2-close                          | | 0xA61B | 210 | nb-overspeed-in-count-or-maint-mode-z3-close                          | | 0xA61B | 211 | nb-overspeed-in-count-or-maint-mode-z1s-close                         | | 0xA61B | 212 | nb-manual-movement-from-close-position                                | | 0xA61B | 213 | nb-uncoupled-or-breaking-movement                                     | | 0xA61B | 214 | nb-secured-ventilation-entry-learning-pass                            | | 0xA61B | 215 | nb-bounce-effect-pec                                                  | | 0xA61B | 216 | nb-unlock-successfully                                                | | 0xA61B | 217 | nb-manual-movement                                                    | | 0xA61B | 218 | nb-movements-to-ventilation-error                                     | | 0xA61C | 000 | success                                                               | | 0xA61C | 001 | locking                                                               | | 0xA61C | 128 | max-torque                                                            | | 0xA61C | 129 | attempt-index                                                         | | 0xA620 | 000 | status                                                                | | 0xA621 | 000 | derogation                                                            | | 0xA622 | 000 | diagnosis                                                             | | 0xA623 | 000 | synchro                                                               | | 0xA624 | 000 | settings                                                              | | 0xA625 | 000 | temp-mode                                                             | | 0xA626 | 000 | time-prog-1                                                           | | 0xA627 | 000 | time-prog-2                                                           | | 0xFFFD | 000 | rs100-debug                                                           |  &gt; ![NOTE] &gt; You can find the unaltered data from the XML files and more on the [Set&amp;Go io page](devices/Somfy/SetGo/README.md).  ###### SIMU  | CMD    | NAME                    | | -----: | :---------------------- | | 0x0003 | SMF_SAP_SETTINGS_GET    | | 0x0004 | SMF_SAP_SETTINGS_SET    | | 0x0005 | SMF_HAND_SHAKE          | | 0x0100 | SMF_CONFIG_GET          | | 0x0101 | SMF_CONFIG_SET          | | 0x0200 | SMF_RTS_EXEC            | | 0x0201 | SMF_RTS_EXEC_SCENE      | | 0x0202 | SMF_RTS_SUN_ON_OFF_EXEC | | 0x0300 | SMF_LOG_GET             | | 0x0301 | SMF_LOG_CLEAR           | | 0x0400 | SMF_TIME_GET            | | 0x0401 | SMF_TIME_SET            | | 0x5000 | SM_GET_INFO             | | 0x6000 | SMF_REBOOT_COLA         | | 0x6001 | SMF_QUERY_COLA_INFO     | | 0x6002 | SMF_OPEN_COLA_UPDATE    | | 0x6003 | SMF_PUSH_COLA_DATA      | | 0x6004 | SMF_CLOSE_COLA_UPDATE   |    #### Data Types  -  0 = Binary -  1 = INTEGER / Binary XML -  2 = FLOAT   / XML -  3 = STRING -  4 = BLOB -  5 = DATE -  6 = BOOLEAN -  7 = VALUE MAPPING (JSON) -  8 = INTERVAL MAPPING -  9 = PASSWORD - 10 = ARRAY - 11 = DYNAMIC OBJECT  #### Manufacturer IDs  Also called OEM ID. Each Manufacturer has their own ID:  - 0x00 = All / Public / Generic - 0x01 = Velux - 0x02 = Somfy - 0x03 = Honeywell - 0x04 = H\u00f6rmann - 0x05 = ASSA ABLOY - 0x06 = Niko - 0x07 = Window Master - 0x08 = Renson - 0x09 = CIAT - 0x0A = Secuyou - 0x0B = Overkiz - 0x0C = Atlantic Group - 0x0D = Zehnder Group - 0x0E = ??? - 0x0F = ???  &gt; ![NOTE] &gt; Manufacturers are only defined as Unknown when they are not assigned an ID. This is the case for old io-homecontrol installations.  #### Node Types &amp; Node Sub Types  List of Node Types &amp; Node Sub Types  | HEX  | NOTATION | TYPE         | SUB TYPE | NAME                                                 | | :--: | -------: | :----------: | :------: | :--------------------------------------------------- | | 0000 | 0.00     | 00 0000 0000 | 000000   | All Nodes except Controller (No Type)                | | 0033 | 0.51     | 00 0000 0000 | 110011   | Smart Plug                                           | | 0040 | 1.00     | 00 0000 0001 | 000000   | Interior Venetian Blind (IVB)                        | | 006A | 1.42     | 00 0000 0001 | 110011   | Light Sensor                                         | | 0080 | 2.00     | 00 0000 0010 | 000000   | Roller Shutter                                       | | 0081 | 2.01     | 00 0000 0010 | 000001   | Roller Shutter with Adjustable Slats                 | | 0082 | 2.02     | 00 0000 0010 | 000010   | Roller Shutter with Projection                       | | 00C0 | 3.00     | 00 0000 0011 | 000000   | Vertical Exterior Awning (Terrace)                   | | 00CA | 3.10     | 00 0000 0011 | 001010   | Window Covering Device                               | | 00CB | 3.11     | 00 0000 0011 | 001011   | Window Covering Controller                           | | 0100 | 4.00     | 00 0000 0100 | 000000   | Window Opener                                        | | 0101 | 4.01     | 00 0000 0100 | 000001   | Window Opener with Integrated Rain Sensor            | | 012E | 4.46     | 00 0000 0100 | 101110   | Temp and Humidity Sensor                             | | 0140 | 5.00     | 00 0000 0101 | 000000   | Garage Door Opener                                   | | 017A | 5.58     | 00 0000 0101 | 111010   | Garage Door Opener: Open/Close Only                  | | 0180 | 6.00     | 00 0000 0110 | 000000   | Light: On/Off + Dimming                              | | 0192 | 6.18     | 00 0000 0110 | 010010   | IAS Zone                                             | | 01BA | 6.58     | 00 0000 0110 | 111010   | Light: On/Off Only                                   | | 01C0 | 7.00     | 00 0000 0111 | 000000   | Gate Opener                                          | | 01FA | 7.58     | 00 0000 0111 | 111010   | Gate Opener: Open/Close Only                         | | 0200 | 8.00     | 00 0000 1000 | 000000   | Rolling Door Opener                                  | | 0240 | 9.00     | 00 0000 1001 | 000000   | Door Lock / Motorized Bolt                           | | 0241 | 9.01     | 00 0000 1001 | 000001   | Window Lock                                          | | 0280 | 10.00    | 00 0000 1010 | 000000   | Vertical Interior Blind                              | | 0290 | 11.00    | 00 0000 1011 | 000000   | Secure Configuration Device (SCD)                    | | 0300 | 12.00    | 00 0000 1100 | 000000   | Beacon = Gateway/Repeater                            | | 0340 | 13.00    | 00 0000 1101 | 000000   | Dual Roller Shutter                                  | | 0380 | 14.00    | 00 0000 1110 | 000000   | Heating Temperature Interface                        | | 03C0 | 15.00    | 00 0000 1111 | 000000   | Switch: On/Off                                       | | 0400 | 16.00    | 00 0001 0000 | 000000   | Horizontal Awning                                    | | 0401 | 16.01    | 00 0001 0000 | 000001   | Pergola Rail Guided Awning                           | | 0440 | 17.00    | 00 0001 0001 | 000000   | Exterior Venetian Blind (EVB)                        | | 0480 | 18.00    | 00 0001 0010 | 000000   | Louver Blind                                         | | 04C0 | 19.00    | 00 0001 0011 | 000000   | Curtain Track                                        | | 0500 | 20.00    | 00 0001 0100 | 000000   | Ventilation Point                                    | | 0501 | 20.01    | 00 0001 0100 | 000001   | Air Inlet                                            | | 0502 | 20.02    | 00 0001 0100 | 000010   | Air Transfer                                         | | 0503 | 20.03    | 00 0001 0100 | 000011   | Air Outlet                                           | | 0540 | 21.00    | 00 0001 0101 | 000000   | Exterior Heating                                     | | 057A | 21.58    | 00 0001 0101 | 110011   | Exterior Heating: On/Off Only                        | | 0580 | 22.00    | 00 0001 0110 | 000000   | Heat Pump                                            | | 05C0 | 23.00    | 00 0001 0111 | 000000   | Intrusion Alarm System                               | | 0600 | 24.00    | 00 0001 1000 | 000000   | Swinging Shutter                                     | | 0601 | 24.01    | 00 0001 1000 | 000001   | Swinging Shutter with Independent Handling of Leaves | |      | 27.00    | 00 0001 1011 | 000000   | Sliding Window                                       | |      | 28.00    | 00 0001 1100 | 000000   | Zone Control Generator                               | |      | 29.00    | 00 0001 1101 | 000000   | Bioclimatic Pergola                                  | |      | 30.00    | 00 0001 1110 | 000000   | Indoor Siren                                         | |      | 51.00    | 00 0010 0000 | 000000   | Domestic Hot Water                                   | |      | 52.00    | 00 0010 0000 | 000000   | Electrical Heater                                    | |      | 53.00    | 00 0010 0000 | 000000   | Heat Recovery Ventilation                            | | 3FC0 | 255.00   | 00 1111 1111 | 000000   | Central House Control                                | | FC00 | 1008.00  | 11 1111 0000 | 000000   | Test and Evaluation (RD)                             | | FFC0 | 1023.00  | 11 1111 1111 | 000000   | Remote Controller (RC)                               |  &gt; ![NOTE] &gt; Only values in the *HEX* row reflect the actual data. You can also get these values when combining *TYPE* and *SUBTYPE* binary rows.  ##### Sensor Types  - 0   = UNKNOWN SENSOR - 1   = Light Inside - 1.B = Light Outside (Sun Sensor) - 2   = TEMPERATURE INSIDE SENSOR - 3   = TEMPERATURE OUTSIDE SENSOR - 5   = PRESSURE SENSOR - 11  = LIGHT OUTSIDE SENSOR - 12  = CUMULATED GAS - 13  = WATER CONSUMPTION SENSOR - 14  = THERMAL CONSUMPTION SENSOR - 15  = ELECTRIC CONSUMPTION SENSOR - 128 = SMOKE SENSOR - 133 = OPENING DETECTOR - 134 = MOTION SENSOR - 254 = MULTITYPE SENSOR  ##### Node Variations  - byte[1] NodeVariation: Depends on NodeType/SubType   - Window     - 0 = Not Set     - 1 = Top Hung     - 2 = Kip     - 3 = Flat Roof     - 4 = Sky Light    #### Priorities  - Level   - 0x0 = Protection Level: Human   - 0x1 = Protection Level: Environment   - 0x2 = User Level 1   - 0x3 = User Level 2   - 0x4 = Comfort Level 1   - 0x5 = Comfort Level 2   - 0x6 = Comfort Level 3   - 0x7 = Comfort Level 4 - Level Lock   - 0x0 = No: No Priority Level Lock   - 0x1 = Min30: Lock one or more Priority Level for 30 Minutes   - 0x2 = Forever: Lock one or more Priority Level Forever  ##### animeo IP Priorities  This definition seems to be also viable for io-homecontrol:  animeo IP operates with a priority scale of 0 (highest) - 32000 (lowest). Using the animeo IP BMS Interface commands can be sent at a priority level between 12500 and 32000. A devices's priority level can be set individually. By default, the animeo IP BMS Interface applies a priority of 12500 to all devices in the system. Changing a priority level of a device will only effect future commands, it will not effect already sent commands. Once a command is sent to a device it will remain locked at that priority level until it is unlocked by adjusting the devices priority to -1; the shade will not be able to be moved unless a command with a higher priority is sent to the device.  - 0-12500 = animeo IP SECURITY - 12500 = animeo IP BMS Interface (LIMIT) - Default - 13000 = LOCAL PC COMMAND - 14000 = LOCAL COMMAND TIMER - 15000 = LOCAL COMMAND - 19000 = TIMER - 20000 = GET HEAT - 21000 = PRESERVE HEAT - 22000 = SUN - 32000 = DEFAULT - 32000 = CUSTOM DEFAULT"},{"location":"COMMANDS/#status-reply-values","title":"Status Reply Values","text":"List of Status Replies  | ID   | Name                                      | Meaning                                                        | | ---: | ----------------------------------------- | -------------------------------------------------------------- | | 0x00 | UNKNOWN_STATUS_REPLY                      | unknown reply                                                  | | 0x01 | COMMAND_COMPLETED_OK                      | no errors detected                                             | | 0x02 | NO_CONTACT                                | no communication to node                                       | | 0x03 | MANUALLY_OPERATED                         | manually operated by a user                                    | | 0x04 | BLOCKED                                   | node has been blocked by an object                             | | 0x05 | WRONG_SYSTEMKEY                           | the node contains a wrong system key                           | | 0x06 | PRIORITY_LEVEL_LOCKED                     | the node is locked on this priority level                      | | 0x07 | REACHED_WRONG_POSITION                    | node has stopped in another position than expected             | | 0x08 | ERROR_DURING_EXECUTION                    | an error has occurred during execution of command              | | 0x09 | NO_EXECUTION                              | no movement of the node parameter                              | | 0x0A | CALIBRATING                               | the node is calibrating the parameters                         | | 0x0B | POWER_CONSUMPTION_TOO_HIGH                | the node power consumption is too high                         | | 0x0C | POWER_CONSUMPTION_TOO_LOW                 | the node power consumption is too low                          | | 0x0D | LOCK_POSITION_OPEN                        | door lock errors. (Door open during lock command)              | | 0x0E | MOTION_TIME_TOO_LONG__COMMUNICATION_ENDED | the target was not reached in time                             | | 0x0F | THERMAL_PROTECTION                        | the node has gone into thermal protection mode                 | | 0x10 | PRODUCT_NOT_OPERATIONAL                   | the node is not currently operational                          | | 0x11 | FILTER_MAINTENANCE_NEEDED                 | the filter needs maintenance                                   | | 0x12 | BATTERY_LEVEL                             | the battery level is low                                       | | 0x13 | TARGET_MODIFIED                           | the node has modified the target value of the command          | | 0x14 | MODE_NOT_IMPLEMENTED                      | this node does not support the mode received                   | | 0x15 | COMMAND_INCOMPATIBLE_TO_MOVEMENT          | the node is unable to move in the right direction              | | 0x16 | USER_ACTION                               | dead bolt is manually locked during unlock command             | | 0x17 | DEAD_BOLT_ERROR                           | dead bolt error                                                | | 0x18 | AUTOMATIC_CYCLE_ENGAGED                   | the node has gone into automatic cycle mode                    | | 0x19 | WRONG_LOAD_CONNECTED                      | wrong load on node                                             | | 0x1A | COLOUR_NOT_REACHABLE                      | that node is unable to reach received colour code              | | 0x1B | TARGET_NOT_REACHABLE                      | the node is unable to reach received target position           | | 0x1C | BAD_INDEX_RECEIVED                        | io-protocol has received an invalid index                      | | 0x1D | COMMAND_OVERRULED                         | that the command was overruled by a new command                | | 0x1E | NODE_WAITING_FOR_POWER                    | that the node reported waiting for power                       | | 0x20 | NODE_LOCKED                               | Node is Locked                                                 | | 0x21 | Wrong Position                            | Wrong Position                                                 | | 0x22 | Limits not set                            | Limits not set                                                 | | 0x23 | IP not set                                | IP not set                                                     | | 0x24 | Out of Range                              | Out of Range                                                   | | 0xDF | INFORMATION_CODE                          | an unknown error code received                                 | | 0xE0 | PARAMETER_LIMITED                         | the parameter was limited by an unknown device                 | | 0xE1 | LIMITATION_BY_LOCAL_USER                  | the parameter was limited by local button                      | | 0xE2 | LIMITATION_BY_USER                        | the parameter was limited by a remote control                  | | 0xE3 | LIMITATION_BY_RAIN                        | the parameter was limited by a rain sensor                     | | 0xE4 | LIMITATION_BY_TIMER                       | the parameter was limited by a timer                           | | 0xE5 | LIMITATION_BY_SCD                         | the parameter was limited by a security controlling actuator   | | 0xE6 | LIMITATION_BY_UPS                         | the parameter was limited by a power supply                    | | 0xE7 | LIMITATION_BY_UNKNOWN_DEVICE              | the parameter was limited by an unknown device                 | | 0xEA | LIMITATION_BY_SAAC                        | the parameter was limited by a standalone automatic controller | | 0xEB | LIMITATION_BY_WIND                        | the parameter was limited by a wind sensor                     | | 0xEC | LIMITATION_BY_MYSELF                      | the parameter was limited by the node itself                   | | 0xED | LIMITATION_BY_AUTOMATIC_CYCLE             | the parameter was limited by an automatic cycle                | | 0xEE | LIMITATION_BY_EMERGENCY                   | the parameter was limited by an emergency                      |"},{"location":"COMMANDS/#command-ids","title":"Command IDs","text":""},{"location":"COMMANDS/#00-activateexecute-function","title":"00: Activate/Execute Function","text":"<ul> <li>Command ID: 0x00 (1 byte)</li> <li>Command Originator (1 byte)</li> <li>ACEI (1 byte)</li> <li>Main Parameter (2 bytes)</li> <li>Functional Parameter 1 (1 byte)</li> <li> <p>Functional Parameter 2 (1 byte)</p> </li> <li> <p>Example</p> </li> <li><code>00 01 43 D200 00 00</code></li> <li>|Command ID=0x00|Originator=0x01 (User)|ACEI=0x43|MainParam=0xD200 (Current)|FP1=0|FP2=0|</li> <li>2W Example</li> <li>2W S 1 E 0       FROM 842E3      TO FE90EE       CMD 0   DATA(6)03 e7 6400 0000</li> <li>Command ID=0x00, Originator=0x03, ACEI=0xe7, MainParam=0x6400, FP1=0, FP2=0</li> <li>1W Example</li> <li>1W S 1 E 1 B 0 R 0 LPM 0 V 0 U1 0 U2 0 U3 0      FROM 28DB36     TO 3F   CMD 0   DATA(14)0167d2000000    SEQ 247B        MAC 3cd2ad870771</li> </ul>"},{"location":"COMMANDS/#01-activate-mode","title":"01: Activate Mode","text":"<ul> <li>Command ID: 0x01 (1 byte)</li> <li>Command originator (1 byte)</li> <li>ACEI (1 byte)</li> <li>Mode number (1 byte)</li> <li>Mode parameter (1 byte)</li> <li>Unknown (1 byte)</li> <li> <p>Unknown (1 byte)</p> </li> <li> <p>Exmaple</p> </li> <li>1W Example: <code>1W S 1 E 1 B 0 R 0 LPM 1 V 0 U1 0 U2 0 U3 0      FROM 9A5CA0     TO 3F   CMD 1   DATA(13)0143000131      SEQ 1848        MAC 13f3e59def08</code></li> </ul>"},{"location":"COMMANDS/#02-direct-command-manual-order","title":"02: Direct Command / Manual Order","text":"NAME CMD OID PID ... BYTES 1 n n ... <ul> <li>Command ID: 0x02 (1 Byte)</li> <li>ASCII (n Bytes): See Manual Order</li> <li> <p>Template: <code>02 OID 09 PID ... 03 CKS</code></p> <ul> <li>OID = Order ID = 0xXX: see Manual Order IDs</li> <li>PID = Parameter ID = 1 ... n Bytes: See Manual Order IDs</li> <li>CKS = ChecKSum</li> </ul> </li> <li> <p>Example</p> </li> <li><code>02 474857</code> =  02 GHW = Get Hardware Version</li> </ul> <p>![NOTE] Only applicable via serial console!</p>"},{"location":"COMMANDS/#03-private-command","title":"03: Private Command","text":"<ul> <li>Command ID: 0x03 (1 byte)</li> <li>Data? (3-6 bytes)</li> <li>Example</li> <li>2W S 1 E 0       FROM 0xBox      TO 0xDevice       CMD 3   DATA(3)030000</li> <li>2W S 1 E 0       FROM 842E3      TO 315824       CMD 3   DATA(3)030000</li> </ul>"},{"location":"COMMANDS/#04-private-command-answer","title":"04: Private Command Answer","text":"<ul> <li>Command ID: 0x04 (1 byte)</li> <li>Data? (6-20 bytes)</li> <li>Example</li> <li>2W S 0 E 1       FROM 0xDevice      TO 0xBox/Gateway        CMD 4   DATA(14)05 800000000000009a5065010000</li> <li>First byte of DATA is the same as CMD 0xFE: The Error Code. 0x05 is OK</li> </ul>"},{"location":"COMMANDS/#0c-unknown-iopreparedatasession","title":"0C: Unknown (IoPrepareDataSession?)","text":"<ul> <li>Command ID: 0x0c (1 byte)</li> <li>Data? (4 bytes)</li> <li>Example</li> <li>2W S 1 E 0       FROM 0xBox      TO 0xDevice       CMD C   DATA(4)d8000000</li> </ul>"},{"location":"COMMANDS/#0d-unknownanswer-to-0c","title":"0D: Unknown/Answer to 0C","text":"<ul> <li>Command ID: 0x0d (1 byte)</li> <li>Data? (5 bytes)</li> <li>Examples</li> <li>2W S 0 E 1       FROM 0xDevice     TO 0xBox        CMD D   DATA(5)05aa0a0000</li> <li>2W S 1 E 0       FROM 842E3      TO 904C09       CMD C   DATA(4)d8000000</li> <li>2W S 1 E 0      FROM 842E3      TO DA2EE6       CMD C   DATA(4)d8000000</li> </ul>"},{"location":"COMMANDS/#0d-unknown-answer-to-0x0c","title":"0D: Unknown (Answer to 0x0C)","text":"<ul> <li>Command ID: 0x0c (1 byte)</li> <li>Data? (5 bytes)</li> <li>Example</li> <li>2W S 0 E 1      FROM DA2EE6     TO 842E3        CMD D   DATA(5)05aa0d0000</li> </ul>"},{"location":"COMMANDS/#19-unknown-followed-by-0xfe","title":"19: Unknown (Followed by 0xFE)","text":"<ul> <li>Command ID: 0x19 (1 byte)</li> <li>Data? (1 byte)</li> <li>Example</li> <li>2W S 1 E 0       FROM 0xBox      TO 0xDevice       CMD 19  DATA(1)02 or 03 or 04 or 07</li> </ul>"},{"location":"COMMANDS/#1a-answer-set-sensor-value","title":"1A: Answer: Set Sensor Value","text":""},{"location":"COMMANDS/#20-private-protocol-write-private","title":"20: Private Protocol (\"Write Private\")","text":"<ul> <li>Command ID: 0x20 (1 byte)</li> <li>Manufacturer ID (1 byte)</li> <li> <p>Manufacturer Data (n Bytes)</p> </li> <li> <p>Example: <code>20 02 FF0143000C0000</code></p> </li> <li>Command ID = 0x20</li> <li>Manufacturer = 0x02 (Somfy)</li> <li>Data = FF 0143000C0000</li> </ul> <p>![IMPORTANT] Manufacture Specific Private Commands. These get defined and interpreted differently for every OEM.</p> <p>Using private commands can brick your device!</p> <ul> <li>Example: Thermor I2G = <code>20 0C 61 0103 C300</code></li> <li><code>AC MaPa F1 F1</code></li> <li><code>61 0103 C3 00</code>: <code>C3</code> (dec: 195) is 19.5\u00b0C set with button</li> <li><code>61 0103 D2 00</code>: <code>D2</code> (dec: 210) is 21.0\u00b0C set with button</li> </ul>"},{"location":"COMMANDS/#20-base-command-writeprivate","title":"20 - Base Command: WritePrivate","text":"<ul> <li>Parameter:</li> <li>02 - Main Parameter</li> <li>Function Parameter:<ul> <li>4 more FP</li> <li>02 - stop_after_save_limit</li> <li>04 - enter_settings_mode</li> <li>05 - save_lower_end_limit</li> <li>06 - save_upper_end_limit</li> <li>.. - ???</li> <li>DF save_settings</li> </ul> </li> </ul>"},{"location":"COMMANDS/#21-private-protocol-response","title":"21: Private Protocol Response","text":"<ul> <li>Command ID: 0x21 (1 byte)</li> <li>Manufacturer ID (1 byte)</li> <li> <p>Data</p> </li> <li> <p>PrivateCommand-ACK Response:</p> </li> <li>Man    = 1 Byte</li> <li>Cmd    = 1 Byte</li> <li>Ses    = 1 Byte</li> <li>Status = 1 Byte</li> </ul>"},{"location":"COMMANDS/#28-discover","title":"28: Discover","text":"<ul> <li> <p>Command ID: 0x28 (1 byte)</p> </li> <li> <p>Example</p> </li> <li>Velux KLR100 Pairing Process</li> </ul> Python<pre><code># It seems the old Velux remotes handle the discovery in another way?\nC8 10 00FFFB 44457C 28 D88C\nC8 10 0002FB 44457C 28 A479\nC8 10 00003B 44457C 28 853A\n</code></pre> <p>![NOTE] No Authentication.</p>"},{"location":"COMMANDS/#29-discover-answer","title":"29: Discover Answer","text":"<ul> <li>Command ID: 0x29 (1 byte)</li> <li>Node type and subtype (2 bytes): type on 10 bits and subtype on the remainer</li> <li>Node type = (field &gt;&gt; 6) &amp; 1023</li> <li>Node subtype = field &amp; 63</li> <li>Node address (3 bytes)</li> <li>Manufacturer ID (1 byte)</li> <li>Multi info byte (1 byte)</li> <li>Timestamp (2 bytes)</li> </ul> <p>![NOTE] No Authentication.</p> <ul> <li>Example</li> <li><code>29 FFC0 XXXXXX 0C CC 0000</code></li> <li> <p>Command ID = 0x29, node type = 1023 (REMOTE_CONTROLLER?), node subtype = 0, node address = XXXXXX, manufacturer = Atlantic, multi info byte = 0xcc, timestamp = 0</p> </li> <li> <p>Masks:</p> </li> <li>id:      0x4</li> <li>Type:    0x8</li> <li>SubType: 0xC</li> <li>IsValid: 0xD</li> </ul>"},{"location":"COMMANDS/#2a-discover-remote","title":"2A: Discover Remote","text":"<ul> <li>Command ID: 0x2a (1 byte)</li> <li> <p>Challenge Key (12 bytes)</p> </li> <li> <p>Example</p> </li> <li><code>D4 30 00003B 44457C 2A 01CCD93AE0EADA9AEDF98344 A862 # Velux Kux 100</code></li> </ul> <p>![NOTE] Observed after launching the box in discover mode</p> <p>Observed after launching a discover via remote (see example)</p>"},{"location":"COMMANDS/#2b-discover-remote-answer","title":"2B: Discover Remote Answer","text":"<ul> <li> <p>Parameters are similar to 0x29</p> </li> <li> <p>Command ID: 0x2b (1 byte)</p> </li> <li>Node type and subtype (2 bytes)</li> <li>Node type = (field &gt;&gt; 6) &amp; 1023</li> <li>Node subtype = field &amp; 63</li> <li>Node address (3 bytes)</li> <li>Manufacturer ID (1 byte)</li> <li>Multi info byte (1 byte)</li> <li> <p>Timestamp (2 bytes)</p> </li> <li> <p>Example</p> </li> <li><code>2B 0D01 XXXXXX 0C CC 0FB8</code></li> <li>Command ID = 0x2b, node type = 52 (ELECTRICAL_HEATER), node subtype = 1, node address = XXXXXX, manufacturer = Atlantic, multi info byte = 0xcc, timestamp = 4024</li> </ul>"},{"location":"COMMANDS/#2c-discover-actuator-confirmation","title":"2C: Discover Actuator Confirmation","text":"<ul> <li>Command ID = 0x2c</li> </ul> <p>No parameter. Some sort of discover ack?</p> <p>![NOTE] Requires no Authentication</p>"},{"location":"COMMANDS/#2d-discover-confirmation-ack-answer-to-2c","title":"2D: Discover Confirmation Ack (Answer to 2C)","text":"<ul> <li>Command ID = 0x2d</li> </ul> <p>No parameter.</p> <p>![NOTE] Requires no Authentication.</p>"},{"location":"COMMANDS/#2e-unknown","title":"2E: Unknown","text":"<ul> <li>Command ID: 0x2e (1 byte)</li> <li>?? (1 byte), 00 (TaHoma sent) and 02 (Sauter heater) observed</li> </ul> <p>![NOTE] observed after launching the box in discover mode</p> <p>![NOTE] Not Authenticated?</p> <ul> <li>Example</li> <li><code>2E 00</code></li> </ul>"},{"location":"COMMANDS/#2f-unknown-answer-to-2e","title":"2F: Unknown, answer to 2e?","text":"<ul> <li>Command ID: 0x2f (1 byte)</li> <li>?? (1 byte), mirrors what is sent by 2e</li> </ul> <p>![NOTE] Not authenticated?</p>"},{"location":"COMMANDS/#30-send-1w-key","title":"30: Send 1W Key","text":"<ul> <li>Command ID: 0x30 (1 byte)</li> <li>Encrypted key (16 bytes)</li> <li>Manufacturer ID (1 byte)</li> <li>?? (1 byte)</li> <li> <p>Sequence number (2 bytes)</p> </li> <li> <p>Example</p> </li> <li><code>30 7E60491F976ADF653DB0ED785E49A201 02 01 0C25</code></li> <li>Command ID=0x30, key?: 7E60491F976ADF653DB0ED785E49A201, Manufacturer ID=0x02, ??=0x01, Sequence Number=0x0c25</li> </ul>"},{"location":"COMMANDS/#31-ask-challenge","title":"31: Ask Challenge","text":"<ul> <li>Command ID: 0x31 (1 byte)</li> </ul> <p>No parameter. Destination device answers with 0x3C.</p> <p>![NOTE] Requires no authentication.</p>"},{"location":"COMMANDS/#32-key-transfer","title":"32: Key Transfer","text":"<ul> <li>Command ID: 0x32 (1 byte)</li> <li>Encrypted 2-Way Key (16 bytes)</li> </ul> <p>![NOTE] The Key is encrypted and depends on a challenge submitted before using 0x38 or 0x3C, see LinkLayer</p>"},{"location":"COMMANDS/#33-find-actuator-ack-key-transfer-ack","title":"33: Find Actuator Ack = Key Transfer Ack","text":"<ul> <li>Command ID: 0x33 (1 byte)</li> </ul> <p>No parameter. Is sent after each 0x32 request.</p>"},{"location":"COMMANDS/#36-address-request","title":"36: Address Request","text":"<ul> <li>Command ID: 0x36 (1 byte)</li> </ul> <p>No parameter.</p>"},{"location":"COMMANDS/#37-address-answer-answer-to-36","title":"37: Address Answer (Answer to 36)","text":"<ul> <li>Command ID: 0x37 (1 byte)</li> <li>Address (3 bytes)</li> </ul>"},{"location":"COMMANDS/#38-launch-key-transfer","title":"38: Launch Key Transfer","text":"<ul> <li>Command ID: 0x38 (1 byte)</li> <li>Challenge (6 bytes)</li> </ul>"},{"location":"COMMANDS/#39-remove-1w-controller","title":"39: Remove 1W Controller","text":"<ul> <li>Command ID: 0x39 (1 byte)</li> <li>??: (1 byte): 0x00 observed</li> </ul>"},{"location":"COMMANDS/#3c-challenge-request","title":"3C: Challenge Request","text":"<ul> <li>Command ID: 0x3c (1 byte)</li> <li> <p>Challenge data (6 bytes)</p> </li> <li> <p>Example</p> </li> <li><code>3C 4D3E778460F1</code></li> <li>Command ID=0x3c, challenge=4d3e778460f1</li> </ul>"},{"location":"COMMANDS/#3d-challenge-response","title":"3D: Challenge Response","text":"<ul> <li>Command ID: 0x3d (1 byte)</li> <li> <p>Response data (6 bytes)</p> </li> <li> <p>Example</p> </li> <li><code>3D 3EF8C09565F4</code></li> <li>Command ID=0x3d, response=3EF8C09565F4</li> </ul>"},{"location":"COMMANDS/#46-script-registerupload","title":"46: Script: Register/Upload","text":"<ul> <li>Command ID: 0x46 (1 byte)</li> <li>Config Data (9 bytes)</li> </ul>"},{"location":"COMMANDS/#47-download-config-answer-to-46","title":"47: Download Config (Answer to 46)","text":"<ul> <li>Command ID: 0x47 (1 byte)</li> <li>Config (5 bytes)</li> </ul>"},{"location":"COMMANDS/#48-file-upload-to-running","title":"48: File: Upload to \"Running\"(?)","text":"<ul> <li>Command ID: 0x48 (1 byte)</li> <li>Data? (9 bytes)</li> </ul> <p>![NOTE] Not authenticated?</p>"},{"location":"COMMANDS/#49-file-upload-to-running-ack-to-48","title":"49: File: Upload to \"Running\"(?) (ACK to 48)","text":"<ul> <li>Command ID: 0x49 (1 byte)</li> <li>File Name Pointer (4 bytes)</li> </ul> <p>![NOTE] Not authenticated?</p>"},{"location":"COMMANDS/#4a-delete-file-large-data-transfer-request-ioblob","title":"4A: Delete File (Large Data Transfer Request? (\"ioblob\"))","text":"<ul> <li>Command ID: 0x4a (1 byte)</li> <li>File Name = Data (3-13 bytes)</li> </ul>"},{"location":"COMMANDS/#4b-file-info-large-data-answer","title":"4B: File Info (Large Data Answer?)","text":"<ul> <li>Command ID: 0x4b (1 byte)</li> <li>?? (1 byte)</li> <li>Sequence number of data (1 byte)</li> <li>Data (1-18 bytes)</li> </ul> <p>![NOTE] This command is chained to send large numbers of bytes. Maybe used for updates?</p>"},{"location":"COMMANDS/#4a-rename-file","title":"4A: Rename File","text":"<ul> <li>Command ID: 0x4B (1 byte)</li> <li>File Name = Data (3-13 bytes)</li> </ul>"},{"location":"COMMANDS/#50-get-name","title":"50: Get Name","text":"<ul> <li>Command ID: 0x50 (1 byte)</li> <li>Example</li> <li>2W S 1 E 0       FROM 842E3      TO DA2EE6       CMD 50  DATA(0)</li> </ul> <p>![NOTE] No Parameter. Not Authenticated.</p>"},{"location":"COMMANDS/#51-get-name-answer","title":"51: Get Name Answer","text":"<ul> <li>Command ID: 0x51 (1 byte)</li> <li>Name (16 bytes ASCII)</li> </ul> <p>![NOTE] Not authenticated.</p>"},{"location":"COMMANDS/#52-write-name","title":"52: Write Name","text":"<ul> <li>Command ID: 0x52 (1 byte)</li> <li> <p>Data: ASCII String (16 bytes)</p> </li> <li> <p>Example</p> </li> <li><code>52 54657374000000000000000000000000</code></li> </ul> <p>Command ID=0x52, Data=\"Test\"</p>"},{"location":"COMMANDS/#53-write-name-ack","title":"53: Write Name Ack","text":"<ul> <li>Command ID: 0x53 (1 byte)</li> </ul> <p>No parameter.</p>"},{"location":"COMMANDS/#54-get-general-info-1","title":"54: Get General Info 1","text":"<ul> <li>Command ID: 0x54 (1 byte)</li> </ul>"},{"location":"COMMANDS/#55-general-info-1-answer","title":"55: General Info 1 Answer","text":"<ul> <li>Command ID: 0x55 (1 byte)</li> <li>Value (14 bytes)</li> </ul> <p>![TIP] See General Info 1 for decoding</p>"},{"location":"COMMANDS/#56-get-general-info-2","title":"56: Get General Info 2","text":"<ul> <li>Command ID: 0x56 (1 byte)</li> </ul>"},{"location":"COMMANDS/#57-general-info-2-answer","title":"57: General Info 2 Answer","text":"<ul> <li>Command ID: 0x57 (1 byte)</li> <li>Value (16 bytes)</li> </ul> <p>![TIP] See General Info 2 for decoding</p>"},{"location":"COMMANDS/#e0-bootloader-command-proxy-frame","title":"E0: Bootloader Command (\"Proxy Frame\")","text":"<ul> <li>TBD</li> </ul>"},{"location":"COMMANDS/#e1-bootloader-device-bootloader-ack","title":"E1: Bootloader Device / Bootloader ACK","text":"<ul> <li>TBD</li> </ul>"},{"location":"COMMANDS/#fx-service-commands","title":"Fx: Service Commands","text":""},{"location":"COMMANDS/#f0-send-raw-message-find-hardware-service","title":"F0: Send Raw Message / Find Hardware (\"Service\")","text":"<ul> <li>Command ID: 0xF0 (1 byte)</li> <li>Parameter 1 (1 byte)</li> <li>Parameter 2 (1 byte)</li> </ul>"},{"location":"COMMANDS/#f1-actuator-read-groups-actuatoranyconfigislocal-service-ack","title":"F1: Actuator: Read Groups / \"ActuatorAnyConfigIsLocal\" (?) / \"Service ACK\"","text":"<ul> <li>Command ID: 0xF1 (1 byte)</li> <li>Parameter 1 (1 byte)</li> <li>Parameter 2 (1 byte)</li> </ul>"},{"location":"COMMANDS/#f2-reboot-service-status","title":"F2: Reboot / Service Status","text":"<ul> <li>Command ID: 0xF2 (1 byte)</li> <li>Parameter 1 (1 byte)</li> <li>Parameter 2 (1 byte)</li> </ul>"},{"location":"COMMANDS/#f3-service-status-ack","title":"F3: Service Status ACK","text":"<ul> <li>TBD</li> </ul>"},{"location":"COMMANDS/#fe-unknown","title":"FE: Unknown","text":"<ul> <li>Command ID: 0xFE (1 byte)</li> <li> <p>?? (1 byte)</p> </li> <li> <p>Example</p> </li> <li><code>11:14:41.320 &gt; 2W S 0 E 1       FROM 0xBox      TO 0xDevice       CMD FE  DATA(1)08</code></li> </ul> <p>![NOTE] Some kind of Confirmation? I would assume a NACK + ErrorCode</p> <p>When DATA == 0x05, then this is NOERROR, when answering to CMD 0x19</p> <ul> <li>Example</li> <li><code>11:14:41.320 &gt; 2W S 0 E 1       FROM 842E3      TO D58341       CMD FE  DATA(1)08</code></li> <li><code>05</code> is NO ERROR</li> </ul>"},{"location":"COMMANDS/#ff-unknown","title":"FF: Unknown","text":"<ul> <li>TBD</li> </ul>"},{"location":"LinkLayer/","title":"LinkLayer","text":""},{"location":"LinkLayer/#io-homecontrol-link-layer-specification","title":"io-homecontrol Link Layer Specification","text":"<p>There are at least two known protocols: - io homecontrol 1W - io homecontrol 2W</p> Baud Rate 4800 bps Data Bits 8 Parity Odd Start Bit Logical Level 0 Stop Bit Logical Level 1 Character coding NRZ <p>Settings: - Bitrate: 38400 bauds (baud/sec) = 38400 bits/s   - Real Bitrate: 38400,9600 Bit/s (Bit/sec)   - Bitrate Error: 1,0410 ppm   - Step Bitrate(?): 26666</p> <p>2FSK knows is binary which means it knows two states and tells us that the bit rate is equal the symbol rate: 1 bit (rate) = 1 symbol/modulation rate. symbol rate = n baud (bd) = n symbols per second symbol rate = pulse rate = pulses per second</p> <p>note Captured frames should be stored as CSV/TSV files with the following header:</p> Text Only<pre><code>MSG\n</code></pre> Text Only<pre><code>\n</code></pre> <ul> <li>Modes of Operation: 3 * 2 (Each Mode can be Low Power)</li> <li>Master</li> <li>Slave</li> <li>Beacon (Repeater)</li> <li>3 Layer</li> <li>Layer 1: RF Transmission - Bit Representation<ul> <li>UART Encoded</li> <li>38.400 bps</li> <li>26us Symbolrate</li> <li>Repeated Key Duration: Frame is sent every 140 milliseconds</li> </ul> </li> <li>Layer 2: Frame (Data Link)<ul> <li>Preamble: 256 bit of alternating 1&gt;0&gt;1&gt;0 ...</li> <li>SyncWord / Start Byte</li> <li>PACKET</li> <li>CRC</li> </ul> </li> <li>Layer 3: Packet (Network):<ul> <li>Header</li> <li>Address</li> <li>Payload</li> <li>Rolling Code</li> <li>HMAC</li> </ul> </li> </ul> <p>time lag between two successive activations: 200 ms</p>"},{"location":"LinkLayer/#protocol-frame","title":"Protocol Frame","text":"<p>IoSerialNumber: 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF</p> <p>This is the standard io-homecontrol frame (byte positions in the header).</p> <ul> <li>Minimum Length = 11 bytes (i.e. without any DATA)</li> <li>Maximum Length = 32 bytes (i.e. maximum 21 bytes of DATA)</li> </ul> <p>From the decompilation:   NodeAddress   : 0x0000   Header/CMD    : 0x0000   ManufacturerId: 0x00   PrivateCmd:     0x00</p> <p>OWS: Handles talking to Overkiz Cloud</p> <p><code>apps\\var\\lib\\io-homecontrol\\lua-storage\\io\\stack&amp;646575</code></p> Bash<pre><code>address=646575,\n   type=065476,\nmanufacturer=2,\nStackKey=E9 94 BA CF E6 BE D7 66 76 30 EA E4 75 BA AE 95\n</code></pre> <p>34C3466ED88F4E8E16AA473949884373</p> <p>Ctrl + S</p> <p>\u2015\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014</p> YAML<pre><code>[\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014 P A C K E T \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014]\n                 [\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014 F R A M E \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014]\n [PREAMBLE] [SFD] [HEADER] [TYPE] [PAYLOAD] [CRC] [POSTAMBLE] [InterFrameGap]\n                                              [    D A T A    ] [ENUM] [   H M A C  ] [ F C S ]\n\n[55....55  FF33] [F6 00 00003F 708758] [ 00 ] [01 61 D200 00 00 [3BD2] [E6B62CEF54C8] [ A9 37 ]\n PREAMBLE  SYNC   MT LP SRCADR DSTADR CM MAIN F1 F2 ENUM MACMACMACMAC CODE\n\n Bit Sequence = Preamble + Sync Word (SFD): Follows Long PPDU Format (128 bits Preamble/Sync + 16 bits SFD/Sync Word)\n Preamble = Used for Synchronisation\n SFD = Start Frame Delimiter: Indicates Start of Frame\n FCS = Frame Check Sequence: CRC16-KERMIT over HEADER+TYPE+PAYLOAD\n</code></pre> <ul> <li>Media Layers:</li> <li>Bits: Physical (Signal and Binary Transmission)</li> <li>Frames: Data Link (MAC = Physical Addressing)</li> <li>Packets: Network (IP = Path and Addressing)</li> </ul> NAME Preamble Sync Word Header Payload CRC Postamble SIZE 52 Byte 2 Byte 1 Byte 1 Byte 3 Byte 3 Byte TYPE 0-1-0 FM UART UART 1 Byte 3 Byte 3 Byte 55 FF 33 00 00 00:00:00 00:00:00 Name Preamble SyncWord ControlByte0 ControlByte1 DestinationNodeID SourceNodeID Data CRC Byte 0 1 2 - 4 5 - 7 9 - n (n-1)-n <ul> <li>Preamble</li> <li>Sync Word = Network ID (= Frame Type?)</li> </ul> <p>CtrlByteManufCode FrameType Command Data DataLen isOneWay</p>"},{"location":"LinkLayer/#header-frame-control-bytes","title":"Header &gt; Frame Control Bytes","text":"Behavior Bit 1 Bit 0 Single Command 0 0 Next Command to Execute in Series 0 1 Next Command to Execute in Parallel 1 0 End of Group of Commands 1 1 Instruction Bit 2 Bit 1 Bit 0 End of macro-program 0 0 0 Immediate Execution 0 0 1 Parallel Execution &amp; Function AND 0 1 0 Parallel Execution &amp; Function OR 0 1 1 Parallel Execution &amp; Function NO AND 1 0 0 Test 1 0 1 Skip 1 1 0 Time Delay 1 1 1 <p>FrameType Segment: Same 3bit + 5bit Format could also be used for CommandIDs, Parameter, etc. - 3bit (SegmentType) + 5bit (SegmentData) - 3bit (SegmentType) + 5bit (SegmentLength)</p> <p>0b000 = 0 = \"UNKNOWN\" 0b001 = 1 = \"ACTUATOR\" isOneWay 0b010 = 2 = \"SENSOR\" 0b011 = 3 = \"VIDEO_SYSTEM\" isOneWay 0b100 = 4 = \"REMOTE_CONTROLLER\" 0b101 = 5 = \"PROTOCOL_GATEWAY\" isOneWay 0b110 = 6 = \"INFRASTRUCTURE_COMPONENT\" 0b111 = 7 = \"GROUP\" isOneWay</p> <ul> <li>First 3bit define the Session Information or <code>FrameType</code></li> <li>FrameTypes:<ul> <li>1: 000 FrameType_Identification</li> <li>2: 001 FrameType_Parameter</li> <li>3: 010 FrameType_ParameterValue / Transaction</li> <li>4: 011 FrameType_Unknown / Action</li> <li>5: 100 TypeOfSegment</li> <li>6: 101 TypeOfSegment</li> <li>7: 110 TypeOfSegment</li> <li>8: 111 TypeOfSegment</li> </ul> </li> <li>Example for Session Information: Indicate button press/released event</li> <li>Button Press Threshold: 140ms</li> <li>NOTE: see US7852765B2</li> </ul>"},{"location":"LinkLayer/#control-byte-1","title":"Control Byte 1","text":"<p>Basic Frame information.</p> BIT 7-6 5 4-0 NAME Order Mode Size <ul> <li><code>Order</code>: Indicate Relationship (Logical and/or Temporal) between transmitted Orders.</li> </ul> # bit<code>[7]</code> bit<code>[6]</code> Command Order Relationship(First/Last Frame in Session) 0 0 0 Single            = Last/First Session Frame:  No/No 1 0 1 Next in Series    = Last/First Session Frame:  No/Yes 2 1 0 Next in Parallel  = Last/First Session Frame: Yes/No 3 1 1 Command Group End = Last/First Session Frame: Yes/Yes <ul> <li>[5] MODE <code>isOneWay</code>: Protocol Mode/Version</li> <li>0 = 2W = Two Way</li> <li> <p>1 = 1W = One Way</p> </li> <li> <p>Size: Frame Length in bytes, not including <code>Control Byte 1</code> and the <code>CRC</code></p> </li> </ul>"},{"location":"LinkLayer/#control-byte-2","title":"Control Byte 2","text":"<p>Extended Frame Information.</p> BIT 7 6 5 4 3 2 1-0 NAME Use Beacon Routed Low Power Mode Ack ? ? Protocol Version <p>FrameData Segment 7:3 = 32 codes of the signs or characters specifying the transaction or the action</p> <ul> <li>Use Beacon (<code>isBeacon</code>): Repeater Mode = Allow routing the Frame through the Network</li> <li>0: Do Not use Beacon</li> <li>1: Use Beacon</li> <li>Note: Max. 1 Hop!</li> <li>Routed (<code>isRouted</code>): Indicates if Frame has already been routed through a Beacon (Repeater)</li> <li>0 frame has not been routed</li> <li>1 frame has been routed</li> <li>Low Power Mode (<code>PowerSaveMode</code>): Indicates if Frame is sent to Device in Low Power Mode (LPM):</li> <li>0 = Destination Device is not in Low Power Mode</li> <li>1 = Destination Device is in Low Power Mode</li> <li>Ack indicates if a response can be handled (2 Way Devices Only)</li> <li>0 = NACK: 1-Way Device</li> <li> <p>1 = ACK: 2-Way Device</p> </li> <li> <p>io-Membership Flag</p> </li> <li>RF Support in Node</li> <li>CtrlByteManufCode</li> </ul>"},{"location":"LinkLayer/#addresses-nodeid","title":"Addresses (NodeId)","text":"<p>Addresses are 3 bytes long and can range from <code>01 00 00</code> to <code>ff ff ff</code>.</p> <p>Addresses are also refered to as Node ID which resembles the MS-B of a typical MAC-Address. The Node Type is a numerical value defines which</p>"},{"location":"LinkLayer/#destination-address","title":"Destination Address","text":"<ul> <li><code>00 00 3F</code> is broadcast</li> <li><code>00 00 3B</code> ??</li> <li><code>00 00 00</code> = Group</li> <li><code>FF FF FF</code> = Broadcast</li> </ul>"},{"location":"LinkLayer/#source-sender-address","title":"Source (Sender) Address","text":"<ul> <li><code>FFFFFE</code> = SRC for P2P and BROADCAST</li> <li><code>FFFDFF</code> = RS485 (SDN) Setting Tool</li> </ul>"},{"location":"LinkLayer/#commandparameter","title":"CommandParameter","text":"<p>See Commands for command id reference.</p>"},{"location":"LinkLayer/#commandparameter-types","title":"CommandParameter Types","text":"<p>There exist different types of Parameter:</p> <ul> <li>Main</li> <li>Functional</li> <li>Private</li> <li>Stimuli<ul> <li>Somfy Key &amp; Go 1w</li> <li>Somfy Satellite 1w</li> </ul> </li> </ul>"},{"location":"LinkLayer/#data","title":"Data","text":"<ul> <li>Length</li> <li>Minimum =  0 bytes (no DATA)</li> <li>Maximum = 21 bytes</li> </ul> <p>Depending on the frame type it can correspond to raw data, io-homecontrol command parameters or manufacturer-specific data.</p> <p>Note that in authenticated 1-Way frames, a 2-bytes sequence number and a 6-byte long message authentication code are appended:</p> X - Y (Y + 1) - (Y + 2) (Y + 3) - (Y + 9) Data Sequence number MAC"},{"location":"LinkLayer/#crc","title":"CRC","text":"<p>After the payload, there is a 16-bit CRC with polynomial 0x(1)8408 over the data packet (i.e. length byte + payload). The CRC's initial value is 0 and it does not employ an XOR/NOT. The least significant byte of the CRC is transmitted first.</p> <p>The C# implementation shown here can be found in the Starter Kit software from Semtech for their SX12xx line of radios. Just use a .NET decompiler (dotPeek, ILSpy, etc.) and search for it:</p> C#<pre><code>// This is real code that changes the packet and returns 0 ... i have no clue why they implemented this\nushort ComputeCrc(byte[] packet){\nfor (int i = 0; i &lt; packet.Length; i++) {\n  packet[i]=(byte)((packet[i] * 0x802 &amp; 0x22110 | packet[i] * 0x8020 &amp; 0x88440) * 0x10101 &gt;&gt; 0x10);\n}\nreturn 0;\n</code></pre>"},{"location":"LinkLayer/#system-stack-key","title":"System (Stack) Key","text":"<p>Each two-ways controller has a stack or system key. This is an AES-128 key used to sign io frames with the trailing MAC.</p> <p>Advanced Encryption Standard (AES) 128-bit block encryption/decryption with 128 bits key size. Electronic Code Book (ECB) and Cipher Block Chaining Mode 1 (CBC Mode 1) are supported. The AES engine is enabled on the ADF7023 by downloading the AES software module to program RAM.</p> <p>The key generation on Kizboxes is insecure because it relies on the lua math.random :</p> Lua<pre><code>-- seed\nkizbox_id = \"xxxx-xxxx-xxxx\" -- Kizbox serial\nmath.randomseed(tonumber(string.gsub(\"1\" .. kizbox_id, \"-\", \"\")) - os.time())\n-- key generation\nkey = {}\nkeySize = 16 -- 128 bits\nfor i = 1, keySize do\n    key[i] = math.random(0, 255)\nend\n</code></pre> <p>This mechanism only leaves roughly 31,536,000 keys possible if the serial number of the TaHoma and the year of setup are known (other calls to math.random are made so the actual number may be a bit above this figure but once the seed and the number of times math.random is called are figured out by an attacker, they can completly determine the key).</p>"},{"location":"LinkLayer/#discovery","title":"Discovery","text":"<p>There are several discover types:</p> <ul> <li>Discover Sensor</li> <li>Discover Sensor Simple</li> <li>Discover Sensor Simple IO</li> <li>Discover Sensor Generic</li> <li>Discover Sensor Generic Pulse Sensor</li> <li>Discover Actuator</li> <li>Discover Actuator Simple</li> <li>Discover Actuator Simple with Wink</li> <li>Discover Actuator OVP</li> <li>Discover Actuator 1W</li> <li>Discover Actuator In System</li> <li>Discover Actuator Without Setup (\"Virgin\")</li> <li>Discover</li> <li>Discover Simple</li> <li>Discover Controller</li> <li>Discover Controller 1W</li> <li>Discover Intermediate</li> <li>Discover Private Somfy</li> </ul>"},{"location":"LinkLayer/#one-way-discovery","title":"One Way Discovery","text":"<pre><code>sequenceDiagram\n    participant 1W as Remote\n    participant 2W as Actuator\n    Note over 1W,2W: 1-Way Discovery\n    1W-&gt;&gt;2W: Command ID: 0x39&lt;br/&gt;Remove 1-Way Remote\n    activate 2W\n    loop 0x39\n        2W-&gt;&gt;2W: Remove&lt;br/&gt;1-Way Key\n    end\n    deactivate 2W\n    1W--&gt;&gt;2W: Command ID: 0x30&lt;br/&gt;Send Encrypted 1-Way Key\n    activate 2W\n    loop 0x30\n        2W-&gt;&gt;2W: Store&lt;br/&gt;1-Way Key\n    end\n    deactivate 2W</code></pre> <p>In 1-way mode, the controller does not get any answer. So this is the simplest discovery mode, it asks for exclusion using 0x39 and then sends its 1-W encrypted key using 0x30.</p>"},{"location":"LinkLayer/#two-way-discovery-simple-discover","title":"Two Way Discovery: Simple Discover","text":"<p>Actions:</p> <ul> <li>Controller sends command 0x28 (discover) when entering discover mode</li> <li>Device in pairing mode answers with command 0x29 (discover answer) and gives metadata to identify itself to the controller</li> <li>Controller confirms having received discovery information from device</li> <li>Devices acks confirmation</li> </ul> <p>YAML<pre><code># Discover request\nC8 00 00003B F00F00 28 1234\n# Discover answer: node type REMOTE_CONTROLLER, subtype 0, node address feefee, manufacturer Atlantic\n# multi info byte 0xcc, timestamp 0000\nD1 00 F00F00 FEEFEE 29 FFC0 FEEFEE 0C CC 0000 1234\n# Discover confirmation\n48 00 FEEFEE F00F00 2C 1234\n## Discover confirmation ack\n88 00 F00F00 FEEFEE 2D 1234\n</code></pre> Must send a 0x38 key transfer, just after the 0x2d discover confirmation ack to effectivly have the device added Text Only<pre><code>// Controller ask for key transfer using challenge 123456789ABC\n4E 04 FEEFEE F00F00 38 123456789ABC 23B6\n</code></pre></p>"},{"location":"LinkLayer/#2-way-specialized-discover","title":"2-way: Specialized Discover","text":"<p>Actions:</p> <ul> <li>Controller sends command 0x2a (specialized discover) with specific data not identified to this day</li> <li>Device in pairing mode answers with 0x2b and same information fields as in 0x29</li> <li>Controller and device exchange 0x2c and 0x2d just like in the general discover</li> <li>Controller sends command 0x36, authenticates and expects an address in 0x37 answer (see 2-way key exchange push below)</li> </ul>"},{"location":"LinkLayer/#pairing-and-authentication","title":"Pairing and Authentication","text":"<p>Before being able to communicate with authentication, io-homecontrol nodes must share a common secret as the security of the protocol relies on a symmetric encryption algorithm.</p> <p>The pairing process consists in transmitting the key. Authentication in adding and verifying challenges.</p> <p>In both modes (1-way/2-ways), the transferred key is obfuscated using different methods. But both methods imply a shared key probably specified in the protocol documentation. This key is refferred to as transfer key and has the following value, probably hardcoded in the specification:</p> <ul> <li><code>34C3466ED88F4E8E16AA473949884373</code> - As a UUID: <code>34C3466E-D88F-4E8E-16AA-47:39:49:88:43:73</code></li> </ul> <p>Other Keys found in the io Gateway: - <code>SDNP io Actuator 1W Control Key = FD534F4D4659</code> = <code>0xFD SOMFY</code> - <code>4275696C64696E6720436F6E74726F6C</code> = <code>Building Control</code></p> <p>Note: All Crypto functions are available in ioCrypto.py</p>"},{"location":"LinkLayer/#initial-vector-iv-and-aes-128-encryption","title":"Initial Vector (IV) and AES-128 Encryption","text":"<p>In all cases implying encryption, an Initial Vector (IV) is required to feed the AES algorithm using a mode similar to OFB or CFB. In fact, as all payloads are 128-bit long, there is no block chaining and the encryption process is the following:</p> <ol> <li>Generate IV</li> <li>Encrypt IV with Transfer or System Key (depending on data) using AES-128</li> <li> <p>XOR encrypted IV with the Secret for Transmission</p> </li> <li> <p>How To Generate IV:   | Mode  | 0-7                    | 8-9             | 10-11                       | 12-15          |   | :-------: | :--------------------: | :-------------: | :-------------------------: | :------------: |   | 1-Way | First 8 byte of Payload | Checksum | Sequence Number             | Padding (0x55) |   | 2-Way | First 8 byte of Payload | Checksum | Challenge (sent beforehand) |                |</p> </li> <li> <p>Pad Payload if less than 8 byte with 0x55</p> </li> <li>Compute Checksum for each Frame byte:     Python<pre><code># Checksum Return Value: 2 byte Tuple (byte 0 &amp; byte 1)\n# Initialization Value for both bytes: 0\ndef computeChecksum(frame_byte, chksum1, chksum2):\n  tmpchksum = frame_byte ^ chksum2\n  chksum2 = ((chksum1 &amp; 0x7f) &lt;&lt; 1) &amp; 0xff\n  if chksum1 &amp; 0x80 == 0:\n    if tmpchksum &gt;= 128:\n      chksum2 |= 1\n    return (chksum2, (tmpchksum &lt;&lt; 1) &amp; 0xff)\n  if tmpchksum &gt;= 128:\n    chksum2 |= 1\n\n  return (chksum2 ^ 0x55, ((tmpchksum &lt;&lt; 1) ^ 0x5b) &amp; 0xff)\n</code></pre>     &gt; note Check the initial value generation function for better understanding on how to use the checksum function.</li> </ol>"},{"location":"LinkLayer/#example","title":"Example","text":"<ul> <li>Frame: <code>F6 00 00003F 385762 000143D2000000 0599 123456789ABC 5FB0</code></li> <li>Payload: <code>000143D2000000</code> (7 byte =&gt; needs 1 byte padding with 0x55)</li> <li>Sequence Number: <code>0599</code></li> </ul> <p>Padded Payload: <code>000143D200000055</code> IV will be: <code>000143D2000000550500059955555555</code></p> <p>In 2-way Mode, for the following exchange:</p> <p>Ask Challenge: <code>480012195FD35C18 31 28E3</code></p> <p>Challenge Request: <code>0E00D35C1812195F 3C 123456789ABC A9C7</code> </p> <p>The IV will be: <code>31555555555555550062123456789ABC</code></p> <p>Encryption with AES-128 follows the below process:</p> <ul> <li>IV is generated as described above</li> <li>IV is encrypted using AES-128 and depending on the use case with either:</li> <li>Transfer Key</li> <li>Stack Key</li> <li>If encrypting a Secret: The Secret is XORed with the Output of the previous Step.</li> <li>If creating a MAC: The output of the previous Step is truncated to 6 bytes.</li> </ul>"},{"location":"LinkLayer/#key-exchange","title":"Key Exchange","text":""},{"location":"LinkLayer/#1-way-key-exchange","title":"1-Way Key Exchange","text":"<p>In 1-way mode, the controller will send several times the command 0x30 with its key encrypted with the transfer key listed above and an initial value that consists in its address repeated several times to build a 16-byte long value.</p> <p>For node with address <code>abcdef</code>, the initial value will be:</p> Text Only<pre><code>ABCDEFABCDEFABCDEFABCDEFABCDEFAB\n</code></pre> <p>Furthermore, the 0x30 message is authenticated using a 1-way MAC embedded in the command itself. For the node <code>abcdef</code> with key <code>01020304050607080910111213141516</code> and sequence number 0x1234 the 0x30 message will be:</p> Text Only<pre><code>FC 00 00003F ABCDEF 30 7E60491F976ADF653DB0ED785E49A201 02 01 1234 19E81EC43D5E 9BF2\n</code></pre>"},{"location":"LinkLayer/#2-way-key-exchange","title":"2-Way Key Exchange","text":"<p>Note: in examples below, the stack key used is <code>01020304050607080910111213141516</code></p> <p>In 2-Way mode, there are 2 ways keys can be exchanged: * By pulling the key from a remote node * By pushing a key to a remote node</p> <p>It seems that when a new device is added to a stack, both methods are used. First, the controller will collect the already set device key and then use it to authenticate requests to push its stack key to the device.</p>"},{"location":"LinkLayer/#pull","title":"Pull","text":"<p>Actions:</p> <ul> <li>Right after initial discovery, the controller issues command 0x38 (launch key transfer). This command is not authenticated but submits a 6-byte long initial value to be used to encrypt the key used by the device</li> <li>The device answers with command 0x32 (key transfer) and sends its key encrypted using the transfer key</li> <li>The controller issues a command 0x3c (challenge request) to authenticate the previous command</li> <li>The device answers to the challenge with command 0x3d and a response encrypted using the key transmitted just before in command 0x32</li> </ul> <p>Example (device key is <code>ABCDEF01020304050607080910111213</code>):</p> Text Only<pre><code>// Controller ask for key transfer using challenge 123456789ABC\n4E 04 FEEFEE F00F00 38 123456789ABC 23B6\n// Device creates an initial value based on last frame and the specified challenge\n// and use this initial value to encrypt its key before transmission\n18 04 F00F00 FEEFEE 32 EA425A7A182885D4EAEEFD416D625E01 6379\n// Controller challenges the device for command 0x32 (see authentication below)\n// Note: in real life, challenge will be different to the one specified in 0x38\n0E 00 FEEFEE F00F00 3C 123456789ABC 5EB1\n4E 00 FEEFEE F00F00 3C 123456789ABC EC2A\n// Device creates an initial value based on the 0x32 frame and challenge specified in 0x3c\n// It will use its own key to authenticate as it has not received one from the controller\n8E 00 F00F00 FEEFEE 3D 0AE519A73C99 2400\n</code></pre>"},{"location":"LinkLayer/#push","title":"Push","text":"<p>Note: stack key push to device has been observed after a bit of information exchange such as general information (0x54 and 0x56). Most of these commands are authenticated using 0x3c and 0x3d (see authentication below) and so are the push commands.</p> <p>Actions: * First, the controller asks the device a challenge using command 0x31 (ask challenge) * The device then answers using command 0x3c (challenge request) and a 6-byte long challenge * The controller sends the encrypted stack key to the device node with command 0x32 (key transfer) using the transfer key * The device asks the controller for authentication using 0x3c * The controller authenticates using its stack key (not the device key anymore) and command 0x3d * The device answers with command 0x33 to confirm that stack key has been received * To check if the stack key has properly been transferred, the controller sends the 0x36 command and authenticate to finally receive the address of the device in the 0x37 command</p> <p>Example:</p> Text Only<pre><code>// Send challenge request\n48 00 feefee f00f00 31 fb60\n// Challenge request\n0e 00 f00f00 feefee 3c 123456789abc 19db\n// Controller creates an initial value based on last frame and the specified challenge\n// and use this initial value to encrypt the stack key before transmission\n18 00 f00f00 feefee 32 102e49a16d3b69726f3192cf17534ad9 8043\n// Device challenges the controller for command 0x32 (see authentication below)\n// Note: in real life, challenge will be different to the one specified in previous 0x3c\n0e 00 f00f00 feefee 3c 123456789abc 19db\n// Controller answers to the challenge using the stack key\n0e 00 feefee f00f00 3d 8dc9d40dc7a4 f9e5\n// Device saves the stack key and sends a confirmation\n88 00 f00f00 feefee 33 5bfb\n// Controller checks if the device received the stack key by issuing a control command\n48 04 feefee f00f00 36 9a02\n// Device sends a challenge to the controller\n0e 00 f00f00 feefee 3c 123456789abc 19db\n// Controller answers the challenge for command 0x36\n0e 04 feefee f00f00 3d c7fdc0668818 b1e3\n// Device sends its address as answer in 0x37\n0b 04 f00f00 feefee 37 feefee 7ccf\n</code></pre>"},{"location":"LinkLayer/#authentication","title":"Authentication","text":"<p>io-homecontrol frames are authenticated using AES-128 based MACs. There are differences between 1-way and 2-way modes. In both cases, the MAC is created by truncating the output of the AES-128 algorithm down to 6 bytes.</p>"},{"location":"LinkLayer/#1-way-authentication","title":"1-Way Authentication","text":"<p>In 1-way mode, a signature of the frame is made using the stack key burned into the 1-way controller during manufacturing. This signature is appended to the frame along with a sequence number to prevent replay attacks.</p> <p>The data and sequence number are handled separately in the initial vector generation (i.e. the sequence number is not handled as frame data and not taken into account in the first part of the IV).</p>"},{"location":"LinkLayer/#2-way-authentication","title":"2-Way Authentication","text":"<p>In 2-way mode, a node will issue a 0x3C command frame with a 6-byte long challenge to commands received from other nodes. The asking node must provide a 0x3D command with the answer to the 6-byte long challenge (the answer is also 6-byte long). 2-way frames do not have any MAC or sequence number incorporated in the frame itself.</p> <p>For example, here is a 2-way sequence of request/answer type:</p> Text Only<pre><code>// Send address request\n48 04 feefee f00f00 36 9a02\n// Challenge request\n0e 00 f00f00 feefee 3c 123456789abc 19db\n// Challenge answer\n0e 04 feefee f00f00 3d c7fdc0668818 b1e3\n// Address answer\n0b 04 f00f00 feefee 37 feefee 7ccf\n</code></pre> <p>Note: There is a race condition vulnerability. In fact, it would be possible to spoof answers by answering faster than the legitimate device after a 0x3d frame. This allows authentication of the asking node but not authentication of the answering node...</p> <p>The MAC is generated using a shared key between both nodes. This is referred as Stack Key in the firmware and System Key in the user interface. The same key is shared throughout the installation (by a 2-Way controller).</p> <p>Below is an extract of the MAC generation code:</p> Python<pre><code>def create_2W_hmac(challenge, system_key, frame_data):\n  iv = constructInitialValue(frame_data, challenge)\n  cipher = aes.AES(system_key)\n  return cipher.encrypt_block(iv)[:6]\n</code></pre> <p>The initial value is always created using data from the requesting command (see above for details on initial value generation).</p>"},{"location":"LinkLayer/#test-and-ems-frames","title":"Test and EMS Frames","text":""},{"location":"LinkLayer/#ems-frames","title":"EMS Frames","text":"<p>Sadly little is known about the EMS2 device and the protocol that is used in the factory to program io-homecontrol devices.</p> <p>EMS frames in binary, first 0 is D then frame in binary EMS_STOP_BECAUSE_SINE_WAVE_IS_MISSING</p>"},{"location":"LinkLayer/#calibration-data","title":"Calibration Data","text":"<p>io Tests Terminal:  <code>0E5EC4 0ECD0B 0F5AD4</code> ideal RF STM32 CAL: <code>0E4EC4 0EBD0B 0F4AD4000000</code> io-homecontrol CAL: <code>0E4EC4 0EBD0B 0F4AD4</code> (default)</p>"},{"location":"LinkLayer/#test-frames","title":"Test Frames","text":"<p>io Tests Terminal</p> <ul> <li>Template: <code>MP FP1 FP2 FP3 CKS</code></li> <li>MP: <code>02</code> + Command</li> <li>FP1 - FP3: <code>09</code> + Data<ul> <li>NOTE: It seems that only a maximum of 3 FPs is supported</li> </ul> </li> <li> <p>CKS: <code>03</code> + 2 Byte CRC</p> </li> <li> <p>Get HW Version: <code>02 474857 03 3539</code></p> </li> <li>CKS Error:      <code>02 475357 03 3431</code></li> <li> <p>Get SW Version: <code>02 475357 03 3432</code></p> </li> <li> <p>RFT TX=0 C=0: <code>02 524654 09 54583D30 09 433D30 03 3045</code></p> </li> <li>RFT TX=0 C=1: <code>02 524654 09 54583D30 09 433D31 03 3046</code></li> <li> <p>RFT TX=0 C=2: <code>02 524654 09 54583D30 09 433D32 03 3043</code></p> </li> <li> <p>RFT TX=1 Channel 1: <code>02 524654 09 54583D31 09 433D30 03 3046</code></p> </li> <li>RFT TX=1 Channel 2: <code>02 524654 09 54583D31 09 433D31 03 3045</code></li> <li> <p>RFT TX=1 Channel 3: <code>02 524654 09 54583D31 09 433D32 03 3044</code></p> </li> <li> <p>RFT TX=2 (Preamble) Channel 1:             <code>02 524654 09 54583D32 09 433D30       03 3043</code></p> </li> <li>RFT TX=2 (Preamble) Channel 2:             <code>02 524654 09 54583D32 09 433D31       03 3044</code></li> <li>RFT TX=2 (Preamble) Channel 3:             <code>02 524654 09 54583D32 09 433D32       03 3045</code></li> <li>RFT TX=2 (Preamble) Channel 1 Timed 1s/1s: <code>02 524654 09 54583D32 09 433D30 09 54 03 3531</code></li> <li>RFT TX=2 (Preamble) Channel 2 Timed 1s/1s: <code>02 524654 09 54583D32 09 433D31 09 54 03 3530</code></li> <li> <p>RFT TX=2 (Preamble) Channel 3 Timed 1s/1s: <code>02 524654 09 54583D32 09 433D32 09 54 03 3533</code></p> </li> <li> <p>RFT RX LBT  Channel 1: <code>02 524654 09 52583D30 09 433D30 03 3038</code></p> </li> <li>RFT RX LBT  Channel 2: <code>02 524654 09 52583D30 09 433D31 03 3039</code></li> <li>RFT RX LBT  Channel 3: <code>02 524654 09 52583D30 09 433D32 03 3041</code></li> <li>RFT RX Data Channel 1: <code>02 524654 09 52583D31 09 433D30 03 3039</code></li> <li>RFT RX Data Channel 2: <code>02 524654 09 52583D31 09 433D31 03 3038</code></li> <li> <p>RFT RX Data Channel 3: <code>02 524654 09 52583D31 09 433D32 03 3042</code></p> </li> <li> <p>RFT CAL Read:          <code>02 524654 09 43414C   09 5244   03 3139</code></p> </li> <li>RFT CAL Write <code>0E5EC4 0ECD0B 0F5AD4</code>:                          <code>02 524654 09 43414C 09 57523D 304535454334304543443042304635414434 03 3337</code></li> <li>RFT OFF:               <code>02 524654 09 4F4646 03 3037</code></li> <li>CMD unknown:           <code>02 575357           03 3532</code></li> </ul> <p>Manual Order</p> <p>Possible Cancidates: - CW - CCW</p> <ul> <li>Command ID: 02 = Manual Order</li> <li> <p>Command Parameter IDs:</p> <ul> <li>03 + 2 Byte: CKS = ChecKSum</li> <li>09 + n Byte: MP/FP ID</li> </ul> </li> <li> <p>Parameter IDs for Manual Order:</p> </li> <li>433D    C=  Channel=ChannelNumber (eg.: C=0)</li> <li>4341 4C CAL Calibrate Radio<ul> <li>Calibration Data: <code>FF FF FF FF FF FF FF FF FF</code></li> </ul> </li> <li>443D    D=</li> <li>4F46 46 OFF Switch Off</li> <li>523D    R=  Receive (??)</li> <li>5244    RD  Read</li> <li>5243 3D RC= Status</li> <li>5258 3D RX= Receive=ReceiveMode<ul> <li>0 = Listen Before Talk (LBT)</li> <li>1 = Receive Raw Data</li> </ul> </li> <li>54       T   Signal: Timed 1s/1s</li> <li>5458 3D TX= Transmit=TransmitMode (\"Permanent Emission\")<ul> <li>0 = Transmit Test Mode: 1</li> <li>1 = Transmit Test Mode: 2</li> <li>2 = Transmit Preamble (\"M55\") T=%1 T=M S=%1 S=D R=%1 P=1</li> </ul> </li> </ul> <p>M= LP= LS= AP= AS=</p> <p>TX= WR= RX= RD=</p> <p>SS= LP= LS= AP= AS=</p> <p>BSY GSW GHW BOM RFT NTK NGV NNB RSS FGT G2A S2A G2K S2K MOC MDV MDI MPA MUP WIN MGO MGS MGL AMK RCM MGN MSN MGD RAV GMA SMA D1C G1C R1C A1C G1K S1K M1P M1U M1G</p> <ul> <li>57523D WR= - WRite=Data</li> <li>413143 A1C - &gt; A1C, D1C, G1C, R1C</li> <li>414D4B AMK</li> <li>424F4D BOM</li> <li>425359 BSY - BuSY (???)</li> <li>443143 D1C - &gt; A1C, D1C, G1C, R1C</li> <li>445453 DTS - Data Transport Service</li> <li>464754 FGT</li> <li>473143 G1C - A1C, D1C, G1C, R1C</li> <li>47314B G1K - &lt;&gt; S1K</li> <li>473241 G2A - &lt;&gt; S2A</li> <li>47324B G2K - &lt;&gt; S2K</li> <li>474857 GHW - Get Hardware Version</li> <li>474D41 GMA - Get MA (???) &lt;&gt; SMA</li> <li>475357 GSW - Get Software Version</li> <li>4D3147 M1G - ???</li> <li>4D3150 M1P - ???</li> <li>4D3155 M1U - ???</li> <li>4D4449 MDI - ???</li> <li>4D4456 MDV - ???</li> <li>4D4744 MGD - ???</li> <li>4D474C MGL - ???</li> <li>4D474E MGN - ???</li> <li>4D474F MGO - ???</li> <li>4D4753 MGS - ???</li> <li>4D4F43 MOC - ???</li> <li>4D5041 MPA - ???</li> <li>4D534E MSN - ???</li> <li>4D5550 MUP - ???</li> <li>4E4756 NGV</li> <li>4E4E42 NNB</li> <li>4E544B NTK</li> <li>523143 R1C - &gt; A1C, D1C, G1C, R1C</li> <li>524156 RAV</li> <li>52434D RCM - Receive Config Mode</li> <li>524654 RFT - Radio (RF) Test</li> <li>525353 RSS - Read Signed Raw Value</li> <li>53314B S1K - &lt;&gt; G1K</li> <li>533241 S2A - &lt;&gt; G2A</li> <li>53324B S2K - &lt;&gt; G2K</li> <li>534D41 SMA - Set MA (???) &lt;&gt; GMA</li> <li>57494E WIN - Wink (???)</li> <li>575357 WSW - Write Signed Raw Value (???) &gt; HSW? ,1W= ,2W= ,act= ,actuator= ,add= ,address= afunc,act= afunc,grp= ,afunc_ack= ,astate_ack= ,chan= ,cmd= ,cmd=reset, ,cmd=receiveconfigmode= ,cmd=set,autoslavemode= ,configmode= ,slavemode= ,iomode= ,fp1= ,fp2= ,fp3= ,key= ,len= ,max_discovered_nodes= ,max_paired_nodes= ,preamble, ,prot= ,req, ,req,slavemode, ,req,swversion, ,res= ,reset=startup, ,RF_busy, ,RF_ProtocolFatalError ,RSSI= ,sens= ,stack_dead, ,swversion= ,sys_id= ,tpos= ,reverse_ack= ,verify_ack ,version_ack= ,virgin_ack=</li> </ul> <p>actdata= add= busylevel= chan= grp= key=</p> <p>rem,grp=</p> <p>astate,act= delete,act= req_version,act= rev,act= verify,act= virgin_sfy,act= virgin,act= wink,act=</p> <p>actuator, add, all_add, delete_all, disc_ eof_full key, master, max_discovered_nodes, max_paired_nodes, nack</p> <p>nack_addr nack_appli_busy nack_auth nack_CRC nack_full nack_grp no_more rssi_off rssi_on</p> <p>noanswer only,actuator, pair,actuator, system,actuator, random, rssi, sens, set, sid, slave, test, virgin, wink_ack</p>"},{"location":"PARAMETER/","title":"IoHomecontrold -","text":"<p>This document is the entry point for understanding and navigating through the IoHc daemon (IoHomecontrold) files. To understand these files the tl;dr is:</p> <p>The backbone of the iohomeCTRL gateway (TaHoma, Cozytouch, etc.) is a LUAjit daemon receiving packets from the MCU responsible for parsing/sending the radio signal. The MCU can work on its own but more advanced functionality is handled with the help of this daemon. Other daemons also provide the local API many open source projects rely on.</p> <p>Since the daemons are written i LUAjit it is possible to decompile them. With this whole system comes a SQLite database with all devices and how to use them. Only one of the basic commands is really responsible for triggering device actions. Because of this the parameter list for this command is HUGE. Different datatypes, functions, device specifics, etc... everything is dealt with.</p>"},{"location":"PARAMETER/#folder-structure","title":"Folder Structure","text":"Text Only<pre><code>  .\n  \u251c\u2500\u2500 Internald            &lt;-- internal daemon\n  \u251c\u2500\u2500 IoHomecontrolOVPd    &lt;-- iohomeCTRL shared daemon (with OVP support)\n  \u251c\u2500\u2500 IoHomecontrold       &lt;-- iohomeCTRL daemon\n  \u251c\u2500\u2500 OVPd                 &lt;-- OVP daemon (only for reference. not needed)\n  \u2514\u2500\u2500 database             &lt;-- iohomeCTRL device database to be used as device lookup\n      \u2514\u2500\u2500 JSON             &lt;-- iohomeCTRL device database tables exported as JSON\n</code></pre> <p>Combined with the database and the firmware these sources are absolute essential when researching, undstanding and implementing devices.</p>"},{"location":"PARAMETER/#luajit","title":"LuaJIT","text":"<p>Normally each deamon resides in is it's own file with some additional support files.. The LUAjit inside is nested which means you need to first extract and then decompile it. Because of size restraints every module got it's own file. There is a LOT of stuff to cover.</p> <p>[!NOTE] There are not normally ~500 io-homecontrol files on a KizOS (TaHoma/Cozytouch/etc.) installation. But this was the best und easiest way to spread this information.</p> <ul> <li>io-homecontrold: The ioHome lua daemon</li> <li>Thi</li> <li>internald: The internal Overkiz daemon</li> <li>lib: The Overkiz library glueing it all together</li> </ul>"},{"location":"PARAMETER/#history","title":"History","text":"<p>After trying every LuaJIT decompiler out there i was happy with the files i had. They had at least some information in it.</p>"},{"location":"RADIO-CC1021/","title":"CC1021","text":"<p>// #include \"em_device.h\"</p>"},{"location":"RADIO-CC1021/#include","title":"include","text":""},{"location":"RADIO-CC1021/#include-ezradio_cmdh","title":"include \"ezradio_cmd.h\"","text":""},{"location":"RADIO-CC1021/#include-ezradio_proph","title":"include \"ezradio_prop.h\"","text":""},{"location":"RADIO-CC1021/#include-ezradio_api_libh","title":"include \"ezradio_api_lib.h\"","text":""},{"location":"RADIO-CC1021/#include-ezradio_api_lib_addh","title":"include \"ezradio_api_lib_add.h\"","text":""},{"location":"RADIO-CC1021/#include-ezradio_plugin_managerh","title":"include \"ezradio_plugin_manager.h\"","text":""},{"location":"RADIO-CC1021/#include-ezradio_commh","title":"include \"ezradio_comm.h\"","text":""},{"location":"RADIO-CC1021/#include-ezradio_halh","title":"include \"ezradio_hal.h\"","text":""},{"location":"RADIO-CC1021/#include-ezradio_transmit_pluginh","title":"include \"ezradio_transmit_plugin.h\" <p>ezradiodrv_config.h</p> <p>Maybe I can add some more info to io-homecontrol and I need some help to calculate frequency from CC1021 from a old velux KUX100. I use a logic analyzer to sniffing the SPI infomation between mcu and CC1021. I think there are 6 channels. 3 Rx and 3 Tx channels and each Rx channel is connected to each Tx channel. mcu/cc1021 scan every Rx channel for 2.7 ms if there is data on an Rx channel the mcu/cc1021 changes to predetermined Tx channel.</p>","text":""},{"location":"RADIO-CC1021/#init-cc1021","title":"Init CC1021","text":"<p>AA = Config Registers Addr | DD = Data | W/R = Write/Read to/from CC1021 Frequency register A is use for RX. Frequency register B is use for TX</p> Text Only<pre><code>AA DD W/R\n04 3A W Frequency register 2A - 8 MSB of frequency control word A\n08 3A W Frequency register 2B - 8 MSB of frequency control word B\n01 4F W Interface control register:\n  - 6 - Use separate pin for RX data output    = DIO is always input, and a separate pin is used for RX data output (synchronous mode: LOCK pin, asynchronous mode: DCLK pin).\n  - 3 - Use PA_EN pin to control external PA   = PA_EN pin is asserted when internal PA is turned on\n  - 2 - Use LNA_EN pin to control external LNA = LNA_EN pin is asserted when internal LNA is turned on\n  - 1 - Polarity of external PA control        = PA_EN pin is \u201c1\u201d when activating external PA\n  - 0 - Polarity of external LNA control       = LNA_EN pin is \u201c1\u201d when activating external LNA\n02 FF W Digital module reset: Reset everything\n03 8F W Automatic power-up sequencing control:\n  - 7 - Use PSEL pin to start sequencing: Negative transitions on the PSEL pin will start power-up sequencing\n  - 6:4-Waiting time from PLL enters lock until RX power up: Wait for approx. 32 ADC_CLK periods (26 \u03bcs)\n  - 3-0 - Waiting time for carrier sense from RX power up: Wait 72 FILTER_CLK periods before power down\n07 27 W Clock generation register A\n  -1:0-Modem clock divider 2 (A):Divide by 8 = MODEM_CLK freq is FREF freq divided by the product of divider 1+2. Baud rate is MODEM_CLK freq divided by 8.\n  -4:2-Modem clock divider 1 (A):Divide by 3\n  -5-Reference frequency divisor (A):REF_CLK frequency = Crystal frequency / 2\n0B 27 W Clock generation register B: same as above\n0C 44 W VCO current control register:Control of current in VCO core = 2.8 mA current in VCO core\n0D 53 W Modem control register\n  -1:0-Modem data format:Transparent asynchronous UART operation, set DCLK=1\n  -6:4-ADC clock divisor:ADCfreq = XOSCfreq/12\n0E 3B W TX frequency deviation register\n0F C6 W RX AFC control register\n  -Controls AFC settling time versus accuracy: Slowest settling; frequency averaged over 4 0/1 bit pairs\n  RX fdev should be half TX fdev (GFSK).\n  RX fdev should be TX fdev for FSK and for GFSK at 100 kBaud data rate and above.\n10 22 W Channel filter / RSSI control register\n  receiver channel bandwidth &lt; 153.6 kHz\n  Decimation clock divisor:\n11 65 W VGA control register 1\n  Sets the number of consecutive samples at or above carrier sense level before carrier sense is indicated (for example, on LOCK pin): Set carrier sense after second sample at or above carrier sense level\n  Sets the number of consecutive samples below carrier sense level before carrier sense indication (for example, on lock pin) is reset: 1: Carrier sense reset after 2nd sample below carrier sense level. Reduce chance of losing carrier sense due to noise.\n12 57 W VGA control register 2\n        Maximum LNA2 setting used in VGA = Maximum LNA2 gain for best sensitivity\n        Sets how many samples that are used to calculate average output magnitude for AGC/RSSI:  Magnitude is averaged over 16 filter output samples\n13 2E W VGA control register 3\n        Decides how much the signal strength must be above CS_LEVEL+VGA_UP before VGA gain is decreased: Gain is decreased 6 dB above CS_LEVEL+ VGA_UP (See Figure 5-17 for an explanation of the relationship between RSSI, AGC and carrier sense settings.)\n14 2E W VGA control register 4: Gain is increased when signal is below CS_LEVEL+ 1.5 dB\n16 76 W Front end bias current control register\n17 87 W Analog modules control register\n18 50 W LO buffer and prescaler swing control register\n19 25 W LO buffer and prescaler bias current control register\n1A AE W PLL loop bandwidth / charge pump current control register = 174 kHz?\n        Charge pump current scaling/rounding factor. Used to calibrate charge pump current for the desired PLL loop bandwidth. The value is given by: PLL_BW = 174 + 16 log2(fref / 7.126) where fref is the reference frequency in MHz.\n1C 00 W Power amplifier output power register\n1D F0 W Match capacitor array control register, for RX and TX impedance matching\n1E 00 W Phase error compensation control register for LO I/Q\n1F 00 W Gain error compensation control register for mixer I/Q\n20 00 W Power-down control register\n15 23 W Lock control register\n        Selection of signals to LOCK pin: LOCK_CONTINUOUS (active low)\n        Selects lock accuracy (counter threshold values): Declare lock at counter value 1023, out of lock at value 1007\n00 11 W Main control register\n00 01 W Main control register\n05 28 W Frequency register 1A\n06 A3 W Frequency register 0A\n00 11 W Main control register\n1B B4 W LO buffer and prescaler swing control register\n40 07 R Status information register (PLL lock, RSSI, calibration ready, and so on)\n40 07 R Status information register (PLL lock, RSSI, calibration ready, and so on)\n40 27 R Status information register (PLL lock, RSSI, calibration ready, and so on)\n40 07 R Status information register (PLL lock, RSSI, calibration ready, and so on)\n40 07 R Status information register (PLL lock, RSSI, calibration ready, and so on)\n&gt; CC1021 up and running.\n&gt; Loop: Scan every channel for 2.7 ms\nCC1021 RX channel 1\n04 3A = Frequency register 2A\n05 1C = Frequency register 1A\n06 7D = Frequency register 0A\n&gt;       wait 2.7 ms before changes to new Rx kanal if data on Rx channel changes Tx channel in CC1021 to\nCC1021 TX channel 1\n08 3A = Frequency register 2B\n09 21 = Frequency register 1B\n0A D1 = Frequency register 0B\nCC1021 RX channel 2\n04 3A = Frequency register 2A\n05 28 = Frequency register 1A\n06 A3 = Frequency register 0A\n&gt;       wait 2.7 ms before changes to new Rx kanal if data on Rx channel changes Tx channel in CC1021 to\nCC1021 TX channel 2\n08 3A = Frequency register 2B\n09 2D = Frequency register 1B\n0A F9 = Frequency register 0B\nCC1021 RX channel 3\n04 3A = Frequency register 2A\n05 38 = Frequency register 1A\n06 43 = Frequency register 0A\n&gt;       wait 2.7 ms before changes to new Rx kanal if data on Rx channel changes Tx channel in CC1021 to\nCC1021 TX channel 3\n08 3A = Frequency register 2B\n09 3D = Frequency register 1B\n0A 99 = Frequency register 0B\n&gt; Start Over\n</code></pre> <p>Maybe someone can calculator the Rx/Tx frekvens from the hex code in Frequency register A/B from cc1021 datasheet. CC1021 use 14.7456 MHz Crystal oscillator.</p>"},{"location":"RADIO-RTLSDR/","title":"Software Defined Radio (SDR)","text":"<p>This document helps you choose, configure and install everything you need to receive io-homecontrol signals with an SDR.</p> <p>[!NOTE] The description of the io-homecontrol signal can be found here: Radio.</p>"},{"location":"RADIO-RTLSDR/#basics","title":"Basics","text":"<p>This sections helps you understand the concepts and wording.</p>"},{"location":"RADIO-RTLSDR/#iq-correction","title":"IQ correction","text":"<p>SDRs output IQ samples: - I: the in-phase part of the signal. - Q: the quadrature (or imaginary) part of the signal.</p> <p>This allows to process the signal in \u201c3D\u201d (time, amplitude, polarity) instead of just in \u201c2D\u201d (time, amplitude). Due to the circuitry of an SDR, there\u2019s a large frequency spike at whichever frequency you\u2019ve asked the radio to tune itself to. This spike is an unavoidable artifact of how the SDR works.</p> <p>There are basically two options to remove this spike from received signals: - Tune the radio slightly \u2019to the side\u2019 of the frequency you\u2019d actually like to measure, so that the center spike isn\u2019t polluting your real signal. - Use software to detect and try to remove this spike at the centered frequency. This feature is called IQ correction, because it works by mucking about with the IQ samples before delivering them to the rest of the stack.</p>"},{"location":"RADIO-RTLSDR/#bias-tee","title":"Bias-TEE","text":"<p>A circuit within an SDR that provides DC power to an active antenna. Disabled by default so if you own a rtl-sdr-blog dongle you need their driver and turn it on so that the antenna receives power.</p> <p>[!NOTE] This feature is only available with custom RTL devices like the one from rtl-sdr.com.</p> <p>[!CAUTION] If you are using a normal antenna (like the one that comes with the dongle) do not turn this feature on!</p>"},{"location":"RADIO-RTLSDR/#automatic-gain-control-agc","title":"Automatic Gain Control (AGC)","text":"<p>A hardware circuit (or software feature) that amplifies weak signals in an effort to improve the signal-to-noise ratio (SNR) of the received data.</p>"},{"location":"RADIO-RTLSDR/#direct-sampling-hf-mode","title":"Direct Sampling HF Mode","text":"<p>Allows to listen to HF signals between ~500 kHz to ~28.8 MHz. Only available with rtl-sdr-blog devices and the corresponding driver.</p> <p>Not needed for io-homecontrol reception.</p>"},{"location":"RADIO-RTLSDR/#hardware","title":"Hardware","text":"<p>This section covers RTL devices as everyone with another device probably knows how to use their device.</p>"},{"location":"RADIO-RTLSDR/#rtl-dongles","title":"RTL Dongles","text":"<p>You basically have two options: - A used RTL based DVB-T stick as there is no reason to get a new one. - A pimped version from a site like rtl-sdr.com.</p>"},{"location":"RADIO-RTLSDR/#software-and-rtl-drivers","title":"Software and RTL Drivers","text":"<p>This section is all about the different applications, their setup and which driver to use.</p>"},{"location":"RADIO-RTLSDR/#drivers","title":"Drivers","text":"<p>There are different drivers for the device (<code>rtlsdr.dll</code> or <code>librtlsdr.dll</code>) and USB interface (<code>libusb.dll</code>). Always check the used version and get a decent one from GitHub as bad drivers will work but will give worse results. If you are getting errors about a radio not found or when closing an application, then this is due to problems with libusb. Google is your friend as we can't cover everything.</p>"},{"location":"RADIO-RTLSDR/#rtl-sdr-blog-driver","title":"rtl-sdr-blog driver","text":"<p>If you have a device from rtl-sdr.com you first need to get the latest driver: rtl-sdr-blog driver.</p> <p>[!CAUTION] You need to change the driver for the rtl-sdr-blog device for every application (eg. rtl_433, Ultimate Radio Hacker, SDR# (SDRsharp)) you are using as those come with the standard rtlsdr driver!</p>"},{"location":"RADIO-RTLSDR/#rtl_433","title":"rtl_433","text":"<p>rtl_433 has basic support for io-homecontrol reception and decoding. It was shown that the builtin decoder (<code>-R 189</code>) yields better results then a Flex decoder (<code>-X \"...\"</code>) when used with the <code>decode_uart</code> option.</p> <p>[!NOTE] At the time of writing rtl_433 provides nightly builds in random intervals. This assumes you are using the latest nightly release.</p> <p>To receive signals you need to tune your RTL slighty off-center (see IQ correction). Let's say you want to receive io-homecontrol channel 2 (868,95 MHz) then tune your radio to 869,89 MHz (<code>-f 868.89M</code>).</p> <ul> <li>Most used command line options:</li> <li><code>-c 0</code>: Disable loading of config files</li> <li><code>-R 189</code>: Only enable builtin ioHome decoder. A 0 means all builtin decoders are disabled.</li> <li><code>-M level</code>: Output extra signal information like RSSI, SNR, time, etc.</li> <li><code>-f 868.89M</code>: Tune the radio to 868.89 MHz</li> <li><code>-g 37.2</code>: Set input gain</li> <li><code>-s 1000k</code>: Set the sample rate. Can also be set to 250k for channel 2.</li> <li><code>-Y</code><ul> <li><code>autolevel</code>: Change the level at which a signal is recognized. Everything else is noise.</li> <li><code>squelch</code>: Skip packets which noise.</li> <li><code>magest</code>: Change the autolevel mode.</li> </ul> </li> <li><code>-X</code>: Use a Flex decoder with the following settings.<ul> <li><code>name</code>: Custom protocol name.</li> <li><code>short</code>: How long does it take to transmit one bit.</li> <li><code>long</code>: How long does it take to transmit one bit.</li> <li><code>reset</code>: Time when a packet (consisting of frames) is finished and a new one starts.</li> <li><code>gap</code>: Time between each frame.</li> <li><code>tolerance</code>: How many us can the signal deviate from the defined (long/short) value.</li> <li><code>preamble</code>: Which byte sequence does the protocol use to signal a incoming packet.</li> <li><code>decode_uart</code>: Decode everything after the preamble as if it is UART encoded.</li> <li><code>unique</code>: Remove unneeded from the output.</li> </ul> </li> </ul>"},{"location":"RADIO-RTLSDR/#builtin-decoder","title":"Builtin Decoder","text":"<p>Start receiving ioHome signals on channel 2 (1W/2W)</p> <p><code>rtl_433 -c 0 -R 189 -M level -f 868.89M</code></p>"},{"location":"RADIO-RTLSDR/#flex-decoder-via-configuration-file","title":"Flex Decoder via Configuration File","text":"<ul> <li>Download rtl_433.conf</li> <li>Move rtl_433.conf next to your rtl_433 executable</li> <li>Just start rtl_433</li> </ul>"},{"location":"RADIO-RTLSDR/#flex-decoder-via-command-line","title":"Flex Decoder via Command Line","text":"<p><code>rtl_433 -c 0 -R 0 -Y autolevel -Y squelch -Y magest -M level -g 37.2 -s 1000k -f 868.89M -X \"name=iown,short=26,long=26,reset=286,gap=286,tolerance=2,preamble=0x7FD9,unique\"</code></p>"},{"location":"RADIO-RTLSDR/#rtl_433-for-sdr-sdrsharp","title":"rtl_433 for SDR# (SDRsharp)","text":"<p>If you prefer a graphical user interface for rtl_433 you can use a plugin for SDR# (SDRsharp). Please follow the instructions from the GitHub page for installation and usage.</p>"},{"location":"RADIO-RTLSDR/#ultimate-radio-hacker-urh","title":"Ultimate Radio Hacker (URH)","text":"<p>[!IMPORTANT] Please help expand this section with a little tutorial on how to use URH.</p> <p>URH is used to analyse the raw signal pulses instead of parsing data like rtl_433. This way you can compare the quality of your signal produced by the LoRa32 dongle to a real io-homecontrol device.</p>"},{"location":"RADIO-RTLSDR/#gnu-radio","title":"GNU Radio","text":"<p>You will find the GNU Radio scripts in the scripts folder.</p>"},{"location":"Radio/","title":"io-homecontrol radio protocol description","text":""},{"location":"Radio/#physical-specifications","title":"Physical specifications","text":"<p>The io-homecontrol protocol is constructed on 2-FSK encoded frames.</p> Channel Start End Base 1 868.00 MHz 868.60 MHz 868.25 MHz 2 868.70 MHz 869.20 MHz 868.95 MHz 3 869.70 MHz 870.00 MHz 869.85 MHz <ul> <li>Deviation: 19,2 kHz</li> <li>Baud Rate: 38.4 kbps</li> <li>Encoding: NRZ</li> <li>Modulation: 2-FSK</li> <li>Standards: IEEE 802.15.4(g) / ETSI-300-200</li> <li>Modes: Master, Slave, Beacon</li> <li>Checks:</li> <li>Preamble + Sync Word (\"Start Byte\")</li> <li>Address / Broadcast</li> <li>CRC</li> <li>Encoding (data): UART</li> <li>Same Structure as SDN (Somfy Digital Network)</li> </ul>"},{"location":"Radio/#raw-data-sending","title":"Raw Data Sending","text":"<p>The data is transmitted as 8-bit bytes with 1 start bit (<code>0</code>) and a stop bit (<code>1</code>). Bytes are transmitted in order, but bits of each byte are swapped: the least significant bit is transmitted first.</p> <p>Messages start with a preamble with an alternating bit sequence: <code>010101...</code> They are constructed from a long sequence of bytes <code>0x55</code>. This gives a bit sequence: <code>0 10101010 1 0 10101010 1...</code> There seem to be multiple variants of the preamble length. The preamble is completed by the bytes <code>FF 33</code>, i.e. bits <code>0 11111111 1 0 11001100 1</code>.</p> <p>Then, it sends the data packet's bytes. The first 5 least significant bits of the data packet, that is the first byte <code>&amp; 0x1F</code>, gives the length of the payload. In the example <code>0 00011111 1</code>, it is <code>0b111000 = 0x18 = 24</code>. The length of the payload does not include the first byte itself. After the payload, there is a 16-bit CRC with polynomial <code>0x(1)8408</code> over the data packet (i.e. length byte + payload). The CRC's initial value is <code>0</code> and it does not employ an XOR/NOT. The least significant byte of the CRC is transmitted first.</p>"},{"location":"Radio/#packet-structure","title":"Packet structure","text":"<p>L, S and X are variable offsets/lengths. In packets found so far, S = 8 and X = 0.</p> <ul> <li>[0] &amp; 0x1F: length of payload (L), excluding this first byte and 2 trailing CRC bytes.</li> <li>[0] &amp; 0x20: iff set, there is a 8 byte suffix (S = 8). Otherwise, S = 0.</li> <li>[0] &amp; 0x40: unknown</li> <li>[0] &amp; 0x80: unknown</li> <li>[1] &amp; 0x03: iff == 0x03 and the next bytes equal 0B 01, then skip the next two bytes (X = 2). Otherwise, X = 0.</li> <li>[1] &amp; 0x04: unknown</li> <li>[1] &amp; 0x08: unknown</li> <li>[1] &amp; 0x10: unknown</li> <li>[1] &amp; 0x20: unknown</li> <li>[1] &amp; 0xC0: unknown; 2 bits seem to be related</li> <li>[2:4]: ignored if equal to 0B 01 and [1] &amp; 0x03 == 0x03</li> <li></li> <li>[X+5:X+8]: sender address</li> <li>[X+8]: command/message code. The firmware dispatches on this byte.</li> <li>[X+9:1+L-S]: application data</li> <li>[1+L-S:1+L]: optional suffix<ul> <li></li> <li>[1+L-S+1]: sequence number?</li> <li>[1+L-S+2:1+L-S+8]: 6 high entropy bytes.</li> </ul> </li> </ul>"},{"location":"Radio/#address-structure","title":"Address structure","text":"<p>Addresses have a specific structure. It looks like there are several address classes. Some of the structure is parsed using the following algorithm: Text Only<pre><code>int get_address_class(char (*address)[3])\n{\n  if (address[0] != 0) { // bits 0..8\n    return 13;\n  }\n  if (address[1] || (address[2] &amp; 0xC0) != 0) // bits 8..18\n  {\n    switch (address[2] &amp; 0x3F) { // bits 18..24\n      case 0x3Bu: return 7;\n      case 0x3Cu: return 8;\n      case 0x3Du: return 9;\n      case 0x3Eu: return 10;\n      case 0x3Fu: return 11;\n      default: return 12;\n    }\n  }\n  else\n  {\n    switch (address[2] &amp; 0x3F) // bits 18..24\n    {\n    case 0: return 0;\n    default: return 1;\n    case 0x3Bu: return 2;\n    case 0x3Cu: return 3;\n    case 0x3Du: return 4;\n    case 0x3Eu: return 5;\n    case 0x3Fu: return 6; // broadcast?\n    }\n  }\n}\n</code></pre></p>"},{"location":"Radio/#example","title":"Example","text":"<p>This analysis was based on the data from https://github.com/101010b/io-home - This is a very useful starting point. Two things missed by this source were the start- and stop bits and the fact that the data is bitswapped. Correcting for this and removing the leading/trailing preamble and noise gives the following three byte sequences.</p> <p>Below the packets from 101010b (in sequence), the data sniffed from a SMOOVE Origin IO is listed. For both data sources, in reality all packets were repeated 4 times.</p> Text Only<pre><code>vvvvv end of preamble\n      vv first byte, length and flags\n         vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv payload\n         vv more flags\n            vvvvvvvv destination address\n                     vvvvvvvv sender address\n                              vv command/message code\n                                 vvvvvvvvvvvvvvvvvvvvvvv application data (low entropy)\n                                                         vvvvvvvvvvvvvvvvvvvvvvv suffix\n                                                            vv sequence number?\n                                                               vvvvvvvvvvvvvvvvv high entropy (challenge? anti-replay?)\n                                                                                 vvvvv CRC over first byte + payload\n\nFF 33 F8 00 00 00 3F 1A 38 0B 00 01 61 00 00 80 D8 05 00 02 A6 24 22 2E 8B A3 51 5F 52 - 101010b packet 1\nFF 33 F8 00 00 00 3F 1A 38 0B 20 02 FF 01 61 00 0E 00 00 02 A7 4F E2 F6 8C 4F 88 B5 0D - 101010b packet 2\nFF 33 F8 00 00 00 3F 1A 38 0B 20 02 FF 01 61 00 05 FF 00 02 A8 C7 74 2D FE 1F 33 3B 82 - 101010b packet 3\n\nFF 33 F6 00 00 00 3F 48 5B 37 00 01 43 D2 00 00 00       03 D6 B6 3C B3 CD CD 2B 8A 2E - SMOOVE Origin IO packet 1\nFF 33 F8 00 00 00 3F 48 5B 37 20 02 ff 01 43 02 0c 00 00 03 D7 74 59 2B C4 B3 36 FD A4 - SMOOVE Origin IO packet 2\nFF 33 F8 00 00 00 3F 48 5B 37 20 02 ff 01 43 02 05 ff 00 03 D8 90 39 62 DB AD 98 FB 24 - SMOOVE Origin IO packet 3\n</code></pre>"},{"location":"Radio/#crc-example","title":"CRC example","text":"<p>The following shows how to check the CRC:</p> Text Only<pre><code>def compute_crc_8408_byte(data, crc = 0):\n    crc ^= data\n    for i in range(8):\n        remainder = 0x8408 if crc &amp; 1 else 0\n        crc = (crc &gt;&gt; 1) ^ remainder\n    return crc\n\ndef compute_crc_8408(data, crc = 0):\n    for b in data:\n        crc = compute_crc_8408_byte(b, crc)\n    return crc\n\nprint(\"%04X\" % compute_crc_8408(b\"\\xF8\\x00\\x00\\x00\\x3F\\x1A\\x38\\x0B\\x00\\x01\\x61\\x00\\x00\\x80\\xD8\\x05\\x00\\x02\\xA6\\x24\\x22\\x2E\\x8B\\xA3\\x51\")) # gives 525F\nprint(\"%04X\" % compute_crc_8408(b\"\\xF8\\x00\\x00\\x00\\x3F\\x1A\\x38\\x0B\\x00\\x01\\x61\\x00\\x00\\x80\\xD8\\x05\\x00\\x02\\xA6\\x24\\x22\\x2E\\x8B\\xA3\\x51\\x5F\\x52\")) # gives 0000, i.e. CRC is ok\n</code></pre>"},{"location":"devices/","title":"io-homecontrol Devices","text":""},{"location":"devices/#oem-hardware","title":"OEM Hardware","text":"<p>List of supported OEM hardware including pictures and hardware description (if available).</p>"},{"location":"devices/#somfy","title":"Somfy","text":"<ul> <li>Situo 1 io (1W) (via reddit)</li> <li>MCU: STM8L151C8U6 GH22C VG CHN 723 (UART: 38834 Baud = 38400, the difference is related to the STM8's internal clock)</li> <li>RF: Semtech SX1243</li> <li>TaHoma</li> <li>MCU: STM32F101RCT6</li> <li>RF: Si4461</li> </ul>"},{"location":"devices/#velux","title":"Velux","text":""},{"location":"devices/#hardware","title":"Hardware","text":"<ul> <li>Velux Solar Powered Blinds (SSL)</li> <li>Version from 2012: Akkutausch beim VELUX INTEGRA\u00ae SOLAR SSL</li> <li>Renesas D78F1144: 16-bit uC (78K0R/Kx3-Family), 128kB Flash, 8kB RAM</li> <li>Analog Devices ADF7020</li> <li>Velux KLF 200</li> <li>MCU: EFM32 Giant Gecko (EFM32GG990F1024G-E-BGA112) 48 MHz ARM Cortex-M3, 1024KB Flash, 128KB RAM<ul> <li>256Mbit NOR FLASH</li> </ul> </li> <li>MCU: STM32F427IIH6 - STM32 High-performance advanced line, 180 MHz Arm Cortex-M4 with DSP/FPU, 2MB Flash, Chrom-ART Accelerator, FMC with SDRAM<ul> <li>256Mbit NOR FLASH</li> </ul> </li> <li>RF: Analog Devices ADF7022</li> <li>WiFi: SP-7DZX<ul> <li>RF Front End 2.4GHz: CC2590</li> <li>RF Low Power 2.4GHz: AT86RF233</li> </ul> </li> <li>MCU: STM32F427II-H6 = ARM Cortex-M4 with DSP &amp; FPU, 2MB Flash, 180MHz</li> <li>Ethernet Controller: W5500</li> </ul>"},{"location":"devices/#product-range","title":"Product Range","text":"<ul> <li>Naming Scheme: ABC nnn (nAB Cnn DD)</li> <li>ABC nnn</li> <li>n = / AB = | C = / nn = | DD = Region (WW &gt; WorldWide / EU &gt; Europe / US &gt; US of A)</li> <li>VELUX INTEGRA\u00ae (ioHc) Products</li> <li>roof windows GGL (----21), GGU (----21)</li> <li>Solar roof windows GGL (----30), GGU (----30)</li> <li>flat roof window CVP (3MX A02)</li> <li>modular skylight HVC (3MA A01, 3MA A02, 3MA A03, 3MA A04, 3MA A05)</li> <li>conversion kit KMX 100 (3MG A01, 3UC A02, 3LA A01, 3LR A01) for roof windows GGL, GGU</li> <li>conversion kit KMX 200 (3MX A01, 3LA A01, 3LR A01) for roof windows GHL, GHU, GPL, GPU, GTL, GTU, VKU</li> <li>Solar conversion kits KSX 100 (3SM B01, 3SD B01, 3LR A01), KSX 100K (3SM BK01, 3LR A02) for roof windows GGL, GGU</li> <li>Control pad KLR 200 (3LR A02)</li> <li>KLF  50 - Wall Switch</li> <li>KLF 100 - Interface (see Controling Velux Windows With Fibaro)</li> <li>KLF 200 - Internet Gateway/Interface</li> <li>KRX 100 - (2w) Remote Controller with Screen (KLF 102 &gt; 3LF D02)</li> <li>KLR 100 - (2w) Remote Control with Screen</li> <li>KLR 200 - (2w) Remote Control Pad</li> <li>KUX 100 - (1w) Remote Control (long, like KLF 31x)</li> <li>KUX 110 - (2w) Controller for wired products (via 24V \u00b1) via io-Homecontrol (KUX 100 successor)</li> <li>KLI 310 - (1w) Wall Mounted Remote Control for Universal Usage</li> <li>KLI 311 - (1w) Wall Mounted Remote Control for Window</li> <li>KLI 312 - (1w) Wall Mounted Remote Control for Inner Sun Blind</li> <li>KLI 313 - (1w) Wall Mounted Remote Control for Outer Sun Blind</li> <li>KIX 300 - Package: KIG 300, Raumklimasensor, Abwesenheitsschalter</li> <li>VELUX ACTIVE indoor climate control KIX 300</li> <li>Gateway KLG 300/3LG E01/NXG01E</li> <li>Climate Sensor KLA 300/3LA E06/NXS01</li> <li>Departure Switch KLN 300/3LN E01/NXD01E</li> <li>KIG 300 - Internet Gateway NXG01E / NXG01C / NXS01 / NXD01E</li> <li>KRD 100 - Remote Socket (1w)</li> <li>KMX 100 - UNKNOWN</li> <li>KMX 200 - UNKNOWN</li> <li>KLA 130 - UNKNOWN</li> </ul> <p>This page lists devices for which their internal hardware (eg.: MCU, SoC, RF, etc.) is known.</p> <p>The default password for animeo products is <code>somfy</code>.</p> <ul> <li>Info Snippets</li> <li>Factory Codes<ul> <li>000000 (+ A+S Buttons at once)</li> <li>0000</li> <li>12345</li> </ul> </li> </ul>"},{"location":"devices/#mac-uuids-and-other-known-values-to-identify-products","title":"MAC, UUIDs and other known values to identify products","text":"Vendor Product VID PID OUI Type Other Notes Somfy Unknown Sensor (OSB/ISB) 00:05:51 F&amp;S Elektronik Systeme GmbH Somfy Connect BMS 00:50:4E:11:78:12 OUI: Sierra Monitor Corp. Somfy 0x1220 ZigBee Overkiz 0x123D ZigBee Atlantic 0x125B ZigBee Somfy SDN Gateway (USA) 04:91:62:68:EF:20 <ul> <li>Somfy TaHoma (Overkiz_KB1 = KizBox1): Ref. 5067437X03. PIN: 0201-0568-4011. MAC: F8:81:1A:00:02:38</li> <li>Somfy SDN Gateway (USA)</li> <li>SDN Motors attached = 067071, 068A80, 068AA7, 0667B4</li> </ul>"},{"location":"devices/#hardware-buttons","title":"Hardware Buttons","text":"<p>It seems that all devices have (at least) four different durations of button presses they recognize</p> <ul> <li>Command Presses (Up, Down, my, Stop, etc.)</li> <li>Reset, Programm, Pair Presses</li> <li>Short: 0,5 sec = Confirm/Pair</li> <li>Intermediate: 1.5 sec = \"Long Press before Stop\"</li> <li>Medium: 4-5 sec = ?</li> <li>Long: 8 sec = Reset</li> <li>Very Long: 10 - 15 sec = Ignore (in case of abort)</li> <li>Ultra Long: &gt;20 sec (Some special internal stuff?)</li> </ul>"},{"location":"devices/#devicefactory-reset-and-double-power-cut-dpc","title":"Device/Factory Reset and Double Power Cut (DPC)","text":"<ul> <li>Factory Reset: Dual Power Cut</li> <li>Unplug: 6 seconds</li> <li>PlugIn: 10 seconds</li> <li>Unplug: 6 seconds</li> <li>PlugIn: Actuator will move.</li> <li>Press and hold the PROGRAMMING BUTTON on the remote. Continue to hold the programming button until the motor jogs 2 times and has finished jogging.<ul> <li>NOTE: 1 Jog = 1 Up + 1 Down Movement</li> </ul> </li> </ul> <p>When it comes to iohc it seems the Double Power Cut is essential for reprogramming. The Double Power Cut puts the device into \"Learning Mode\". It seems that it's also possible to get into this learning mode with a simple 1W remote via pressing the Up/Down Button simultanisly.</p> <ul> <li>Double Power Cut (Standard)</li> <li>3 sec. Off</li> <li>10 sec. On</li> <li>3 sec Off</li> <li> <p>On: Actuator confirms with \"Wink\"</p> <ul> <li>Option 1: Stop Learn Mode = Short Press \"My\" on Remote Controller</li> <li>Option 2: Reset = Long Press (8 sec) \"PROG\" on Remote Controller</li> <li>There will be a response from the Actuator which lasts around 10 seconds</li> <li>Option 3: Pair = Short Press (0,5 sec) \"PROG\" on Remote Controller</li> <li>Only deletes Remotes. Sensors remain paired to the Actuator.</li> </ul> </li> <li> <p>\"my\" Position (Intermedia Position IP)</p> </li> <li>Save new my Position<ul> <li>Long Press (8 sec) \"my\" Button: Actuator confirms with \"Wink\"</li> </ul> </li> <li>Change my Position<ul> <li>Long Press (8 sec) \"my\" Button: Actuator confirms with \"Wink\"</li> </ul> </li> <li> <p>Delete my Position</p> <ul> <li>Short Press (0,5 sec) \"my\" Button: Wait for Actuator</li> <li>Long Press (8 sec) \"my\" Button: Actuator conforms with \"Wink\"</li> </ul> </li> <li> <p>io-homecontrol</p> </li> <li>Copy Remote Controller (1W)<ul> <li>Medium Press (~4 sec) \"PROG\" on Old Remote Controller</li> <li>Short Press (0,5 sec) \"PROG\" on New Remote Controller</li> </ul> </li> <li>Add Sensor<ul> <li>Short Press (0,5 sec) \"PROG\" on Paired Remote Controller</li> <li>Short Press (0,5 sec) \"PROG\" on New Sensor</li> </ul> </li> </ul> <p>NOTE: This information (and more) can either be found in the io handbook or via the iohc db or XML files. TODO: link above mentioned things</p>"},{"location":"devices/#initial-setup-programming","title":"Initial Setup Programming","text":"<p>Initial Setup Programming instructions is to be used to set the limits on a motor that has been reset to factory settings with the remote control paired to the motor.</p>"},{"location":"devices/#overkiz","title":"Overkiz","text":"<ul> <li>Factory Mode:</li> <li>256 = reset on smartkiz</li> <li>258 = prog on mbrd</li> <li>26 = reset on kizbox3</li> </ul>"},{"location":"devices/#kizboxmini","title":"KizBoxMini","text":"<ul> <li>Kizbox mini = <code>kizboxmini</code></li> <li>Kizbox mini base board = <code>kizboxmini-base</code></li> <li>Kizbox Mini RailDIN = <code>kizboxmini-rd</code></li> <li>Kizbox Mini Mother Board = <code>kizboxmini-mb</code></li> </ul> <p>DTSI Definitions: bootargs = \"ubi.mtd=ubi\"; stdout-path = &amp;dbgu; - keys   - PB_PROG: pioC 17 GPIO_ACTIVE_LOW linux_code = 0x102   - PB_RST: pioC 16 GPIO_ACTIVE_LOW linux_code = 0x100   - usart0: use-dma-rx/tx   - macb0: phy-mode = \"rmii\"   - ebi-0: ebi_addr_nand ebi_data_0_7   - nand_controller-0 nand_oe_we nand_cs nand_rb   - nand@3     - rb = pioD 5 GPIO_HIGH&gt;;     - cs = pioD 4 GPIO_HIGH&gt;;   - usb0 ports = 1     - MotherBoard: ports = 2   - usb1</p> <p>base: - usart0   PIOA 0 A    PULL_UP   PIOA 1 A    NONE   PIOA 2 GPIO MULTI_DRIVE</p> <p>RailDIN: - adc0_ad5 vref=2500 channels=0x0020 - PIOB 16 GPIO NONE / pull-up disable /</p>"},{"location":"devices/#smartkiz","title":"SMARTKIZ","text":"<ul> <li>2 USB Ports</li> <li>ADC Clock</li> <li>UART Serial5</li> </ul> <p>i2c1-0 PIOC 0 PULL_UP i2c1-0 PIOC 1 PULL_UP adc0_ad0  / pull-up disable / PIOB 11 adc0_ad5  / pull-up disable / PIOB 16 adc0_ad6   PIOB 17 adc0_ad11  PIOB 10 prog       pioC 17 //button reset      pioC 16 //button hk_reset   pioC 13 power_rf   pioA 20 power_wifi pioA 21 nand_rb    pioD 5 HIGH nand_cs    pioD 4 HIGH</p> <p>led_blue:   pwm0 2 led_green:  pwm0 0 led_red:    pwm0 1</p>"},{"location":"devices/#kizbox-3","title":"KizBox 3","text":"<ul> <li>https://github.com/torvalds/linux/blob/master/arch/arm/boot/dts/at91-kizbox3-hs.dts</li> <li>https://floss.overkiz.com/build/2022.6/at91-kizbox3/linux-overkiz-5.4.208-r4/0008-ARM-at91-dts-at91-kizbox3-hs-update-default-pins-sta.patch</li> <li>https://github.com/torvalds/linux/blob/master/arch/arm/boot/dts/at91-kizbox3_common.dtsi</li> </ul> <p>3x USB 8x UART 0o         serial0 = UART0;         serial1 = UART1; / Debug /         serial2 = UART2;         serial3 = UART3;         serial4 = UART4;         serial5 = UART5; / Flexcom0 /         serial6 = UART8; / Flexcom3 /</p> <p>name           =  ADDRESS     SIZE bootstrap      = 0x000000 0x0020000 securam        = 0x001400 0x0000020  / overkiz u-boot mode/version and factory / u-boot         = 0x020000 0x0140000 u-boot-factory = 0x160000 0x0140000 ubi            = 0x2A0000 0x7D60000</p> <p>TXD/RXD = USART FlexCom = ATMEL FLEXCOM_MODE_USART</p> <p>PD12 I2C6_DATA_FLEXCOM4_IO0 / FLEXCOM_TWI / PD13 I2C6_CLK_FLEXCOM4_IO1 / FLEXCOM_TWI / PA22 SW0 pioC  LOW linuxcode 0x100 / PB_RST=button-reset / PA29 SW1 pioA  LOW linuxcode 0x101 / PB_USER=button-user / PA18 SW2 pioA  LOW linuxcode 0x102 / PB_PROG=button-prog / PA22 SW3 pioA  LOW linuxcode 0x103 / / PA26 SW7 pioA  LOW linuxcode 0x107 / / PA24 SW8 pioA  LOW linuxcode 0x108 / / PB01 led_red pioA  HIGH PB03 RXD4 PB04 TXD4 PB08 led_white pioA  HIGH PB11 verbose_bootloader pioA  HIGH INPUT PB12 nail_bed_detection pioA  HIGH INPUT PB21 zbe_test_radio pioA  HIGH PB22 TXD5 / UART5=FLEXCOM0_IO0 / PB23 RXD5 / UART5=FLEXCOM0_IO1 / PB25 zbe_rst       pioA  HIGH PB26 RXD0 PB27 TXD0 PB30 io_reset      pioA  HIGH / stm32 reset must be open drain (internal pull up) / PC00 id_usba       pioA  LOW INPUT PC09 io_test_radio pioA  HIGH PC11 io_boot_0     pioA  HIGH PC12 RXD3 PC13 TXD3 PC17 io_boot_1     pioA  HIGH PC19 rf_on         pioA  HIGH PC20 wifi_on       pioA  HIGH PD02 RXD1 / UART1=DEBUG / PD03 TXD1 / UART1=DEBUG / PD04 RXD2 / UART2 / PD05 TXD2 / UART2 /</p>"},{"location":"devices/#somfy-tahoma-kizbox1","title":"Somfy TaHoma (KizBox1)","text":"<ul> <li>AT91SAM9G20 CU 1010 B KLRK1-3</li> <li>RAM: Samsung 004 K4S561632J-UC75 S5616 WRL093GDU</li> <li>ROM: SH80001B 2BN6</li> <li>Atmel 32UC3B1 256-U 0940 265-1<ul> <li>ADF7020-BCPZ</li> </ul> </li> </ul>"},{"location":"devices/#connexoon","title":"Connexoon","text":"<ul> <li>AT91SAM-9G20: Kizbox</li> <li>AT91SAM-9G25: Kizbox Mini, SmartKiz</li> <li>Kizbox Mini Base Board (kizboxmini-base)</li> <li>Kizbox Mini Mother Board (kizboxmini-mb), Minikiz</li> <li>Kizbox Mini RailDIN (kizboxmini-rd)</li> <li>AT91SAM-A5D31: Kizbox 2/II</li> <li>Kizbox 2 with 2 head board (kizbox2-2)</li> <li>AT91SAM-A5D27: Kizbox 3 (Kizbox3)</li> <li>kizbox3-hs - Kizbox3-HS (Kizbox3-HS)</li> </ul> <ul> <li>AT91SAM9G25 CU 2002 A 200275V</li> <li>RAM: SKHynix H5PS1G63KFR S5C 747A NW3M2662BH</li> <li>ROM: MxIC L194010 MX30LF1G18AC-TI 8F1332?? SH80003D</li> <li>RTS/io-homecontrol: STM32F101RCT6<ul> <li>Silicon Labs Si4461 Rev. 2A</li> </ul> </li> </ul>"},{"location":"devices/#kizbox2","title":"KizBox2","text":"<ul> <li>Linux (curl) compiliation settings <p>'--build=x86_64-linux' '--host=arm-overkiz-linux-gnueabi' '--target=arm-overkiz-linux-gnueabi' 'build_alias=x86_64-linux' 'host_alias=arm-overkiz-linux-gnueabi' 'target_alias=arm-overkiz-linux-gnueabi' '--prefix=/usr' '--exec_prefix=/usr' '--bindir=/usr/bin' '--sbindir=/usr/sbin' '--libexecdir=/usr/libexec' '--datadir=/usr/share' '--sysconfdir=/etc' '--sharedstatedir=/com' '--localstatedir=/var' '--libdir=/usr/lib' '--includedir=/usr/include' '--oldincludedir=/usr/include' '--infodir=/usr/share/info' '--mandir=/usr/share/man' '--with-random=/dev/urandom' '--with-libtool-sysroot=/home/slave/j2data/workspace/yocto-build/build/at91-kizbox2/tmp/sysroots/at91-kizbox2' '--with-mbedtls=/home/slave/j2data/workspace/yocto-build/build/at91-kizbox2/tmp/sysroots/at91-kizbox2/usr/lib/../' '--with-zlib=/home/slave/j2data/workspace/yocto-build/build/at91-kizbox2/tmp/sysroots/at91-kizbox2/usr/lib/../' '--without-cyassl' '--without-gnutls' '--without-libidn' '--without-libssh2' '--without-nss' '--without-ssl' '--disable-curldebug' '--disable-debug' '--disable-dependency-tracking' '--disable-dict' '--disable-file' '--disable-ftp' '--disable-gopher' '--disable-imap' '--disable-ldap' '--disable-ntlm-wb' '--disable-pop3' '--disable-rtsp' '--disable-silent-rules' '--disable-smtp' '--disable-telnet' '--disable-tftp' '--enable-ares' '--enable-crypto-auth' '--enable-http' '--enable-werror' '--without-axtls' 'CC=arm-overkiz-linux-gnueabi-gcc -march=armv7-a -marm -mfpu=vfp -mfloat-abi=hard -mtune=cortex-a5 --sysroot=/home/slave/j2data/workspace/yocto-build/build/at91-kizbox2/tmp/sysroots/at91-kizbox2' 'LDFLAGS=-Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed' 'CFLAGS= -O2 -pipe -g -feliminate-unused-debug-types -fdebug-prefix-map=/home/slave/j2data/workspace/yocto-build/build/at91-kizbox2/tmp/work/cortexa5hf-vfp-overkiz-linux-gnueabi/curl-mbedtls/7.54.0-r0=/usr/src/debug/curl-mbedtls/7.54.0-r0 -fdebug-prefix-map=/home/slave/j2data/workspace/yocto-build/build/at91-kizbox2/tmp/sysroots/x86_64-linux= -fdebug-prefix-map=/home/slave/j2data/workspace/yocto-build/build/at91-kizbox2/tmp/sysroots/at91-kizbox2= ' 'CPPFLAGS=' 'CPP=arm-overkiz-linux-gnueabi-gcc -E --sysroot=/home/slave/j2data/workspace/yocto-build/build/at91-kizbox2/tmp/sysroots/at91-kizbox2  -march=armv7-a -marm -mfpu=vfp  -mfloat-abi=hard -mtune=cortex-a5`</p> </li> </ul> <p>at91-gpio export -q PE3 1</p>"},{"location":"devices/#somfy_1","title":"Somfy","text":"<p>Somfy TaHoma Ethernet Adapter 1870470A MAC ID: 00:0E:C6:A3:37:12 (OUI: 00:0E:C6 = Asix Electronics Corp.)</p> <p>Somfy TaHoma 1601-0089-8476 yahpoker@gmail.com Activation Date: 02-17-2021 Somfy TaHoma 1602-0265-7960 Somfy TaHoma 1602-5563-2031 Somfy/Overkiz TaHomaBeecon/Smartkiz Serial: O17196101F0106</p> <p>Overkiz Demo/Internal PIN: 0801-0001-0000</p>"},{"location":"devices/#tahoma-switchbeecon-smartkiz-test-commands","title":"TaHoma Switch/Beecon (SmartKiz) Test Commands","text":"<p>REF: 5153854A</p> <p>QR: 0 649A TU13 10577;2001-9782-3599;649A 0 10577;MKNPROQJ;J8gmBYXbmcqF;5153854A</p> <p>QR: ???;PIN;???;???;???;REF MAC: 48:D8:90:85:AC:E4 PIN: 2001-9782-3599</p> <ul> <li>RTS</li> </ul> Bash<pre><code>init             # Initialisation\nsx1243 init test # Initialisation RTS (Test mode)\nsx1243 tx on     # Pure Carrier frequency\nsx1243 data on   # Modulated Carrier frequency\nsx1243 stop\n</code></pre> <p>This program can be found under extras.</p> <ul> <li>ZigBee</li> </ul> Bash<pre><code>init\nefr32 init\nefr32 start 1\nefr32 set-chan &lt;num channel&gt;\nefr32 set-power 14 0\nefr32 stream start\nefr32 stop 1\n</code></pre>"},{"location":"devices/#somfy-situo-1-io","title":"Somfy Situo 1 io","text":""},{"location":"devices/#wind-sensor-io","title":"Wind Sensor io","text":"<ul> <li>PCB</li> <li>5057130</li> <li>QR: 1100327255</li> <li>Analog Devices (ADI): ADF7020BCPZ</li> <li>Microchip MCQE128C</li> <li>HC161 - Generic Counter</li> </ul>"},{"location":"devices/#velux_1","title":"Velux","text":"<ul> <li>Controls</li> <li>KLR 100<ul> <li> <p>2W remote for up to 200 electrical products. Display makes it possible to select and operate individual products, a group or all products simultaneously. Also time programming is possible.</p> </li> </ul> </li> <li>KLI 110<ul> <li> <p>The wall mounted control switch can be used for individual operation of one motor or simultaneous operation of several motors of the same product type using 1-way RF. The installation is wireless by battery power.</p> </li> </ul> </li> <li>KRX 100<ul> <li> <p>VELUX ACTIVE climate control: Provides a naturally balanced indoor climate. It opens and closes the Roller Shutters and other sun screening products automatically as climatic conditions change. The benefi t is prevention from overheating in summer and intelligent insulation on demand in winter.</p> </li> </ul> </li> <li>KLA 130<ul> <li> <p>The additional solar sensor is used as a supplement to VELUX ACTIVE climate control KRX 100, when the sun screening products face different geographical orientations.</p> </li> </ul> </li> <li>KLF 050<ul> <li> <p>The switch interface KLF 050 can be used for basic operation of io-homecontrol\u00ae compatible electrical products by means of a wide range of standard wall switches. This will enable the user to choose a wall switch design for operating the products that matches the other wall switches in the house.</p> </li> </ul> </li> <li>KLF 100<ul> <li> <p>Interface KLF 100 is used when io-homecontrol labelled products are to be controlled by external control devices that are not io-homecontrol compatible as e.g. external sensors or BUS systems. The interface can activate one product or a group of selected io-homecontrol\u00ae compatible products of the same product type.</p> </li> </ul> </li> <li>Power Supplies</li> <li>KUX 100<ul> <li> <p>The control system KUX 100 is used for electrical operation of one electrical product in a VELUX roof window. The control system consists of a control unit and a 1-way remote control. It can be used with VELUX electric window operators as well as decoration and sun screening products.</p> </li> </ul> </li> <li>KLC 500<ul> <li> <p>The control unit KLC 500 is used for operation of up to 5 electrical products of the same product type in VELUX roof windows. The products are operated via an io-homecontrol\u00ae activation control. It can be used with VELUX electric window operators as well as decoration and sun screening products.</p> </li> </ul> </li> <li>Roller Shutters And Blinds</li> <li>SML &amp; SSL<ul> <li> <p>Electrically operated roller shutter SML/SSL (solar) for outside of roof window. Functions: For total comfort: Optimal heat protection, total black-out, security, extra insulation, noise reduction, privacy, protection of the window/pane.</p> </li> </ul> </li> <li>MML &amp; MSL<ul> <li> <p>Electrically operated awning blind MML/MSL (solar) for outside of window. Functions: Heat protection: Effective heat protection, net fabric allows light into the room and preserves the view outside.</p> </li> </ul> </li> <li>DML &amp; DSL<ul> <li> <p>Electrically operated blackout blind DML/DSL (solar) for roof windows. Functions: Black-out: 100% black-out, stepless positioning, improves insulation.</p> </li> </ul> </li> <li>RML &amp; RSL<ul> <li> <p>Electrically operated roller blinds RML/RSL (solar) for roof windows. Functions: Regulation of light: Diffuses light, provides basic privacy and control of sunlight, decoration. Installs.</p> </li> </ul> </li> <li>FML &amp; FMG<ul> <li> <p>Electrically operated pleated blind for roof windows. FMG flat roof windows (CFP/CVP). Functions: Softening of light: Optimum daylight control, decoration, sun screening, privacy.</p> </li> </ul> </li> <li>PML<ul> <li> <p>Electrically operated Venetian blind for roof windows. The Venetian blind has the following functions: Control of sunlight: Optimum light adjustment, cordless operation, control of direction and intensity of sunlight, privacy, decoration.</p> </li> </ul> </li> <li>Other &amp; Sets (xxX)</li> <li>KRA 100<ul> <li> <p>Frame lights KRA 100 consist of two halogen spots designed as downlights for use with the electrically operated roof windows GGL INTEGRA\u00ae and GGU INTEGRA\u00ae or manually operated VELUX roof windows equipped with electrical conversion kits KMX 100 or KMX 200. The frame lights include two halogen spots, dimmer with cable and fi tting parts.</p> </li> </ul> </li> <li>KRD 100<ul> <li> <p>Adapter KRD 100 makes 230 V electrical appliances, e.g. lamps, that are not based on io-homecontrol technology compatible with the io-homecontrol platform. One or more electrical appliances connected to the adapter can be operated (switched on/off) with a io-homecontrol activation control.</p> </li> </ul> </li> <li>KMX 100<ul> <li> <p>Electrical window operator \u2013 conversion kit</p> </li> </ul> </li> <li>KMG 100<ul> <li> <p>Electrical window operator</p> </li> </ul> </li> <li>KMX 200<ul> <li> <p>Electrical window operator \u2013 conversion kit</p> </li> </ul> </li> <li> <p>KSX 100</p> <ul> <li> <p>Solar powered window operator</p> </li> </ul> </li> <li> <p>Velux Bootloader Decryption Key   <code>uint8_t decryptionKey[] = {0x2B, 0x7E, 0x15, 0x16, 0x28, 0xAE, 0xD2, 0xA6, 0xAB, 0xF7, 0x15, 0x88, 0x09, 0xCF, 0x4F, 0x3C};</code></p> </li> </ul> <p>3LR   KLR 200   KLR 100 (Stabfernbedienung Wei\u00df/Silber)     KMX 100     KMX 200 3UR   KUX 100 Medium Stabfernbedienung 3LI   KLI 310/311/312/313 3SM (neu)/3MG (alt)   KSX 100 (Motor) - 3LF   - KLF 050   - KLF 200 (Internet Gateway)     - 3LF D03 WW     - Model-BE-RC009-02     - 35BM08B - 6594 B801 2B21 003D     - KLF 200 WW     - SSID: VELUX_KLF_84C3     - Password: 2Em29uN76b     - WiFi mac: 74-7A-90-8A-84-C3     - LAN mac: 64-61-84-00-A8-36</p> <ul> <li>Velux KLR 200</li> <li>SRAM: 8MBit, 3.3V, 55ns - ISSI IS62WV51216BLL-55BLI/55BI</li> <li>Micron MT29F4G16ABADAH4 NW197</li> <li> <p>NAND Flash: 4Gb,16bits,3.3V,SPI/ASync</p> </li> <li> <p>KLG 300 Gateway</p> </li> <li>QR Code Payload: Ethernet MAC,  WiFi MAC, UUID, Code</li> </ul> Text Only<pre><code>^P(\\d{1,}W|T(\\d{1,}H(\\d{1,}M(\\d{1,}S)?)?|\\d{1,}M(\\d{1,}S)?|\\d{1,}S)|(\\d{1,}D|\\d{1,}M(\\d{1,}D)?|\\d{1,}Y(\\d{1,}M(\\d{1,}D)?)?)(T(\\d{1,}H(\\d{1,}M(\\d{1,}S)?)?|\\d{1,}M(\\d{1,}S)?|\\d{1,}S))?)#$\n^([+-]?\\d{4,6})-?(\\d\\d)-?(\\d\\d)(?:[ T](\\d\\d)(?::?(\\d\\d)(?::?(\\d\\d)(?:[.,](\\d+))?)?)?( ?[zZ]| ?([-+])(\\d\\d)(?::?(\\d\\d))?)?)?$8\n</code></pre>"},{"location":"devices/#solar-motor-pcb","title":"Solar Motor PCB","text":"<p>PCB Markings: 833436 (Sticker), 833431/04 (PCB Print)</p> Text Only<pre><code>  1  0  0  0  1  0\n      __       __---SOLAR\n  |  |  |  |  |  |\n  |  |  |  |  |  |\n  |  |__|  |_____|\n  |  GRND  |     |\n  |4-P-I-N |  |  |\n  |  |  |  |  |  |\n  R  S  B  G  SOLAR\n  1  2  3  4\n     |  |  |\n     |__|__|\n</code></pre>"},{"location":"devices/#other-vendors","title":"Other Vendors","text":""},{"location":"devices/#roma-romapad-tahomapad-io","title":"Roma RomaPad / TaHomaPad io","text":"<ul> <li>ID: 00:0A:EB:3E:7D:64 - SW Version: 5109529A013</li> <li>Kernel Version: Linux 2.6.35.3-571-gcca29a0 (factory@factory-laptop) (gcc-version: 4.4.4 (4.4.4_09.06.2010))</li> <li> </li> <li>Product Software Version: 5109529A020</li> <li>DB Hardware Version: 5102951A001</li> <li>DB Software Version: 5103448A016</li> <li>VmRSS: 76888 kB</li> <li>Sat Jan 1 00:16:39 2000</li> <li>Internal Settings: Einstellungen / System/ Login / Passwort: INSTAL / Software Verwaltung</li> <li>ID: 00:0A:EB:3E:7D:F6 - SW Version: 5109529A013</li> <li> <p>ID: 00:0A:EB:3E:7E:98 - SW Version: 5109259A018</p> </li> <li> <p>Software</p> </li> <li>Romapad Update Checker v1.0.17.1<ul> <li>Download</li> <li>Download 1.0.18.0</li> <li>http://padupdate.roma.de/RomapadUpdateChecker_Package_v1.0.0.0.exe</li> <li>http://padupdate.roma.de/RomapadUpdateChecker_Package_v1.0.10.0.exe</li> <li>https://web.archive.org/web/20130518032046/http://padupdate.roma.de/RomapadUpdateChecker_Package_v1.0.0.0.exe</li> <li>https://web.archive.org/web/20140701223938/http://padupdate.roma.de/RomapadUpdateChecker_Package_v1.0.10.0.exe</li> <li>https://web.archive.org/web/20150317224215/http://padupdate.roma.de/RomapadUpdateChecker_Package_v1.0.16.0.exe</li> <li>https://web.archive.org/web/20180418024112/http://padupdate.roma.de/RomapadUpdateChecker_Package_v1.0.17.0.exe</li> <li> </li> </ul> </li> </ul>"},{"location":"devices/#308-preempt-mon-oct-17-143429-hkt-2013","title":"308 PREEMPT Mon Oct 17 14:34:29 HKT 2013","text":""},{"location":"devices/#httpswebarchiveorgweb20180315095745httpftpromadepadupdateromapadupdatechecker_package_v10180exe","title":"https://web.archive.org/web/20180315095745/http://ftp.roma.de/padupdate/RomapadUpdateChecker_Package_v1.0.18.0.exe","text":""},{"location":"firmware/","title":"io-homecontrol Firmware","text":"<p>Note: If you can provide firmware images, you can share them here (file an issue) or via Discord/Telegram ;)_</p> <p>This document and it's corresponding folder provide information about the available firmware binaries. It does not hold information about reversing those binaries. Please refer to the reverse-engineering.md section and dont't forget to grab the provided SVDs...</p> <p>Most of this stuff documents Somfy related images as there are no Velux images :(</p>"},{"location":"firmware/#overview","title":"Overview","text":"<p>The STM32 firmware is based on uC/OS II with a custom Somfy HAL and uses the official STM32 Standard Peripheral Library.</p> <p>Other firmware used by Overkiz is based on ContikiOS.</p> <ul> <li>Somfy uses mostly STM32F101RCT6 in Gateways, Remotes and Actuators.</li> <li>Velux uses mostly SiLabs EFR/EFM series.</li> <li> <p>Head over to the Devices section where this information is collected.</p> </li> <li> <p>Somfy/Overkiz Firmware Naming Scheme: <code>$usage-[$type]-$mcu-$datetime.$ext</code></p> </li> <li> <p>$usage: rf protocol or usage</p> </li> <li>$type is optional and can be one of three:</li> <li>$type=\"\"    : Bootloader+Padding+Application</li> <li>$type=\"boot\": Bootloader</li> <li>$type=\"app\" : Application</li> <li>$ext is one of three known extensions:</li> <li>bin = unencrypted binary image</li> <li>sec = encrypted binary image</li> <li>seb = decrypted binary image</li> </ul>"},{"location":"firmware/#bootloader-type","title":"Bootloader Type","text":"<p>Get Bootloader Type: <code>stm32-helper-generic /dev/$tty -r 3 -b 115200 | head -n 1</code></p> <p>Known Bootloader Types:</p> <ul> <li>Ideal RF</li> <li>02EB02 !!! Possible Si4461 Firmware Patch Address?</li> <li>02EB03</li> </ul>"},{"location":"firmware/#firmware-data","title":"Firmware Data","text":"<p>This section of data can be found in every firmware (io-homecontrol, RTS, IdealRF, etc.) from Somfy/Overkiz.</p> <p>It consists of the following values: - Default Serial Number: <code>SN12345678</code> - Default Test Parameter: <code>abcdefghijklm</code> - Default Calibration Data: <code>0E4EC40EBD0B0F4AD4</code> - Bootloader Type: <code>000000</code></p> <p>These values can be found at the end of the firmware and is in the following form:</p> <p><code>$SN$TstParam$Cal$BootloaderType = SN12345678abcdefghijklm0E4EC40EBD0B0F4AD4000000</code></p> <p>RTS Data</p> Bash<pre><code>00 30 00\n08 00 53\n4E 00 00\n00 00 00\n00 00 00\n00 04 08\n0C 10 14 # Test Parameter\n00 00 00 # Test Parameter\n0E 4E C4 # Calibration Data\n0E BD 0B # Calibration Data\n0F 4A D4 # Calibration Data\n00 00 00 # Bootloader Type\n</code></pre>"},{"location":"firmware/#unknown-stuff","title":"Unknown stuff","text":"<p>This peace can be found in the firmware and a Github search reveals that it is being used in regex (eg. base64) - <code>0x18,0x1C,0x20,0x24,0x28,   0,   0,   0,0x40,0x44,0x48,0x4C,0x50,0x54,0x58,   0</code></p> <p>Another comment points to this:</p> Python<pre><code>SEQUENCE_LENGTH = 80  # from McMahan et al AISTATS 2017\n# Vocabulary re-used from the Federated Learning for Text Generation tutorial.\n# https://www.tensorflow.org/federated/tutorials/federated_learning_for_text_generation\nCHAR_VOCAB = list(\"dhlptx@DHLPTX $(,048cgkoswCGKOSW[_#'/37;?bfjnrvzBFJNRVZ\\\"&amp;*.26:\\naeimquyAEIMQUY]!%)-159\\r\")\n</code></pre>"},{"location":"firmware/#io-homecontrol","title":"io-homecontrol","text":""},{"location":"firmware/#stm32-information","title":"STM32 Information","text":"<ul> <li>Used Registers and Peripherals</li> <li>RAM: 20008000 ?? IMPORT RAM_20008000</li> <li>RAM: 2000FFFE</li> <li>TIM3  : 40000400 40000450</li> <li>TIM6  : 40001000 40001030</li> <li>IWDG  : 40003000 40003010</li> <li>SPI2  : 40003800 40003824</li> <li>USART2: 40004400 4000441C</li> <li>USART3: 40004800 4000481C</li> <li>UART4 : 40004C00 40004C18</li> <li>UART5 : 40005000 40005018</li> <li>BKP   : 40006C00 40006CBC</li> <li>PWR   : 40007000 40007008</li> <li>AFIO  : 40010000 40010020</li> <li>EXTI  : 40010400 40010418</li> <li>GPIOA : 40010800 4001081C</li> <li>GPIOB : 40010C00 40010C1C</li> <li>GPIOC : 40011000 4001101C</li> <li>???  : 40011400 400123FE</li> <li> <p>FEHLT : 40021000</p> </li> <li> <p>TIM1 : 40012C00 40012C50</p> </li> <li>SPI  : 40013000 40013024</li> <li>TIM8 : 40013400 40013450</li> <li>UART1: 40013800 4001381C</li> <li>TIM9 : 40014C00 40014C3C</li> <li>RCC  : 40021000 40021028</li> <li>Flash: 40022000 40022024</li> <li>STK  : E000E010 STK : E000E01C</li> <li>NVIC : E000E100 NVIC: E000E438</li> <li>SCB  : E000ED00  SCB: E000ED38</li> </ul>"},{"location":"firmware/#20210310142941","title":"20210310142941","text":"<p><code>Origin: at91-kizboxmini-2021.2.4-11 (Connexoon) | MCU: STM32</code></p> Python<pre><code>APP = io-homecontrol-stm32-20210310142941.bin\nBIN = io-homecontrol-boot-stm32-20210310142941.bin\nMD5 = F8F83A7CBBF1F51BDA51838A52DA3620\n\n0x8000000:0x27FF  # Bootloader\n0x8002800         # Application\n0x8003000:0x1F400 # ???\n0x803C000:0x0C    # Calibration Data\n0x803FF00-0x8040000 (0x00100) # MD5 Reserved Space\n0x8003000-0x803FFF0 (0x3CFF0) # MD5 Calculation Space\n0x803FFF0-0x803FFFF (0xF) # MD5\n</code></pre> <p>ROM:08029AB4 RFChipSetPowerStatus \"RF_Chip_SetPowerStatus\"; XREF: ROM_8025030+8\u2191o,ROM_8025070\u2191o ; #Signsrch \"AES Rijndael S / ARIA S1 [..256]\" ROM:08029AF4</p> <p>1W Key: 0x0F,0x28,0x0F,0x00,0x01,0x36,0x00,0x08,0xF1,0x35,0x00,0x08</p> <p>0F28 0F00 0136 0008 F135 0008</p> Text Only<pre><code>     0xF,0x28,0xF,0,1,0x36,0,8,0xF1,0x35,0,8\n</code></pre>"},{"location":"firmware/#ideal-rf","title":"Ideal RF","text":"<p>This image is quite interesting as it seems to be for RF calibration and has the ability to enable USART on the STM32.</p>"},{"location":"firmware/#v000147","title":"V00.01.47","text":"<p><code>Origin: at91-kizboxmini-2021.2.4-11 (Connexoon) | MCU: STM32</code></p> Python<pre><code>APP = idealrf-app-stm32-V00.01.47.bin\nBIN = idealrf-boot-stm32-V00.01.47.bin\nIDEAL_TMP_FILE_CALIB = $PERSISTENTDIR_APPS/ideal_calib_tmp.bin\n\n0x8000000:0xC000  # Bootloader\n0x800C000:0x1F400 # Application\n0x803C000:0x0C    # Calibration Data\n\n0E4EC4 0EBD0B 0F4AD4 000000      # STM32 Default Calibration # NOTE: Last 6 digits are always 0\n7A6958 7B6BD5 1C8ADF 2C4DF0 A9F638 5F # MD5 of Application\n\n02EB02 # Bootloader Type 1\n02EB03 # Bootloader Type 2\n</code></pre>"},{"location":"firmware/#idealrf-scripts","title":"idealrf Scripts","text":"<p>Some interesting tidbits can be found in the decompiled luajit files...</p> <ul> <li><code>handlePayload()</code></li> </ul> Bash<pre><code># POD_SERIAL=\"0815-2380-2650\"\n$POD_SERIAL=\"$(sed -En 's/.*CN=(([0-9]{4}-?){3}).*/\\1/p' /etc/security/client.crt 2&gt; /dev/null)\"\n# luajit pseudo code for better readability\n$UID=ToUint32LE(0x60000000 + (({os.getenv(\"POD_SERIAL\"):sub(1, 9):gsub(\"%-\", \"\")})[1] or 0)))\n$UID=ToUint32LE(0x60000000 + (({0815,2380,2650})[1] or 0))) # UID=1610613551 (0x60000000 + 0815)\n</code></pre>"},{"location":"firmware/#rtx-rtsrtnrtsd","title":"RTx (RTS/RTN/RTSD)","text":"<p>These images handle the RTx stuff. RTx means RTS, RTN, RTD, RTDS, etc.</p>"},{"location":"firmware/#20181107104342","title":"20181107104342","text":"<p><code>Origin: at91-kizboxmini-2021.2.4-11 (Connexoon) | MCU: STM32</code></p> Bash<pre><code>APP_BINARY = /apps/overkiz/share/rtx/bin/all-stack-stm32-20181107104342.bin\nBINARY     = /apps/overkiz/share/rtx/bin/all-stack-boot-stm32-20181107104342.bin\nMD5        = A8F8C4643AC1EC9585B51950FBD49F95\n\n0x8000000                      # Bootloader\n0x8002800                      # Application\n0x8003000-0x803FFF0 (0x3CFF0)` # MD5:CalculactionSpace(Application)\n0x803FF00-0x8040000 (0x00100)` # MD5:ReservedSpace(\"Saved\")\n0x803FFF0:0x0F`                # MD5:ActualApplication\n0x803C000:0x0C`                # Calibration Data\n</code></pre>"},{"location":"firmware/#velux","title":"Velux","text":""},{"location":"firmware/#efm32","title":"EFM32","text":""},{"location":"firmware/#silabs-threads","title":"SiLabs Threads","text":"<p>This is a thread from a Velux employee asking about one of the bootloaders which seems to be used by the KLR200/KLR300 devices. It even includes a AES decryption key which seems to be a placeholder but if anyone wants to try i am happing to report the results here.</p> <p>Download C548874603 Files</p> <ul> <li>C548874603 (VELUX A/S) asked a question: What version gecko-sdk should I choose for updating standard bootloader for EFM32GG230F512? <p>I have copied the uart bootloader source code from <code>an0003_efm32_uart_bootloader</code>. I want to make some changes and use it with EFM32GG230F512. It seems, from information in the application note, that the included bin files are built using Gecko-SDK 1.0. If I open a new project in Simplicity Studio and select EFM32GG230F512, then SDK Version 3.2 is downloaded. So my question is: which sdk version should I use when I make my changes in the bootloader code, to make sure it runs on EFM32GG230F512? Or which versions can I use? Are there any restrictions or risk that certain versions will not work properly? I set the project up with Gecko-SDK 3.2. But I have some problems with missing defines. E.g. here:</p> <p></p> <p>Take f.ex. the line: <code>CMU-&gt;HFPERCLKEN0 |= DEBUG_USART_CLOCK;</code>. <code>DEBUG_USART_CLOCK</code> is defined in <code>config.h</code>:</p> C++<pre><code>/******************************************************************************\n * USART used for debugging.                         *\n ******************************************************************************/\n#if defined(_SILICON_LABS_32B_SERIES_0) &amp;&amp; (defined(_EFM32_GIANT_FAMILY) || defined(_EFM32_WONDER_FAMILY) || defined(_EZR32_LEOPARD_FAMILY))\n#define DEBUG_USART             UART1\n#define DEBUG_USART_CLOCK       CMU_HFPERCLKEN0_UART1\n#define DEBUG_USART_TX_READY() (DEBUG_USART-&gt;STATUS &amp; USART_STATUS_TXBL)\n</code></pre> <p>Here <code>_SILICON_LABS_32B_SERIES_0</code> and <code>_EFM32_GIANT_FAMILY</code> are defined in <code>efm32gg230f512.h</code> which is located in <code>\\gecko-sdk\\code\\platform\\Device\\SiliconLabs\\EFM32GG\\Include</code>.</p> <p>I can find <code>CMU_HFPERCLKEN0_UART1</code> in include files for other processors like e.g. <code>efm32gg280f1024.h</code>.</p> <p>Why is this, and other, defines missing? If I can use any version of Geco-SDK, including 3.2, then I would expect all necessary defines to be present.</p> </li> <li>C548874603 (VELUX A/S) <p>I have run into a new problem with my EFM32GG230F512 project. About 3 years ago I updated the standard bootloader for EFM32G230 to use interrupt driven AES. This works fine.</p> <p>Now I wish to do the same for EFM32GG230F512, but I have hit a problem. In EFM32G230 I have added <code>AES_IRQ</code> to <code>vectorTable</code>:  Where <code>#define AES_IRQ AES_IRQn</code>. <code>AES_IRQn</code> has the value <code>29</code>.  <code>__no_init uint32_t vectorTable[47];</code> in <code>bootloader.c</code>. I tried adding <code>AES_IRQ</code> to <code>vectorTable</code> in the EFM32GG230F512 software, but in <code>efm32gg230f512.h</code> the value of <code>AES_IRQn</code> is increased to <code>36</code> and <code>vectorTable</code> is not correspondingly increased in size:   I tried to increase the size of vectorTable, but that leads to: <code>Error[Lp025]: absolute section .noinit (bootloader.o #12) ([0x2000'00bc-0x2000'00bd]) overlaps with absolute section .noinit (bootloader.o #10) ([0x2000'0000-0x2000'00ef])</code> So how am I to go about using <code>AES_IRQn</code> for the EFM32GG230F512?</p> </li> <li>Is Flags of a OSFlagPost() buffered when \"receiver\" not waiting in the corresponding OSFlagPend()? <p>We use OSFlagPost() to signal a task that interrupt ISR's has been called, to let the task do the \"heavy\" work. Several flags are included in the flag group, to support several interrupts</p> <p>When the task is out of the OSFlagPend() doing work, and an interrupt is fired, Posting a flag into that flag group, will the OSFlagPend() see that flag afterwards or is the flag lost?</p> <p>We have seen some situations where it seems the flag is lost. The interrupt was fired, but the task is not handling the flag. e.g.</p> C++<pre><code>ISR:\n...\n  OSFlagPost(&amp;g_driver_flags, FLAG1, OS_OPT_POST_FLAG_SET, &amp;err);\n...\nTASK:\n...\n  while (DEF_ON) {\n    flags = OSFlagPend(&amp;g_driver_flags, /*  Pointer to user-allocated event flag. */\n            DRIVER_FLAG_EVENT_ALL,      /*  Flag bitmask to match.        */\n            0,                          /*  Wait OS Ticks maximum, 0 = no timeout */\n            OS_OPT_PEND_FLAG_SET_ANY |  /*  Wait until one of the flags are set  */\n            OS_OPT_PEND_BLOCKING   |    /*  task will block and          */\n            OS_OPT_PEND_FLAG_CONSUME,   /*  function will clear the flags.    */\n            DEF_NULL,                   /*  Timestamp is not used.        */\n            &amp;err);\n    if(err.Code == RTOS_ERR_NONE) {\n      if((flags &amp; FLAG1) == FLAG1) { }\n      if((flags &amp; FLAG2) == FLAG2) { }\n      if((flags &amp; FLAG3) == FLAG3) { }\n      if((flags &amp; FLAG4) == FLAG4) { }\n      if((flags &amp; FLAG5) == FLAG5) { }\n    }\n    else { FATAL_ERROR; }\n  }\n</code></pre> </li> </ul>"},{"location":"devices/Thermor/","title":"Index","text":"<p>Set 0c61 01xx FF Get 0c60 01xx FF</p> Text Only<pre><code>Message 0c61 0100       02 Mode (is prog)\n        0c60 0100       00 Mode (is auto)\n        0c60 0100       04 Mode (is off )\nMessage 0c61 0101       01 \n        0c60 0101       00\nMessage 0c61 0102       04 \n        0c60 0102       0401\nMessage 0c61 0103       CD Temp (20.5\u00b0C) WARNING 0xFF set 53.5\u00b0C\n        0c60 0103       c300 (19.5)\nMessage 0c61 0104       23 Abaissement max T\u00b0ECO (3.5\u00b0C)\n        0c60 0104       2300 (3.5)\nMessage 0c61 0105       28 Abaissement Mode auto (4.0\u00b0C/3.0/2.0)  \n        0c60 0105       2800 (4.0)\nMessage 0c61 0106       01\n        0c60 0106       01\nMessage 0c61 0107       00\n        0c60 0107       00\nMessage 0c61 0108       00\n        0c60 0108\nMessage 0c61 0109...0B -&gt; 00\n        0c60 0109       000000\n        0c60 010a       00\n        0c60 010b       00\n(12)    0c61 010C       00 Pilotage Interne/Externe\n        0c60 010c       00\nMessage 0c61 010D       00\n        0c60 010d       01\nMessage 0c61 010E       01 Window Detection\n        0c60 010e       00\n(15)    0c61 010F       0D Date/Time (13) ? seconds\n        0c60 010f       00 1a 0c 0b 05 0b e7 07 12:26 11/11/2023 (26) (12) (11)(05 SATurday)(11) (231)\n        0c60 010f       08 0e 09 0d 01 02 e8 07\nMessage 0c61 0110...13 -&gt; 00\n        0c60 0110    00\n        0c60 0111\n        0c60 0112\n        0c60 0113\n\n(20)    0c60 0114       6809 (104)(09)\n        0c60 0114       9509\n        0c60 0114       a608\n        0c60 0114       1815\n(21)    0c61 0115       34 (52) ? \n        0c60 0115       1b08\n        0c60 0115       5906\nMessage 0c61 0116       01 (01) ? \n(22)    0c60 0116       25d5 (9685) Incremented value only when ON (hours of usage ?)\n        0c60 0116       2660 (9824)\n        0c60 0116       266a (9834)\nMessage 0c61 0117       01 (01) ? \n(23)    0c60 0117       01\n\nMessage 0c61 0118       54 (84) ? \n(24)    0c60 0118       54\nMessage 0c61 0119       \n(25)    0c60 0119       4f 56 41 54 49 4f 4e 20 33 20 56 00 00 00 00 00 00 (O V A T I O N 3 V)\nMessage 0c61 011A       D0 \n(26)    0c60 011a       d007e6\nMessage 0c61 011B...1D -&gt; 00\n        0c60 011b       e60000000000ff\n        0c60 011c       e60000000000ff\n        0c60 011d       0000\nMessage 0c61 011E       00 Mode Program date &amp; time - if FF 0x1E\n(30)    0c60 011e       57 04 04 04 04 04 04\nMessage 0c61 011e       05 0c 2c 00 00 00 00 00 00 00 00 -&gt; 05 Samedi, 06h-&gt;22h Confort\nMessage 0c61 011e       01 0A 12 22 2E 00 00 00 00 00 00 -&gt; 00-&gt;06 day of week \n                           0x0A SHR1 = 05H / 0x12 SHR1 = 09H / 0x22 SHR1 = 17H / 0x2E SHR1 = 23H\n\nMessage 0c61 011F   04 \n        0c60 011f   04\nMessage 0c61 0120...25 -&gt; 00\n\nMessage 0c61 0126       0B (11) ?\n        0c60 0126       07\nMessage 0c61 0127...29 -&gt; 00\n        0c60 0127       1a00\n        0c60 0128       02\n</code></pre> <p>Unpair devices ??? 14:28:18.760 &gt; (13) 2W S 1 E 0  FROM 477706 TO 8CCB31 CMD 20 +0.000 F868.950     &lt;  DATA(05)  0c61012901 14:28:18.769 &gt; (14) 2W S 0 E 0  FROM 8CCB31 TO 477706 CMD 3C +9.392 F868.950     &lt;  DATA(06)  8a74d912860a 14:28:18.777 &gt; (14) 2W S 0 E 0  FROM 477706 TO 8CCB31 CMD 3D +9.173 F868.950     &lt;  DATA(06)  d2f08d3aceb4 14:28:18.786 &gt; (13) 2W S 0 E 1  FROM 8CCB31 TO 477706 CMD 21 +8.629 F868.950     &lt;  DATA(05)  0c61012901</p> Text Only<pre><code>(42)    0c61 012A      CD (205) ? Temp  WARNING 0xFF set 89.5\u00b0C\n        0c60 012a      c300 (195) Temp\n(44)    0c61 012c\n        0c60 012c      02 8ccb31 9c f8 24 00 01 00 (powerOn answer paired 8ccb31)\n        0c60 012c      02 8ccb31 96 4a 1e 00 01 00\n        0c60 012c      02 8ccb31 2c 73 23 00 01 00\n        0c60 012c      00 000000 e2 96 05 00 01 00 (09:43 11/03/2024)\n        0c60 012c      00 000000 9d 6d 05 00 01 00 (09:45 11/03/2024)\n        0c60 012c      00 000000 55 98 05 00 01 00\n(45)    0c61 012D       \n        0c60 012d       477706 (master device 477706)\n        0c60 012d       8ccb30\nMessage 0c61 012E       04  ?\n        0c60 012e       04\n        0c60 012f       4e(78)  1c(28)\n        0c60 012f       7e(126) 1c\nMessage 0c61 0130...35 -&gt; FE 80\n(48)    0c60 0130       cd(205) 00 23(35) 00 28(40) 00 00 00 18(24) 01 02 01 01 00 00 00 00\n        0c60 0130       c3 00 23 00 28 00 00 00 04 01 04 00 01 02 00 00 00 Midnight (19.5) (3.5) (4.0)\n        0c60 0130       c8 00 23 00 28 00 00 00 04 01 04 00 01 02 00 00 00 Midnight (20.0) (3.5) (4.0)\n</code></pre> <p>SAME : Message 0c61 011e       01        0A 12 22 2E 00 00 00 00 00 00 -&gt; 00-&gt;06 day of week                          MA   0x0A SHR1 = 05H / 0x12 SHR1 = 09H / 0x22 SHR1 = 17H / 0x2E SHR1 = 23H             0c60 0131(49)   00 4b ff 00 00 00            00 0b 11 1c 2d 00 00                             LU 37                        LU  5  8 14 22             0c60 0131       00 00 00 00 00 00            00 0a 12 22 2e 00 00                             LU                           LU  5  9 17 23             0c60 0132(50)   01 0b 11 1c 2d 00 00         02 0b 11 1c 2d 00 00                             MA  5  8 14 22               ME  5  8 14 22             0c60 0132       01 0a 12 22 2e 00 00         02 0a 12 22 2e 00 00                             MA  5  9 17 23               ME  5  9 17 23             0c60 0133(51)   03 0b 11 1c 2d 00 00         04 0b 11 1c 2d 00 00                             JE  5  8 14 22               VE  5  8 14 2             0c60 0133       03 0a 12 22 2e 00 00         04 0a 12 22 2e 00 00                             JE  5  9 17 23               VE  5  9 17 23             0c60 0134(52)   05 0c 2c 00 00 00 00         06 0c 2c 00 00 00 00 00 00                             SA  6 16                     DI  6 16             0c60 0134       05 0a 2e 00 00 00 00         06 0a 2e 00 00 00 00 00 00                             SA  5 23                     DI  5 23 </p> Text Only<pre><code>Message 0c61 0136...FF -&gt; 00\n</code></pre> <p>0c60100 (02) 0c60c01 (01) 0c600102 ff 0c600102 1801 (24) (01) 0c600103 ff 0c600103 cd 00 (20.5\u00b0C) (00) T\u00b0 Actuelle 0c600104 ff 0c600104 23 00 (3.5\u00b0C) (00) T\u00b0 Eco 0c600105 28 00 (4.0\u00b0C) (00) T\u00b0 Auto 0c600109 00 4b ff (00) (75) (FF)</p> <p>0c600115 1b08 (27)(08) 0c600116(22) 0167 (01)(103) 0c600130     cd      00 2300      28000000        04     010000   01  02000000 0c600130(48) cd(205) 00 23(35) 00 28(40) 00 00 00 18(24) 01 02 01 01 00 00 00 00     0c600130 c8(200) 00 23(35) 00 1e(30) 00 00 00 04(04) 01 00 00 01 02 00 00 00</p>"},{"location":"devices/Velux/KLI31x/","title":"Velux KLI 313 - Wall mounted Remote Control for Outer Sun Blind","text":"<p>KLI 310/311/312/312 use probably the same hardware just with different cases and modified software (if the software is modified at all)</p> <ul> <li> <p>Data Sheet (German)</p> </li> <li> <p><code>3LI D13 WW</code></p> </li> <li>Model: <code>BG-RC011-01</code></li> <li><code>20BK05B</code></li> <li><code>831646</code></li> </ul>"},{"location":"devices/Velux/KLI31x/#hardware","title":"Hardware","text":"<ul> <li>Board <code>831491/03</code></li> <li> <p>PCB size: 68,75mm x 74,2mm</p> </li> <li> <p>Silicon Labs <code>EFR32FG1P133F256GM48</code> MCU</p> </li> <li>Manufacturer Site</li> <li>Data Sheet</li> <li>Reference Manual</li> </ul>"},{"location":"devices/Velux/KLI31x/#debug-interface","title":"Debug Interface","text":"<ul> <li>Pitch = 1.27 mm</li> </ul> Text Only<pre><code>        +-----------------------------+\n        |                             |\n        |                             |\n        |                             |\n        |                             |\n        |                             |\n        |                             |\n        |                             |\n        |  +----------------+         |\n        |  | 2  4  6  8  9  |         |\n        |  |                |         |\n        |  | 1  3  5  7  10 |         |\n        |  +----------------+         |\n+-------+                             +-------+\n|                                             |\n|                                             |\n|                                             |\n+---------------------------------------------+\n</code></pre> <ul> <li>Debug Pin 1 $\\rightarrow$ MCU Pin 24 $\\rightarrow$ <code>PD15</code> $\\rightarrow$ <code>DBG_SWO</code></li> <li>Debug Pin 2 $\\rightarrow$ <code>GND</code></li> <li>Debug Pin 3 $\\rightarrow$ MCU Pin 1 $\\rightarrow$ <code>PF0</code> $\\rightarrow$ <code>DBG_SWCLKTCK</code></li> <li>Debug Pin 4 $\\rightarrow$ MCU Pin 32 $\\rightarrow$ <code>PB12</code></li> <li>Debug Pin 5 $\\rightarrow$ MCU Pin 2 $\\rightarrow$ <code>PF1</code> $\\rightarrow$ <code>DBG_SWDIOTMS</code></li> <li>Debug Pin 6 $\\rightarrow$ MCU Pin 12 $\\rightarrow$ <code>RESETn</code></li> <li>Debug Pin 7 $\\rightarrow$ MCU Pin 47 $\\rightarrow$ <code>PC10</code></li> <li>Debug Pin 8 $\\rightarrow$ MCU Pin 43 $\\rightarrow$ <code>PC6</code></li> <li>Debug Pin 9 $\\rightarrow$ MCU Pin 27 $\\rightarrow$ <code>PA2</code></li> <li>Debug Pin 10 $\\rightarrow$ <code>VCC</code> @ 3V $\\rightarrow$ Probably VCC, not sure though</li> </ul>"},{"location":"devices/Velux/KLR200/","title":"Velux KLR200","text":""},{"location":"devices/somfy/","title":"Box PIN Mapping: PINs to Devices","text":"<p>Mostly complete list of Overkiz Box Types and their Sub Types, Protocols and mDNS names as RegEx.</p> <ul> <li>Abbreviations</li> <li>OGP: Online Gateway Protocol</li> <li>OVP: Overkiz Protocol</li> <li>IO: io-homecontrol</li> <li> <p>RTD(S)/RTN/RTW: RTS Protocol derivates</p> </li> <li> <p>Protocol Lists</p> </li> <li>All: Aurora, Axis, Cam, EnOcean, IO, Jaga, KNX, ModBus, OGP, OVP, ProfaLux 868, Ramses, RTD(S), RTN, RTS, RTW, Sauter, Wavenis, WmBus, xComfort, Yokis, ZigBee, zWave</li> <li>Std: Aurora, Cam, EnOcean, IO, KNX, ModBus, OVP, Ramses, RTx, Sauter, WmBus, Yokis, zWave<ul> <li>Std 1 = Std + OGP, ProfaLux 868, RTN, xComfort, ZigBee</li> <li>Std 2 = Std + Axis, Jaga, Wavenis</li> <li>Std 3 = Cam, EnOcean, IO, KNX, ModBus, OVP, Ramses, ZigBee, zWave</li> </ul> </li> </ul> # SYS TYPE SUB TYPE REGEX PROTOCOLS 000 KizBoxV1Virtual <code>^VIRT-\\d{3}$</code> See All 001 Linkki <code>^LINKI(-\\d{4}){3}$</code> IO, RTS 002 KizBoxV1 <code>^02\\d{2}(-\\d{4}){2}$</code> See Std 2 003 VITTYMediaBusController MediaBus 006 STM32 <code>^STP\\d{5}$</code> META 007 SomfyBox <code>^02\\d{2}(-\\d{4}){2}$</code> See Std 2 008 TahomaLiberty <code>^02\\d{2}(-\\d{4}){2}$</code> See Std 2 009 ZenBoxControl <code>^023\\d(-\\d{4}){2}$</code> See Std 2 010 BDRThermeaBox <code>^024\\d(-\\d{4}){2}$</code> See Std 2 011 JagaBox <code>^02\\d{2}(-\\d{4}){2}$</code> Jaga 012 EEBusGateway <code>^EEBUS*</code> EEBus 013 ZenBoxMonitoring <code>^023\\d(-\\d{4}){2}$</code> Cam, EnOcean, IO, OVP, Ramses, RTx, WmBus, zWave 014 KizBoxTCPEAP <code>^02\\d{2}(-\\d{4}){2}$</code> See Std 2 015 Tahoma <code>^02\\d{2}(-\\d{4}){2}$</code> See Std 2 015 Tahoma BASIC <code>^02(00|01)(-\\d{4}){2}$</code> See Std 2 015 Tahoma BASIC_PLUS <code>^02(01|02)(-\\d{4}){2}$</code> See Std 2 015 Tahoma HITACHI_BOX <code>^02(04|05)(-\\d{4}){2}$</code> See Std 2 015 Tahoma MAROC_TELECOM <code>^02(06|07)(-\\d{4}){2}$</code> See Std 2 015 Tahoma MONDIAL_ASSISTANCE <code>^02(05|06)(-\\d{4}){2}$</code> See Std 2 015 Tahoma PREMIUM <code>^02(02|03)(-\\d{4}){2}$</code> See Std 2 015 Tahoma PRO <code>^02(09|14)(-\\d{4}){2}$</code> See Std 2 015 Tahoma SECURITY_PRO <code>^02(11|16)(-\\d{4}){2}$</code> See Std 2 015 Tahoma SECURITY_SHORT_CHANNEL <code>^02(10|15)(-\\d{4}){2}$</code> See Std 2 015 Tahoma SHORT_CHANNEL <code>^02(08|13)(-\\d{4}){2}$</code> See Std 2 015 Tahoma SOMFY_BOX <code>^02(03|04)(-\\d{4}){2}$</code> See Std 2 015 Tahoma SOMFY_BOX_OLD <code>^02(15|102)(-\\d{4}){2}$</code> See Std 2 015 Tahoma TAHOMA <code>^02(13|100)(-\\d{4}){2}$</code> See Std 2 015 Tahoma TAHOMA_LIBERTY <code>^02(14|101)(-\\d{4}){2}$</code> See Std 2 015 Tahoma TRYBA <code>^02(12|17)(-\\d{4}){2}$</code> See Std 2 015 Tahoma Verisure <code>^02(07|09)(-\\d{4}){2}$</code> See Std 2 016 KizBoxLC <code>^KLC\\d{5}$</code> No Info 017 KizBoxTCPAP <code>^T-02\\d{2}(-\\d{4}){2}$</code> See Std 2 018 TahomaHitachi <code>^02\\d{2}(-\\d{4}){2}$</code> See Std 2 019 RexelEnergeasyConnect <code>^02\\d{2}(-\\d{4}){2}$</code> See Std 2 020 X VerisureAlarmSystem <code>^VSURE-\\d{2}-*</code> Verisure 021 KizBoxMini433Mhz <code>^04\\d{2}(-\\d{4}){2}$</code> Cam, EnOcean, KNX, Ramses, RTx, ZigBee, zWave 022 HitachiHLinkWifiGateway <code>^05\\d{2}(-\\d{4}){2}$</code> HLRR WiFi 023 SWFHomeAutomationBridge <code>^06\\d{2}(-\\d{4}){2}$</code> IO SWF 024 KizBoxV2 <code>^11\\d{2}(-\\d{4}){2}$</code> Cam, KNX, RTx, zWave 025 X MyFoxAlarmSystem <code>^MYFOX-*</code> MyFox 026 Atlantic <code>^02\\d{2}(-\\d{4}){2}$</code> See Std 2 027 KizBoxMiniWmBus <code>^07\\d{2}(-\\d{4}){2}$</code> Cam, EnOcean, KNX, Ramses, WmBus, zWave 028 KizBoxMiniIO <code>^08\\d{2}(-\\d{4}){2}$</code> See Std 3 029 TahomaV2 <code>^12\\d{2}(-\\d{4}){2}$</code> See Std 1 029 TahomaV2 BASIC <code>^12(00|01)(-\\d{4}){2}$</code> See Std 1 029 TahomaV2 BASIC_PLUS <code>^12(01|02)(-\\d{4}){2}$</code> See Std 1 029 TahomaV2 HITACHI <code>^12(04|05)(-\\d{4}){2}$</code> See Std 1 029 TahomaV2 MAISON_AVENIR_TRADITION <code>^12(11|12)(-\\d{4}){2}$</code> See Std 1 029 TahomaV2 MAROC_TELECOM <code>^12(06|07)(-\\d{4}){2}$</code> See Std 1 029 TahomaV2 MONDIAL_ASSISTANCE <code>^12(05|06)(-\\d{4}){2}$</code> See Std 1 029 TahomaV2 MONSIEUR_STORE <code>^12(10|11)(-\\d{4}){2}$</code> See Std 1 029 TahomaV2 PREMIUM <code>^12(02|03)(-\\d{4}){2}$</code> See Std 1 029 TahomaV2 PRO <code>^12(13|14)(-\\d{4}){2}$</code> See Std 1 029 TahomaV2 RATIONEL <code>^12(19|20)(-\\d{4}){2}$</code> See Std 1 029 TahomaV2 SECURITY_PRO <code>^12(15|16)(-\\d{4}){2}$</code> See Std 1 029 TahomaV2 SECURITY_SHORT_CHANNEL <code>^12(14|15)(-\\d{4}){2}$</code> See Std 1 029 TahomaV2 SERENITY <code>^12(07|08)(-\\d{4}){2}$</code> See Std 1 029 TahomaV2 SERENITY_PREMIUM <code>^12(09|10)(-\\d{4}){2}$</code> See Std 1 029 TahomaV2 SHORT_CHANNEL <code>^12(12|13)(-\\d{4}){2}$</code> See Std 1 029 TahomaV2 SOMFY_BOX <code>^12(03|04)(-\\d{4}){2}$</code> See Std 1 029 TahomaV2 TRYBA <code>^12(16|17)(-\\d{4}){2}$</code> See Std 1 029 TahomaV2 VELFAC <code>^12(18|19)(-\\d{4}){2}$</code> See Std 1 029 TahomaV2 Verisure <code>^12(08|09)(-\\d{4}){2}$</code> See Std 1 029 TahomaV2 WHITE_LABEL <code>^12(17|18)(-\\d{4}){2}$</code> See Std 1 030 KizBoxV23Head <code>^13\\d{2}(-\\d{4}){2}$</code> See Std 1 031 KizBoxV22Head <code>^12\\d{2}(-\\d{4}){2}$</code> See Std 1 032 AtlanticCozyTouch <code>^08\\d{2}(-\\d{4}){2}$</code> See Std 3 033 X DomisHomeSecureAlarmSystem <code>^50\\d{2}(-\\d{4}){2}$</code> Home Secure 034 Connexoon <code>^08\\d{2}(-\\d{4}){2}$</code> See Std 3 + OGP 034 Connexoon MARKILUX <code>^08(05|06)(-\\d{4}){2}$</code> See Std 3 + OGP 034 Connexoon PRO <code>^08(01|02)(-\\d{4}){2}$</code> See Std 3 + OGP 034 Connexoon PRO_ACCESS <code>^08(04|05)(-\\d{4}){2}$</code> See Std 3 + OGP 034 Connexoon PRO_TERRACE <code>^08(03|04)(-\\d{4}){2}$</code> See Std 3 + OGP 034 Connexoon PRO_WINDOW <code>^08(02|03)(-\\d{4}){2}$</code> See Std 3 + OGP 034 Connexoon ROMA_WINDOW <code>^08(06|07)(-\\d{4}){2}$</code> See Std 3 + OGP 034 Connexoon SELT_TWO_UNIVERSES <code>^08(08|09)(-\\d{4}){2}$</code> See Std 3 + OGP 034 Connexoon TAHOMA_BOX <code>^08(11|12)(-\\d{4}){2}$</code> See Std 3 + OGP 034 Connexoon TWO_UNIVERSES <code>^08(00|01)(-\\d{4}){2}$</code> See Std 3 + OGP 034 Connexoon TWO_UNIVERSES_2 <code>^08(09|10)(-\\d{4}){2}$</code> See Std 3 + OGP 034 Connexoon TWO_UNIVERSES_3 <code>^08(10|11)(-\\d{4}){2}$</code> See Std 3 + OGP 034 Connexoon WILSNIOWSKI_ACCESS <code>^08(07|08)(-\\d{4}){2}$</code> See Std 3 + OGP 035 X JSWVideoSystem <code>^JSW(-\\d{4}){3}$</code> JSW 036 CotherniVista <code>^08\\d{2}(-\\d{4}){2}$</code> See Std 3 037 KizBoxMiniDaughterboardIO <code>^09\\d{2}(-\\d{4}){2}$</code> IO, OVP 038 KizBoxMiniDaughterboardZWave <code>^09\\d{2}(-\\d{4}){2}$</code> zWave 039 KizBoxMiniDaughterboardEnOcean <code>^09\\d{2}(-\\d{4}){2}$</code> EnOcean 040 KizBoxRailDin <code>^10\\d{2}(-\\d{4}){2}$</code> See Std 1 041 TahomaV2RTS <code>^10\\d{2}(-\\d{4}){2}$</code> Cam, KNX, OGP, RTx, zWave 041 TahomaV2RTS BASIC <code>^10(00|02)(-\\d{4}){2}$</code> Cam, KNX, OGP, RTx, zWave 041 TahomaV2RTS MAROC_TELECOM <code>^10(02|07)(-\\d{4}){2}$</code> Cam, KNX, OGP, RTx, zWave 041 TahomaV2RTS PREMIUM <code>^10(01|03)(-\\d{4}){2}$</code> Cam, KNX, OGP, RTx, zWave 041 TahomaV2RTS PRO <code>^10(06|14)(-\\d{4}){2}$</code> Cam, KNX, OGP, RTx, zWave 041 TahomaV2RTS SECURITY_PRO <code>^10(08|16)(-\\d{4}){2}$</code> Cam, KNX, OGP, RTx, zWave 041 TahomaV2RTS SECURITY_SHORT_CHANNEL <code>^10(07|15)(-\\d{4}){2}$</code> Cam, KNX, OGP, RTx, zWave 041 TahomaV2RTS SERENITY <code>^10(03|08)(-\\d{4}){2}$</code> Cam, KNX, OGP, RTx, zWave 041 TahomaV2RTS SERENITY_PREMIUM <code>^10(04|10)(-\\d{4}){2}$</code> Cam, KNX, OGP, RTx, zWave 041 TahomaV2RTS SHORT_CHANNEL <code>^10(05|13)(-\\d{4}){2}$</code> Cam, KNX, OGP, RTx, zWave 041 TahomaV2RTS TRYBA <code>^10(09|17)(-\\d{4}){2}$</code> Cam, KNX, OGP, RTx, zWave 041 TahomaV2RTS WHITE_LABEL <code>^10(10|18)(-\\d{4}){2}$</code> Cam, KNX, OGP, RTx, zWave 042 KizBoxMiniModbus <code>^08\\d{2}(-\\d{4}){2}$</code> ModBus, OVP 043 KizBoxMiniOVP <code>^08\\d{2}(-\\d{4}){2}$</code> OVP 044 HitachiHiBox <code>^08\\d{2}(-\\d{4}){2}$</code> ModBus, OVP 045 DeDietrichInternetModuleV2 <code>^08\\d{2}(-\\d{4}){2}$</code> OVP 046 VertuozMDBEnOcean <code>^09\\d{2}(-\\d{4}){2}$</code> EnOcean 047 BouyguesImmobilierFlexomRailDIN <code>^10\\d{2}(-\\d{4}){2}$</code> See Std 1 048 RexelEnergeasyConnectMiniBoxRailDIN <code>^08\\d{2}(-\\d{4}){2}$</code> See Std 1 049 KizBoxMiniIdealRF <code>^08\\d{2}(-\\d{4}){2}$</code> IdealRF 050 FlaktwoodsCuro <code>^08\\d{2}(-\\d{4}){2}$</code> ModBus, OVP 051 ComapMiniDaughterBoardZWave <code>^09\\d{2}(-\\d{4}){2}$</code> Sauter, zWave 052 MyUbiwizzUbiboxRailDIN <code>^10\\d{2}(-\\d{4}){2}$</code> See Std 1 053 ConnexoonRTS <code>^04\\d{2}(-\\d{4}){2}$</code> Cam, EnOcean, KNX, Ramses, RTx, ZigBee, zWave 053 ConnexoonRTS POLARGOS_ACCESS <code>^04(02|03)(-\\d{4}){2}$</code> Cam, EnOcean, KNX, Ramses, RTx, ZigBee, zWave 053 ConnexoonRTS RTS_ACCESS <code>^04(01|02)(-\\d{4}){2}$</code> Cam, EnOcean, KNX, Ramses, RTx, ZigBee, zWave 053 ConnexoonRTS RTS_DEFAULT <code>^04(03|04)(-\\d{4}){2}$</code> Cam, EnOcean, KNX, Ramses, RTx, ZigBee, zWave 053 ConnexoonRTS RTS_WINDOW <code>^04(00|01)(-\\d{4}){2}$</code> Cam, EnOcean, KNX, Ramses, RTx, ZigBee, zWave 054 X OpenDoorsLockSystem <code>^08\\d{2}(-\\d{4}){2}$</code> OpenDoors 055 KizBoxMini426Mhz <code>^04\\d{2}(-\\d{4}){2}$</code> Cam, EnOcean, KNX, Ramses, RTS, ZigBee, zWave 056 ConnexoonRTSJapan <code>^04\\d{2}(-\\d{4}){2}$</code> Cam, EnOcean, KNX, Ramses, RTS, ZigBee, zWave 057 RexelEnergeasyConnectV2 <code>^12\\d{2}(-\\d{4}){2}$</code> See All plus Home Secure 058 X SomfyProtectSystem <code>^SOMFY_PROTEXT-</code> MyFox 059 X VaillantSystem <code>^VAILLANT-*</code> Vaillant 060 MyUbiwizzUbibox <code>^09\\d{2}(-\\d{4}){2}$</code> EnOcean 061 X NetatmoCamerasSystem <code>^Netatmo_CamS-*</code> Netatmo 062 ConnexoonRTSAustralia <code>^04\\d{2}(-\\d{4}){2}$</code> Cam, EnOcean, KNX, Ramses, RTx, ZigBee, zWave 063 X SomfyThermostatSystem <code>^SOMFY_THERMOSTAT-</code> Somfy Thermostat (I2G) 064 BoxUltraLowCostRTS <code>^14\\d{2}(-\\d{4}){2}$</code> RTS 065 SmartlyMiniDaughterBoardZWave <code>^09\\d{2}(-\\d{4}){2}$</code> zWave 066 SmartlyMiniboxRailDIN <code>^10\\d{2}(-\\d{4}){2}$</code> See Std 1 067 TahomaBee <code>^08\\d{2}(-\\d{4}){2}$</code> RTx, ZigBee 068 X NestSystem <code>^NEST-*</code> Nest 069 ConnexoonRTN <code>^08\\d{2}(-\\d{4}){2}$</code> Cam, EnOcean, KNX, Ramses, RTx, ZigBee, zWave 070 X UrmetSystem <code>^URMET-\\d{6}$</code> Urmet 071 ModbusWifi <code>^14\\d{2}(-\\d{4}){2}$</code> ModBus 072 TahomaRailDIN <code>^10\\d{2}(-\\d{4}){2}$</code> See Std 1 - Cam 073 X NetatmoThermostatSystem <code>^NETATMO_THERMOSTATS-*</code> Netatmo 074 NexityBySomfyRailDin <code>^10\\d{2}(-\\d{4}){2}$</code> IO, OVP, zWave 075 TahomaBeecon <code>^16\\d{2}(-\\d{4}){2}$</code> RTS, ZigBee 076 Smartkiz <code>^16\\d{2}(-\\d{4}){2}$</code> EnOcean, RTS, ZigBee, zWave 077 X EliotSystem <code>^ELIOT-*</code> Eliot 078 SimuBox <code>^12\\d{2}(-\\d{4}){2}$</code> See Std 1 079 MyHigginsASA <code>^04\\d{2}(-\\d{4}){2}$</code> RTW 080 X BFTSystem <code>^BFT-*</code> BFT 081 BFTMiniDaughterBoardZWave <code>^09\\d{2}(-\\d{4}){2}$</code> zWave 082 HomeSetTommaso <code>^09\\d{2}(-\\d{4}){2}$</code> EnOcean 083 AtlanticModbusWifi <code>^15\\d{2}(-\\d{4}){2}$</code> ModBus 084 X AristonSystem <code>^ARISTON-*</code> Ariston 085 RailDINPichet <code>^10\\d{2}(-\\d{4}){2}$</code> ZigBee, zWave 086 SiremModbusWifi <code>^14\\d{2}(-\\d{4}){2}$</code> ModBus 087 X VaillantV2System <code>^VAILLANT_V2-*</code> Vaillant 088 X WiserSystem <code>^WISER-*</code> Wiser 089 X SomfySAVSystem <code>^SOMFY_SAV-*</code> No Info 090 SmartkizIO <code>^16\\d{2}(-\\d{4}){2}$</code> EnOcean, IO, RTS, ZigBee, zWave 091 X SauterSVCSystem <code>^SAUTER_SVC-(.*)-(.*)</code> Sauter SVC 092 X NetatmoSystem <code>^NETATMO-*</code> Netatmo 093 X MullerByNetatmoSystem <code>^NETATMO_MULLER-.*</code> Netatmo 094 EffiUpMiniEnOcean <code>^09\\d{2}(-\\d{4}){2}$</code> EnOcean 095 SmartLivingRailDIN <code>^10\\d{2}(-\\d{4}){2}$</code> See Std 1 096 SmartLivingKizBoxV2 <code>^12\\d{2}(-\\d{4}){2}$</code> See Std 1 097 KizBoxV3 <code>^\\d{4}(-\\d{4}){2}$</code> IO, OGP, OVP, RTS, ZigBee 098 TahomaSwitch <code>^20\\d{2}(-\\d{4}){2}$</code> IO, OGP, OVP, RTS, ZigBee 098 TahomaSwitch TAHOMA_SWITCH_MONSIEUR_STORE <code>^20(00|03)(-\\d{4}){2}$</code> IO, OGP, OVP, RTS, ZigBee 099 ConnectivityKit ConnectivityKit <code>^21(01|02)(-\\d{4}){2}$</code> OGP 099 ConnectivityKit ConnectivityKit <code>^21\\d{2}(-\\d{4}){2}$</code> OGP 099 ConnectivityKit CRUZE <code>^21(02|03)(-\\d{4}){2}$</code> OGP 099 ConnectivityKit ORANGE <code>^21(00|01)(-\\d{4}){2}$</code> OGP 100 PurePassThoughGateway <code>^17\\d{2}(-\\d{4}){2}$</code> No Info 101 OGPGenericBox OGP 102 OGPBrandtGateway <code>^18\\d{2}(-\\d{4}){2}$</code> OGP 103 X DeDietrichSmartTCSystem <code>^DEDIETRICHSTC-*</code> DeDietrichSTC 104 Wisniowski <code>^08\\d{2}(-\\d{4}){2}$</code> IO, UPnP 108 TaHomaV3RailDin <code>^22\\d{2}(-\\d{4}){2}$</code> EnOcean, IO, OVP, RTx, ZigBee 110 TaHomaV3RailDinRts <code>^22\\d{2}(-\\d{4}){2}$</code> RTx, ZigBee 112 AugustSystem <code>^AUGUST-.*</code> August <p>[^1]: The SYS column is a gateway differtiation flag: <code>SYSTEM</code> or <code>BOX</code>. The flags indication is unknown.</p>"},{"location":"devices/somfy/ConnectivityKit/","title":"Somfy - Connectivity Kit","text":"<p>Analysis and Information about the Board Layout, PIN Definitions and ongoing efforts to understand the platform.</p> <pre><code>---\ntitle: Somfy - Connectivity Kit Schema\n---\n%%{init:{\n  \"theme\": \"neutral\",\n  \"fontFamily\": \"monospace\",\n  \"flowchart\": {\"curve\": \"linear\"}}\n}%%\n\nflowchart LR\nsubgraph minikiz[\"Somfy Connectivity Kit\"]\n  direction LR\n  subgraph iohc[\"io-homecontrol\"]\n    direction TB\n    stm32{\"STM32&lt;br&gt;F101RC\"}&lt;--\"UART\"--&gt;si4461{{\"Si 4461\"}}\n    click si4461 \"../../datasheets/silabs-si4461.pdf\" \"Si 4461 Datasheet\"\n    click stm32 \"../../datasheets/stm32-f101rc.pdf\" \"STM32 F101xC Datasheet\"\n  end\n  subgraph wrover[\"ESP32 WROVER-E N8R8 - 2.1\"]\n    direction TB\n    esp32{\"ESP32&lt;br/&gt;D0WD-V3\"}\n    ram[[\"8 MB&lt;br/&gt;RAM&lt;br/&gt;(PSRAM64H)\"]]\n    rom[[\"8 MB&lt;br/&gt;ROM&lt;br/&gt;(XM25QH64C)\"]]\n    esp32&lt;--\"SPI\"--&gt;ram\n    esp32&lt;--\"SPI\"--&gt;rom\n    click esp32 \"../../datasheets/ESP32/esp32-wrover-e-datasheet.pdf\"\n    click ram \"../../datasheets/ESP32/PSRAM64H.pdf\"\n    click rom \"../../datasheets/ESP32/XM25QH64C.pdf\"\n  end\n  subgraph rts[\"RTS\"]\n    direction TB\n    sx1243{{\"SX 1243\"}}\n    click sx1243 \"../../datasheets/semtech/sx1243.pdf\"\n  end\n  iohc&lt;--\"SPI\"--&gt;wrover--\"TWI&lt;br/&gt;(I2C)\"--&gt;rts\nend</code></pre> <p>NOTE: When referencing PCB directions it is always assumed that we are looking at the top of the PCB with the buttons facing towards you like in the pictures.</p>"},{"location":"devices/somfy/ConnectivityKit/#pin-layout","title":"Pin Layout","text":"<p>NOTE: When refering to Pins their Naming Scheme is used and not their actual number on the board itself since this makes mapping to source code and documentation easier ;)</p>"},{"location":"devices/somfy/ConnectivityKit/#esp32-wrover-e-module","title":"ESP32 Wrover-E Module","text":"<p>Note: ESP32 GPIO Summary</p> ESP32GPIO STM32PIN DBGPIN FUNCTION LEFT ESP32 LEFT ROW: 1 - 19 (Top&gt;Bottom) GND 0 3V3 1 EN ChipEnable / Reset VP Button:<code>Prog</code> Button: Right Side VN DBG:1 Bridge Point 1 34 DBG:2 Bridge Point 2 35 DBG:3 Bridge Point 3 32 LED LED:Green 33 LED nc? 25 LED LED:White 26 :grey_question: Debug Port with missing Chip (UART?) 27 :grey_question: Debug Port with missing Chip (UART?) 14 42<code>TX</code> DBG:Rx <code>HSPI_CK</code>/ <code>JTAG TDMS</code> - TestArea3-Bottom 12 LED <code>HSPI_Q</code> / <code>JTAG TDDI</code> - LED-BlueWiFiStrap: LOW for Boot Mode: \"should be kept low when module is on.\" GND 0 13 RTS <code>HSPI_DATA</code>  / <code>JTAG CK</code> - RTS:6CTRL RIGHT STM32 ESP32 RIGHT ROW: 20 - 38 (Top&gt;Bottom) GND 0 23 Button/LED <code>VSPI DATA</code> - Button and LED 22 RTS <code>UART RTS / VSPI WP</code> - UpRight-LeftRTS:2DATA TXD UART:Tx <code>UART TX</code> - UpRight-RightStrap: Debug Output RXD UART:Rx <code>UART RX</code> - UpRight-MiddleStrap: HIGH at Boot Mode 21 DBG:Unknown <code>VSPI HD</code> - Debug RightSide of ESP with 3 Contacts (Top)Function Unknown. Could be used in conjunction with IO2 to select Boot Mode nc nc 19 RTS <code>VSPI Q</code> / <code>UART CTS</code> - RTS:5RST 18 <code>BOOT0</code> STM32:BootMode <code>VSPI CLK</code> 5 UNCORRECT:<code>Reset</code> <code>VSPI CS</code> - Strap: 0 = BootMode nc nc nc nc 4 <code>RESET</code> Button:???/SWD <code>HSPI HD=HOLD</code> Button: Left Side / SWD:1RST 0 Strap <code>CLK OUT</code> - Test2-MiddleStrap: 0 = BootMode 2 Strap <code>HSPI WP=WriteProtect</code> - Test1-MiddleStrap: 0 = BootMode 15 43<code>RX</code> DBG:Tx <code>HSPI CS</code> / <code>JTAG DO</code> - Test3-TopStrap: 1 = Debug Log @ <code>UART TX</code> <p>Note: ESP32 has two I2C channels. Any pin can be set as SDA or SC. Good SPI Explanation ESP32: Boot Mode Selection</p> <p>Note: LED Info could also be found here: https://github.com/Overkiz/esp-idf/commit/b553be8a5d074ec39fa5e2beac14c99eb4932388 Note: It seems Overkiz is using the official ESP bootloader and WebIOPi (Python) to test this (or the STM32) via Serial</p> ESP32 WROVER-E (ESP32-D0WD-V3) GPIO Summary  | GPIO    | STRAP | Comments           | | ------: | :---: | :----------------- | | 00      | 1     | CLK_OUT1           | | `VSPI`  |       | `VSPI`             | | 05      | 1     | VSPICS             | | 18      |       | VSPICLK            | | 21      |       | VSPIHDA            | | 23      |       | VSPIDAT            | | 19      |       | VSPIQPI; U0CTS     | | 22      |       | VSPIWPT; U0RTS     | | `HSPI`  |       | `HSPI`             | | 02      | 0     | HSPIWP             | | 04      |       | HSPIHDA            | | 12      | 0     | JTAG:MTDI; HSPIQPI | | 15      | 1     | JTAG:MTDO; HSPICS  | | 13      |       | JTAG:MTCK; HSPIDAT | | 14      |       | JTAG:MTMS; HSPICLK | | 01      |       | U0TXD; CLK_OUT3    | | 03      |       | U0RXD; CLK_OUT2    | | `NoDef` |       | `NO DEFINITION`    | | 25-27   |       |                    | | 32-33   |       |                    | | `GPI`   |       | `INPUT ONLY`       | | 34-35   |       | GPI                | | 36      |       | GPI; SENSOR_VP     | | 37-38   |       | GPI                | | 39      |       | GPI; SENSOR_VN     | | `N/A`   |       | `NOT USABLE`       | | 06-11   |       | SPI0/1; ROM        | | 16-17   |       | SPI0/1; RAM        |  - **Note**: GPIO34-39 are input only and have no software-enabled pull-up/down!"},{"location":"devices/somfy/ConnectivityKit/#sx1243-pin-out-rts","title":"SX1243 Pin Out (RTS)","text":"<ul> <li>SX1243 Interface: TWI = I2C</li> </ul> SX1243 ESP32 DBGPIN FUNCTION 6: <code>CTRL</code> IO13:<code>HSPI D</code> I2C Data 2: <code>DATA</code> IO22:<code>VSPI WP</code> I2C Chip Select 5: <code>nRESET</code> IO19:<code>VSPI Q</code> RESET Reset <p>Note: On bigger boards the <code>sel</code> Pin is used to set the freq as shown in this example</p> Bash<pre><code>sel = pioB 14 0 = frequency = 433920000 # Not Always connected\nsel = pioB 14 1 = frequency = 433420000 # Not Always connected\n</code></pre>"},{"location":"devices/somfy/ConnectivityKit/#stm32-pin-out","title":"STM32 Pin Out","text":"STM32 Si4462 ESP32 DBG FUNCTION RIGHT 5 TST Can be shorted with 6 6 TST Can be shorted with 5 7:<code>RST</code> IO4:<code>io_reset</code> SWD1: Reset TOP 12:<code>?</code> TBD Boot Mode Selection 13:<code>?</code> TBD Boot Mode Selection 17:<code>?</code> TBD Boot Mode Selection 19:<code>?</code> TBD Boot Mode Selection 20:<code>NSS1</code> 15: <code>SEL</code> SPI <code>SPI1 NSS</code> &lt;&gt; Si4461: <code>SEL</code> 21:<code>CKL1</code> 12: <code>CLK</code> SPI <code>SPI1 CLK</code> &lt;&gt; Si4461: <code>CLK</code> 22:<code>MISO1</code> 13: <code>SDO</code> SPI <code>SPI1 MISO</code> &lt;&gt; Si4461: <code>SDO</code> 23:<code>MOSI1</code> 14: <code>SDI</code> SPI <code>SPI1 MOSI</code> &lt;&gt; Si4461: <code>SDI</code> 28:<code>BOOT1</code> <code>io_boot_1</code> Boot Mode SelectionNOTE: <code>10k Pull Down Resistor</code> 29:<code>SCL</code> 20: <code>GPIO3</code> <code>GPIO3</code> &lt;&gt; USART3_TX / SCL 30:<code>SDA</code> 19: <code>GPIO2</code> <code>GPIO2</code> &lt;&gt; USART3_RX / SDA 31:<code>?</code> TBD 32:<code>?</code> TBD LEFT 33 MODE_SEL SPI2_NSS  / USART3_CK  / SMBA 34 MODE_SEL SPI2_SCK  / USART3_CTS 35 MODE_SEL SPI2_MISO / USART3_RTS 38 MODE_SEL 41:<code>?</code> TBD 42:<code>TXD1</code> IO14:<code>io_usart_tx</code> USART USART1_TX 43:<code>RXD1</code> IO15:<code>io_usart_rx</code> USART USART1_RX 46 SWD5: JTMS-SWDIO (PA13) 48:<code>?</code> TBD BOTTOM 49 SWD4:CLK JTCK-SWCLK (PA14) 50 SWD2:DI JTDI / SPI3_NSS (PA15) 55 SWD3:DO JTDO (PB3) 56 SWD6:RST NJTRST (PB4) 60:<code>BOOT0</code> IO18:<code>io_boot_0</code> BOOT_SEL Boot Mode Selection 62 MODE_SEL Switch: Left <p>Known PIN Names extracted from DTBs (AT91) for the STM32 with iohc firmware: - PB30 io_reset      pioA       = Standard PIN - PC09 io_test_radio pioA  HIGH - PC11 io_boot_0     pioA  HIGH = Standard PIN - PC17 io_boot_1     pioA  HIGH = Standard PIN</p> <p>The STM32 firmware knows different \"modes\" which it can recognize. This information was gathered from the KizOs images. Since there are at least four unknown Pins that could be bridged i would assume that</p> <p>serial rf   at91-gpio PA2 = 0   at91-gpio PA3 = TEST_RADIO: 1   at91-gpio PA5 = BOOT0:      0   at91-gpio PA6 = BOOT1:      0</p> <pre><code>---\ntitle: Somfy Connectivity Kit - Serial Wire JTAG Debug Port (SWJ-DP)\n---\n%%{init:{\"theme\": \"neutral\",\"fontFamily\":\"monospace\",\"flowchart\":{\"curve\":\"linear\"}}}%%\nstateDiagram\n  direction LR\n\n  classDef stm32Pin fill:white\n  classDef headerPin fill:grey\n  class PIN07_RST,PIN50_PA15,PIN55_PB3,PIN49_PA14,PIN46_PA13,PIN56_PB4,NC,GROUND,PIN64 headerPin\n  class RESET,JTDI,JTDO_TRACESWO,JTCK_SWCLK,JTMS_SWDIO,JTRST,VDD_3 stm32Pin\n\n  state \"Somfy Connectivity Kit: Serial Wire JTAG Debug Port (SWJ-DP)\" as Debug_Header\n  state Debug_Header {\n\n  state Left_Row {\n    direction LR\n    PIN07_RST --&gt; RESET\n    PIN50_PA15 --&gt; JTDI\n    PIN55_PB3 --&gt; JTDO_TRACESWO\n    PIN49_PA14 --&gt; JTCK_SWCLK\n    PIN46_PA13 --&gt; JTMS_SWDIO\n  }\n\n  state Right_Row {\n    direction LR\n    PIN56_PB4 --&gt; JTRST\n    NC --&gt; 07_NC\n    GROUND --&gt; 08_GND\n    GROUND --&gt; 09_GND\n    PIN64 --&gt; VDD_3\n  }\n}</code></pre>"},{"location":"devices/somfy/ConnectivityKit/#si446x-pin-out","title":"Si446x Pin Out","text":"<p>Interface: SPI</p> Si4462 STM32 DBG FUNCTION 9:<code>IO0</code> TODO TBD See <code>GPIO_PIN_CFG</code>NOTE: Could be shorted with 11:<code>nIRQ</code> 11:<code>nIRQ</code> See 9:IO0 TBD See <code>GPIO_PIN_CFG</code>NOTE: Could be shorted with 9:<code>IO0</code> 12:<code>SCL</code> 21 SPI <code>CLK</code>  &lt;&gt; Si4461_<code>CLK</code> 13:<code>SDO</code> 22 SPI <code>MISO</code> &lt;&gt; Si4461_<code>SDO</code> 14:<code>SDI</code> 23 SPI <code>MOSI</code> &lt;&gt; Si4461_<code>SDI</code> 15: <code>SEL</code> 20 SPI <code>NSS</code>  &lt;&gt; Si4461_<code>nSEL</code> 16: <code>XOUT</code> XTAL 26 MHz 17: <code>XIN</code> XTAL 26 MHz 19: <code>IO2</code> 30 See <code>GPIO_PIN_CFG</code> 20: <code>IO3</code> 29 See <code>GPIO_PIN_CFG</code> 1: <code>SDN</code> 17 PWR Shutdown <p>GPIO are configured by the GPIO_PIN_CFG command in address 13h Complete list of the GPIO options in the API guide GPIO pins 0 and 1 should be used for active signals such as data or clock GPIO pins 2 and 3 have more susceptibility to generating spurious in the synthesizer than pins 0 and 1</p> SERIAL I2C SPI DESC Clock SCL SCK/SCLK Data TX SDA SDI/MOSI MasterOutSlaveIn Data RX SDO/MISO MasterInSlaveOut CE/nSS/nCS ChipEnable/SlaveSelect/ChipSelect WP WriteProtect"},{"location":"devices/somfy/ConnectivityKit/#bootloader","title":"Bootloader","text":"<p>Bootloader messages from my somewhat broken board...</p> Go<pre><code>13:38:49:290 -&gt; ets Jul 29 2019 12:21:46\n13:38:49:290 -&gt;\n13:38:49:290 -&gt; rst:0x0 (NO_MEAN),boot:0x0 (DOWNLOAD_BOOT(UART0/UART1/SDIO_FEI_FEO_V2))\n13:38:49:306 -&gt; ets_main.c 404\n\n14:00:50:557 -&gt; ets Jul 29 2019 12:21:46\n14:00:50:557 -&gt;\n14:00:50:557 -&gt; rst:0x1 (POWERON_RESET),boot:0x13 (SPI_FAST_FLASH_BOOT)\n14:00:50:563 -&gt; configsip: 0, SPIWP:0xee\n14:00:50:565 -&gt; clk_drv:0x00,q_drv:0x00,d_drv:0x00,cs0_drv:0x00,hd_drv:0x00,wp_drv:0x00\n14:00:50:570 -&gt; mode:DIO, clock div:2\n14:00:50:573 -&gt; load:0x3fff0018,len:4\n14:00:50:576 -&gt; load:0x3fff001c,len:7960\n14:00:50:579 -&gt; load:0x3d234c30,len:-1713843249\n14:00:50:604 -&gt; 1150 mmu set 00010000, pos 00010000\n...\n14:01:01:569 -&gt; ets Jul 29 2019 12:21:46\n14:01:01:569 -&gt;\n14:01:01:569 -&gt; rst:0x10 (RTCWDT_RTC_RESET),boot:0x13 (SPI_FAST_FLASH_BOOT)\n14:01:01:575 -&gt; flash read err, 988\n14:01:01:579 -&gt; ets_main.c 384\n\n14:01:04:325 -&gt; ets Jul 29 2019 12:21:46\n14:01:04:325 -&gt;\n14:01:04:325 -&gt; rst:0x10 (RTCWDT_RTC_RESET),boot:0x13 (SPI_FAST_FLASH_BOOT)\n14:01:04:330 -&gt; configsip: 0, SPIWP:0xee\n14:01:04:333 -&gt; clk_drv:0x00,q_drv:0x00,d_drv:0x00,cs0_drv:0x00,hd_drv:0x00,wp_drv:0x00\n14:01:04:338 -&gt; mode:DIO, clock div:2\n14:01:04:341 -&gt; load:0x3fff0018,len:4\n14:01:04:344 -&gt; load:0x3fff001c,len:7960\n14:01:04:347 -&gt; load:0x3d234c30,len:-1713843249\n14:01:04:374 -&gt; 1150 mmu set 00010000, pos 00010000\n...\n</code></pre> <p>There two main points of which their function is unknown: - IO26, IO27: The connect to an unpopulated area which holds a chip during testing (could be seen from the marker on bottom of the right side).   - Since - IO21, IO2: Could be used for selection the Boot Mode or load/start a special app since IO2 is a Strap Pin and IO21 could serve as a Boot from Test Firmware pin</p> SPIJTAG MISOMTDI MOSIMTCK CLKMTMS CSMTDO V-SPI 19 23 18 05 H-SPI 12 13 14 15 JTAG 12 13 14 15 DebugLog 15 = High"},{"location":"devices/somfy/ConnectivityKit/#esp32-boot-mode-selection-and-jumper-pins","title":"ESP32 Boot Mode Selection and Jumper PINs","text":"<ul> <li> <p>Boot Mode Selection   |  PIN |  STD  | BOOT  | NORMAL | JUMPER |   | ---: | :---: | :---: | :----: | ------ |   |  IO0 |   1   |   0   |   18   | YES    |   |  IO2 |   0   |   0   |   14   |        |   | IO21 |   ?   |  13   |   14   |        |</p> </li> <li> <p>Jumper PINs   | PIN  | FUNCTION         |   | ---: | :--------------- |   | IO5  | Button 1 RST     |   | VP   | Button 2 PROG    |   | \u2192  | \u2192              |   | VN   | Jumper 1 Left    |   | IO34 | Jumper 2 Left    |   | IO35 | Jumper 3 Left    |   | IO23 | Jumper 4 Bottom  |   | IO0  | Jumper 5 Right   |   | \u2192  | \u2192              |   | TXD0 | Tx               |   | RXD0 | Rx               |   | IO26 | Debug 1          |   | IO27 | Debug 1          |   | IO21 | Debug 2          |   | IO2  | Debug 2          |   | IO14 | STM32 + JTAG TMS |   | IO15 | STM32 + JTAG     |   | IO18 | STM32 BOOT0      |   | IO4  | STM32 RESET      |</p> </li> </ul> <p>NOTE: Mainly used for testing. Use with caution as their meaning is unknown.</p> <p>| IODebugLog |     |              |             | 15 = High  |</p>"},{"location":"devices/somfy/ConnectivityKit/#led-colors","title":"LED Colors","text":""},{"location":"devices/somfy/ConnectivityKit/#kizbox-ii","title":"Kizbox II","text":"<p>The lights display the product's operating mode:</p> <ul> <li>During Boot Phase</li> <li>Orange: Kizbox\u00ae is booting.</li> <li>Red (Blinking): Updating software.</li> <li>Orange (Blinking): Initialization before entering standard operating mode. During Standard Operating Mode</li> <li>Green: Kizbox\u00ae is connected to the cloud.</li> <li>Red: Kizbox\u00ae not connected to the cloud.</li> <li>Blue (Blinking): Kizbox\u00ae is pairing (local mode).<ul> <li>Pressing the CFG button for 2 seconds initiates pairing to local mode.   If no pairing is completed within 60 seconds, the product returns to standard operating mode.</li> </ul> </li> <li>Blue: product is paired in local mode.<ul> <li>CFG Button: Short press cancels local mode pairing.</li> <li>If Kizbox\u00ae connected to the cloud: light turns green.</li> <li>If Kizbox\u00ae not connected to the cloud: light turns red.</li> </ul> </li> </ul> <p>Buttons allow the following interactions:</p> <ul> <li>During boot phase</li> <li>RST : button forces the box update when pressed during the power on phase. Use a tool to operate it.</li> <li>During standard operating mode</li> <li>CFG, RST : actions dependent on software.</li> </ul> <p>src: Kizbox II Operation and installation</p>"},{"location":"devices/somfy/ConnectivityKit/#tahoma-v1","title":"TaHoma V1","text":"<ul> <li>@-GR\u00dcN = Internet vorhanden</li> <li>@-ROT = Internet nicht vorhanden</li> <li>@-ORANGE/SCHWANKEND = ein Update wird heruntergeladen oder Verbindung wird hergestellt.</li> <li>GR\u00dcN = Automatiken an</li> <li>GELB = Automatiken aus</li> </ul>"},{"location":"devices/somfy/ConnectivityKit/#tahoma-v2","title":"TaHoma V2","text":"<ul> <li>WEISS (im Betrieb) = online</li> <li>GR\u00dcN = Alarmfunktionen aktiv</li> <li>ROT = Alarm ausgel\u00f6st oder TaHoma-Box offline</li> <li>ROT blinkend = Verbindungsaufbau</li> </ul>"},{"location":"devices/somfy/ConnectivityKit/#tahoma-switch","title":"TaHoma Switch","text":"<ul> <li>Top LEDs:</li> <li>WEISS blinkend = Wi-Fi Neuverbindung</li> <li>BLAU blinkend = Wi-Fi Einstellvorgang</li> <li>ROT blinkend = Wi-Fi Verbindungsabbruch</li> <li>ORANGE = Neustart-Anzeige</li> <li>GR\u00dcN = Anzeige f\u00fcr die Aktivierung des Pro-Modus (nur Pro App)</li> <li>WEISS langsam blinkend = Szenario gestartet</li> <li>ROT = Szenario \u00fcber Stopp-Button gestoppt</li> <li>Bottom LED:</li> <li>ROT = keine Serververbindung</li> <li>WEISS = online</li> </ul> <p>STM32 Tools minibox/usr/share/actions/fw/bootmode minibox/usr/share/ftdi-tools/tty-bootmode minibox/usr/share/image-update-functions.sh minibox/usr/share/stm32-utils/setmode minibox/usr/sbin/stm32-upgrader minibox/usr/bin/stm32flash minibox/usr/bin/stm32-helper-generic minibox/usr/bin/stm32-helper minibox/usr/bin/ncp-updater minibox/etc/init.d/kizbox-reset-factory minibox/apps/overkiz/share/rtx/scripts/fwupdate.sh minibox/apps/overkiz/share/io-homecontrol/scripts/fwupdate.sh minibox/apps/overkiz/share/idealrf/scripts/idealupdater.sh minibox/apps/overkiz/internal/bin/internald minibox/apps/overkiz/idealrf/lib/Overkiz/HomeAutomation/Protocol/IdealRF/Updater/StmUpdater.lua minibox/apps/overkiz/idealrf/lib/Overkiz/HomeAutomation/Protocol/IdealRF/Command/CommandManager.lua mainctrl/usr/lib/libanimeoHW.so.1.0.246: kizbox2/usr/share/stm32-utils/setmode kizbox2/usr/share/image-update-functions.sh kizbox2/usr/share/ftdi-tools/tty-bootmode kizbox2/usr/share/actions/fw/bootmode kizbox2/usr/sbin/stm32-upgrader kizbox2/usr/bin/stm32flash kizbox2/usr/bin/stm32-helper-generic kizbox2/usr/bin/stm32-helper kizbox2/usr/bin/ncp-updater kizbox2/apps/overkiz/share/rtx/scripts/fwupdate.sh kizbox2/apps/overkiz/share/io-homecontrol/scripts/fwupdate.sh kizbox2/apps/overkiz/lib/lua/Overkiz/knowledge/io-utils.module kizbox2/apps/overkiz/internal/bin/internald ipsensorgw/usr/lib/libanimeoHW.so.1.0.245 ipsensorgw/usr/bin/stm32flash ipsensorgw/usr/bin/sensorGateway ipsensorgw/firmwares/sdnp/stm32-update.sh ipiogw/usr/lib/libanimeoHW.so.1.0.236 ipiogw/usr/bin/stm32flash ipiogw/usr/bin/gateway_io</p>"},{"location":"devices/somfy/ConnectivityKit/#hardware","title":"Hardware","text":"<ul> <li>Espressif ESP32-WROVER-E v2.1 Module</li> <li>Espressif ESP32-D0WD v3: CPU</li> <li>XMC XM25QH64CHIQ: ROM (8MB)</li> <li>Espressif ESP-PSRAM64H: RAM (8MB)</li> <li>Semtech SX1243 - Radio: 433 MHz (Somfy RTS, etc.)</li> <li>STM32F101RCT6 with 256kB ROM and 32kB RAM</li> <li>Silicon Labs Si4461 v2A1 - Radio: io-homecontrol</li> </ul> <p>The LED of your Connectivity kit can give you information about its status:</p> <ul> <li>Solid orange: booting phase</li> <li>\u00ab Breathing \u00bb blue: during WiFi change credential</li> <li>Flashing white: during WiFi and server connection</li> <li>Flashing red: Connectivity kit is either not connected to Wifi or not connected to server, you might need to check your Internet connection.</li> <li>Solid white: Connectivity kit is powered and connected to server, you can use it normally.</li> </ul> <p>NOTE: The LED can be turned off from the \u00ab.. \u00bb menu</p>"},{"location":"devices/somfy/ConnectivityKit/#esp32-wrover-e-board-esp32-d0wd-v3","title":"ESP32-WROVER-E Board (ESP32-D0WD V3)","text":"ESP32-WROVER-E board without shield src: Dings Da Blog"},{"location":"devices/somfy/ConnectivityKit/#nor-flash-xm25qh64chiq","title":"NOR Flash: XM25QH64CHIQ","text":"<ul> <li>XM25 = Company Prefix + SPI Flash Family</li> <li>QH = Series: 2.3~3.6V, 4KB uniform-sector, Quad Mode</li> <li>64 = Density: 64 MBit</li> <li>CHI = Version: SOP 208mil 8L Package + Temp. Range: Industrial (-40 - +85\u00b0C)</li> <li>Q = QE Code</li> </ul> <p>NOTE: <code>QPI needs QE bit in Status Register-2 set. When QE=1, /WP =&gt; IO2 and /HOLD =&gt; IO3.</code></p> <p></p>"},{"location":"devices/somfy/ConnectivityKit/#software","title":"Software","text":"<p>TBD</p>"},{"location":"devices/somfy/SetGo/","title":"Somfy Set&amp;Go","text":""},{"location":"devices/somfy/SetGo/#somfy-setgo-emulator","title":"Somfy Set&amp;Go Emulator","text":""},{"location":"devices/somfy/SetGo/#original-post-by-ennergei","title":"Original post by ennergei","text":"<p>Hi,</p> <p>Is anyone still interested in the protocol used by Set&amp;Go io? I reverse engineered the encryption. It is AES-128 encrypted with a custom block mode and padding scheme. The key for incoming and outgoing packages is the same, but the supposedly random iv used for the incoming messages seems to always be the same (a bug/poor \u201crandom\u201d generator?). I can decrypt the messages from the logs in earlier threads and find strings such as the names and serial numbers and 16-byte keys that are likely the device/system keys. The decrypted packets also contain a CRC-16 with polynomial 8408. I wrote a small emulator to demonstrate it and uploaded it here: https://www.dropbox.com/s/laal9ylyj2n6lxe/set_go_emu.zip?dl=1</p> <p>The sample data is from the packet logs posted long ago by leutholl and others. (https://groups.google.com/forum/#!category-topic/openhab/AinJdyyDtG0) I was reading through their old topic on reverse engineering the protocol and felt like giving it a try. I am actually considering to buy screens and was looking for information on whether to get the RTS or io motor. I do not actually own any io devices nor the set&amp;go mouse at the moment, so I cannot test it with actual hardware. Instead, I wrote an emulator that makes set&amp;go io think a device is connected. To that end, I injected a .dll (VS2019) into the executable that bypasses the USB detection and reports that a device is connected on COM3. Then I wrote a Python (3.8) script to communicate on COM4 and used com0com to pipe one to the other. Now Set&amp;Go thinks a device is connected. It finds 4 io devices from leutholl\u2019s logs, and one made-up device that seems to show a bit more UI. I don\u2019t get many settings to change (I thought that was the purpose of the set&amp;go?) but maybe that is due to the devices that were used for the original logs.</p> <p>I do not know much about the content of the messages, except that it seems to be organized in sessions and that most messages contain some kind of optional sub messages. Not all messages seem to follow this format however, this is specific to the message type.</p> <p>I also had a look at the firmware. The firmware was embedded in the executable as a Qt resource. It is actually stored as 950 pre-generated and pre-encrypted protocol messages of 550 bytes, each encrypted with the same key as before. I decrypted the messages and concatenated them to get a raw firmware dump (950*512 bytes), but I do not know what instruction set is used. It looks like it is big-endian judging from a few address offsets in the beginning of the file, but that could be misleading. I can find the encryption key bytes, the firmware version, and a few text strings in the firmware image, so the dump itself looks good. From the message headers I deduced that the firmware is likely written at address 0x80008000. I\u2019d be interested in hearing if someone knows what instruction set it is or can make any sense of it.</p> <p>I did this mostly for fun, as the original topic was interesting to read and felt like a challenge. Even though quite a few years have passed, I hope it is useful to someone who wants to reverse it further. It should not be too hard to get it to a usable state if you have the corresponding hardware. :wink:</p> <p>Regards</p>"},{"location":"devices/somfy/SetGo/#original-readme","title":"Original Readme","text":"<ul> <li>aes.py is a modified version of an existing aes implementation by Bo Zhu (http://about.bozhu.me). The block mode and padding scheme used by Somfy io is nonstandard.</li> <li>test.py is a script to test the encryption and to decrypt packages in batch</li> <li>emu.py is an emulator that pretends to be a Somfy Set&amp;Go device, it implements the most basic messages, mostly those that were available in packet logs online (in particular here: what's the status of io-homecontrol (velux)).</li> <li>The .exe is only modified to include the Set_Go_io_emu.dll in its import section, so that the dll gets loaded.</li> <li>The dll source is included in the .cpp directory. It bypasses the USB device detection and dictates that the device is available on the COM3 port on startup. Reconnection is not supported. The source is quite messy as it reproduces the Qt types to avoid a full dependency on Qt, but it gets the job done.</li> <li>packet_types.txt contains most likely the full list of session id's used by the set&amp;go software and a few notes on the protocol.</li> <li>qt_type_info.txt is added for reference and contains extract Qt typeinfo, showing for example the classes, signals and slots used by Set&amp;Go.</li> <li>The firmware directory contains the encrypted firmware as extracted from the Qt embedded resource and the decrypted version. I don't know the instruction set used.</li> </ul>"},{"location":"devices/somfy/SetGo/#to-run-the-emulator","title":"To run the emulator","text":"<ul> <li>install Set&amp;Go 4.3.1.1 (even minor other versions will not work!)</li> <li>place the Set_Go_io_emu.dll &amp; .exe next to the original executables.</li> <li>install com0com and pair the COM3 and COM4 ports.</li> <li>Run the Python emu.py script (I use python 3.8) (e.g. python emulator.py from the command line).</li> <li>run Set_Go_io_emu.exe</li> </ul>"},{"location":"devices/somfy/SetGo/#setgo-io-sniff","title":"Set&amp;Go io Sniff","text":"<p>0069C340 9A00721E3EE29A7BF1B4A6086C1452EB &lt;&gt; 1E72009A7B9AE23E08A6B4F1EB52146C StackKey=E994BACFE6BED7667630EAE475BAAE95 9A00721E3EE29A7BF1B4A6086C1452EB</p> <p>_rdata_69C340 db  9Ah,   0, 72h, 1Eh, 3Eh,0E2h, 9Ah, 7Bh,0F1h,0B4h,0A6h,   8, 6Ch, 14h, 52h,0EBh; 0 ; DATA XREF: .text:004E3F8A\u2191r .text:004E3F94\u2191r .text:004E3F9C\u2191r .text:004E3FA4\u2191r</p>"},{"location":"devices/somfy/SetGo/#word-document","title":"Word Document","text":"Software Hardware <code>5102404A035</code> <code>5067501A003</code> <p>PC -&gt; SOMFY (WRITE) / SOMFY -&gt; PC (READ) - <code>0204FA</code> - <code>4305FFB9</code></p> <p>(NOTE: Only after first plug)</p> <p>PC -&gt; SOMFY (WRITE) / SOMFY -&gt; PC (READ)   <code>C0 PI LE CMD  SESS DATA C0</code> - <code>C0 00 25 0100 0006 A9F6 5100A64A070C31F03FF0C3E060EA5F8F6EB360FA85C265443643EF6 777 C0</code> - <code>0006A9F65100A64A070C31F03FF0C3E060EA5F8F6EB360FA85C26544364 3EF6</code> - <code>C0 00 95 0100 0004 6FF8 7F480750F7A0E78EBD2675BE4D 96F232596E9BDC25351ED400EB25C209BF25862FC6B53525BE033C125D69249770669ACCE678CAB4CEEE2CE33D069B4A9D09E177051AB1BF37058361E77EE8F947BB53DD0E7A22A8DEE14260F4E63172FBF144177FFD0D9DC88134CE7045EB349D09E177051AB1BF37058361E77EE8079D09E177051AB1BF3705C2E04DD442ADC0</code></p> <p>PC -&gt; SOMFY (WRITE) / SOMFY -&gt; PC (READ) - <code>C0 00 25 0100 000C 0FED BB15374EF96973C48982F8474F 1E41889E19290743437893A24F00F6C2 C0</code> - <code>C0 00 25 0100 000B 6FF8 7F480750F7A0E78EBD2675BE4D EFFE582D5E9158774735047A431D46F3 C0</code></p> <p>PC -&gt; SOMFY (WRITE) / SOMFY -&gt; PC (READ) - <code>C0 00 25 0100 000C C9C9 8B67C350E592658282BC2AB96B A59D2DFE5A939325FB67AC5E9B539EE0 C0</code> - <code>C0 00 25 0100 000B 6FF8 7F480750F7A0E78EBD2675BE4D EF1E5BF65C9158774735047A431D46F3 C0</code></p> <p>Roller Shutter Discovery GW_CS_GET_SYSTEMTABLE_DATA_REQ - PC -&gt; SOMFY (Replay: Never Accepted) / SOMFY -&gt; PC (READ) - <code>C0 00 35 0100 000F 6D86 982532800DFAFF70717CA856E9 DBFF13728DB93D5AA4DBB38D626B760AEB22E037CB8D4FB5815B9A8963E26CBF C0</code> - <code>C0 00 25 0100 000B 6FF8 7F480750F7A0E78EBD2675BE4D EFF85B4B159158774735047A431D46F3 C0</code> <code>C0 00 25 0100 0006 6FF8 7F480750F7A0E78EBD2675BE4D D41FC640291B86813C0719CF46A77500 C0</code></p> <p>PC -&gt; SOMFY (WRITE) - Replay: Always Accepted - <code>C0 00 25 0100 000B 3EDA 678B6B561C499D93D81BF18732 921617BE18E4B56E4849ABF674A99EB3 C0</code></p>"},{"location":"devices/somfy/SetGo/#uart","title":"UART","text":"<p>Communication Modes: RS232, RS422, RS485, IrDA</p> <p>UART wraps the package with a Seperator:</p> Text Only<pre><code>| SEPERATOR | DATA  | SEPERATOR |\n| :-------: | :---: | :-------: |\n| 0xC0      | &lt;---&gt; | 0xC0      |\n</code></pre> <p>The Seperator normally is 0xC0 with the following substitions:</p> Text Only<pre><code>| HEX    | DEC | OCT | ABBREVIATION  | DESCRIPTION    |\n| -----: | :-: | :-: | :------------ | -------------- |\n| `0xC0` |     |     | `SEP` = `\"`   | Frame Boundary |\n| `0xDB` | 219 | 333 | `ESC` = `\\`   | Frame Escape   |\n| `0xDC` | 220 | 334 | `\\END` = `\\\"` | Escaped End    |\n| `0xDD` | 221 | 335 | `\\ESC` = `\\\\` | Escaped Escape |\n</code></pre>"},{"location":"devices/somfy/SetGo/#uart-dma","title":"UART DMA","text":"SEPERATOR DATA SEPERATOR 0xC0 &lt;---&gt; 0xC0 0xC0 == 0xDB,0xDD <p>Replace Data thats same as separator: - 0xDB 0xDD</p>"},{"location":"devices/somfy/SetGo/#slip","title":"SLIP","text":"SEPERATOR DATA SEPERATOR 0xC0 &lt;---&gt; 0xC0 0xC0 == 0xDB,0xDC <p>SLIP modifies the Datagram by:</p> <ul> <li>Append <code>END</code> to distinguishe Datagram boundaries</li> <li>If <code>ESC</code> occurs in stream, send sequence <code>ESC, ESC_ESC</code> instead</li> <li>If <code>END</code> occurs in stream, send sequence <code>ESC, ESC_END</code> instead</li> </ul>"},{"location":"devices/somfy/Smoove/","title":"Somfy SMOOVE Origin IO","text":"<ul> <li>Smoove 1 IN io Pure Shine</li> <li><code>1811093D</code></li> </ul> <ul> <li>Article Number <code>5121820C008</code></li> </ul> <p>Product Page Smoove Origin IB</p> <p>Product Page</p> <p>English Instruction Manual</p>"},{"location":"devices/somfy/Smoove/#hardware","title":"Hardware","text":"<ul> <li>Board: <code>5144596 A000</code></li> <li> <p>Data Matrix: <code>24056510313571</code></p> </li> <li> <p>ST Microelectronics <code>STM8L151C8U6</code> MCU</p> </li> <li>Device Page</li> <li>Data Sheet</li> <li>Reference Manual</li> <li>RF Transmitter <code>SX1243</code></li> <li>Device Page</li> <li>Datasheet</li> </ul>"},{"location":"devices/somfy/Smoove/#debug-interface","title":"Debug Interface","text":"<ul> <li>Pitch = 2.54 mm</li> </ul> Text Only<pre><code>MCU Side\n\n+-+\n|6|\n|5|\n|4|   +---+\n|3|   |MCU|\n|2|   +---+\n|1|\n+-+\n</code></pre> <p>Pinout:</p> <ul> <li>Debug Pin 1 $\\rightarrow$ MCU Pin 1 $\\rightarrow$ <code>PA0(9) / [USART1_CK](2) / SWIM / BEEP / IR_TIM</code> $\\rightarrow$ Probably SWIM (One wire debug interface)</li> <li>Debug Pin 2 $\\rightarrow$ <code>GND</code></li> <li>Debug Pin 3 $\\rightarrow$ MCU Pin 2 $\\rightarrow$ <code>NRST / PA1</code></li> <li>Debug Pin 4 $\\rightarrow$ MCU Pin 48 $\\rightarrow$ <code>PE7 / LED_SEG27 / TIM5_ETR / USART3_RX / [LCD_COM7]</code> $\\rightarrow$ Probably UART RX</li> <li>Debug Pin 5 $\\rightarrow$ MCU Pin 47 $\\rightarrow$ <code>PE6 / LCD_SEG26 (3) / PVD_IN / TIM5_BKIN / USART3_TX / [LCD_COM6]</code> $\\rightarrow$ Probably UART TX</li> <li>Debug Pin 6 $\\rightarrow$ <code>VCC</code> @ 3V</li> </ul>"},{"location":"devices/somfy/izymo/","title":"Somfy Izymo Transmitter io","text":"<ul> <li>Product Page</li> <li>Usage Instructions</li> <li>Usage Instructions</li> </ul>"},{"location":"devices/somfy/izymo/#hardware","title":"Hardware","text":"<ul> <li>MCU <code>STM8L151C8U6</code></li> </ul>"},{"location":"devices/somfy/izymo/#debug-interface","title":"Debug Interface","text":"Text Only<pre><code>MCU Side   | Battery Side\n1  2  3    |    3  2  1\n4  5       |       5  4\n6          |          6\n</code></pre> Text Only<pre><code>+---------+\n| 1  2  3 |\n| 4  5 +--+\n| 6 +--+\n+---+\n\n         +---+\n         |MCU|\n         +---+\n</code></pre> <p>Pinout:</p> <ul> <li>Debug Pin 1 $\\rightarrow$ MCU Pin 48 $\\rightarrow$ <code>PE7 / LED_SEG27 / TIM5_ETR / USART3_RX / [LCD_COM7]</code> $\\rightarrow$ Probably UART RX</li> <li>Debug Pin 2 $\\rightarrow$ MCU Pin 1 $\\rightarrow$ <code>PA0(9) / [USART1_CK](2) / SWIM / BEEP / IR_TIM</code> $\\rightarrow$ Probably SWIM (One wire debug interface)</li> <li>Debug Pin 3 $\\rightarrow$ MCU Pin 2 $\\rightarrow$ = <code>NRST / PA1</code></li> <li>Debug Pin 4 $\\rightarrow$ <code>GND</code></li> <li>Debug Pin 5 $\\rightarrow$ <code>VCC</code> @ 3V</li> <li>Debug Pin 6 $\\rightarrow$ MCU Pin 47 $\\rightarrow$ <code>PE6 / LCD_SEG26 (3) / PVD_IN / TIM5_BKIN / USART3_TX / [LCD_COM6]</code> $\\rightarrow$ Probably UART TX</li> </ul>"}]}