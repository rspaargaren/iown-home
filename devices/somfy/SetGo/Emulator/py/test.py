import aes
import struct

key = bytes.fromhex("9A 00 72 1E 3E E2 9A 7B F1 B4 A6 08 6C 14 52 EB")
cipher = aes.AES(key)

def compute_crc_8408_byte(data, crc = 0):
    crc ^= data
    for i in range(8):
        remainder = 0x8408 if crc & 1 else 0
        crc = (crc >> 1) ^ remainder
    return crc

def compute_crc_8408(data, crc = 0):
    for b in data:
        crc = compute_crc_8408_byte(b, crc)
    return crc

def decrypt_message(description, packet):
    header_size = 5
    assert packet[0] == 0xC0 and packet[-1] == 0xC0, "incorrect start- and/or stop byte"
    is_encrypted = bool(struct.unpack('B', packet[3:4]))
    if not is_encrypted:
        # not tested
        plaintext = packet[1:-1]
    else:
        assert (len(packet) - 2 - header_size) % 16 == 0, "incorrect packet length (different header?)"
        padded_length, = struct.unpack('>H', packet[1:3])
        assert padded_length == len(packet) - 2, "incorrect length"
        iv = packet[1 + header_size:1 + header_size + 16]
        ciphertext = packet[1 + header_size + 16:-1]
        padded_plaintext = cipher.decrypt_custom(ciphertext, iv)
        padding_size = iv[0]
        assert all(b == 0x55 for b in padded_plaintext[-padding_size:]), "incorrect padding"
        plaintext = (
            struct.pack('>H', padded_length - 16 - padding_size) +
            packet[3:6] +
            padded_plaintext[:-padding_size])
    computed_crc = compute_crc_8408(plaintext[:-2])
    received_crc, = struct.unpack(">H", plaintext[-2:])
    assert computed_crc == received_crc, "incorrect CRC"
    #print(description, plaintext.hex())
    print(description, plaintext[5:-2].hex()) # remove the CRC and header because they no longer contain unknown information

# first request: 02 04 FA -- hardcoded sequence -- test pattern
# first response: 43 05 FF B9 -- no idea
# from leutholl: protocol_reverse.docx
#                                             vv - start byte
#                                                vv vv - big endian length, exclusing start- and stop byte
#                                                      vv - is encrypted flag
#                                                         vv vv - no idea
decrypt_message("pc -> somfy", bytes.fromhex("C0 00 25 01 00 00 06 A9 F6 51 00 A6 4A 07 0C 31 F0 3F F0 C3 E0 60 EA 5F 8F 6E B3 60 FA 85 C2 65 44 36 43 EF 67 77 C0"))
decrypt_message("somfy -> pc", bytes.fromhex("C0 00 95 01 00 00 04 6F F8 7F 48 07 50 F7 A0 E7 8E BD 26 75 BE 4D 96 F2 32 59 6E 9B DC 25 35 1E D4 00 EB 25 C2 09 BF 25 86 2F C6 B5 35 25 BE 03 3C 12 5D 69 24 97 70 66 9A CC E6 78 CA B4 CE EE 2C E3 3D 06 9B 4A 9D 09 E1 77 05 1A B1 BF 37 05 83 61 E7 7E E8 F9 47 BB 53 DD 0E 7A 22 A8 DE E1 42 60 F4 E6 31 72 FB F1 44 17 7F FD 0D 9D C8 81 34 CE 70 45 EB 34 9D 09 E1 77 05 1A B1 BF 37 05 83 61 E7 7E E8 07 9D 09 E1 77 05 1A B1 BF 37 05 C2 E0 4D D4 42 AD C0"))
decrypt_message("pc -> somfy", bytes.fromhex("C0 00 25 01 00 00 0C 0F ED BB 15 37 4E F9 69 73 C4 89 82 F8 47 4F 1E 41 88 9E 19 29 07 43 43 78 93 A2 4F 00 F6 C2 C0"))
decrypt_message("somfy -> pc", bytes.fromhex("C0 00 25 01 00 00 0B 6F F8 7F 48 07 50 F7 A0 E7 8E BD 26 75 BE 4D EF FE 58 2D 5E 91 58 77 47 35 04 7A 43 1D 46 F3 C0"))

decrypt_message("pc -> somfy", bytes.fromhex("C0 00 25 01 00 00 0C C9 C9 8B 67 C3 50 E5 92 65 82 82 BC 2A B9 6B A5 9D 2D FE 5A 93 93 25 FB 67 AC 5E 9B 53 9E E0 C0"))
decrypt_message("somfy -> pc", bytes.fromhex("C0 00 25 01 00 00 0B 6F F8 7F 48 07 50 F7 A0 E7 8E BD 26 75 BE 4D EF 1E 5B F6 5C 91 58 77 47 35 04 7A 43 1D 46 F3 C0"))

# rollershutter identity (replay not accepted)
decrypt_message("pc -> somfy", bytes.fromhex("C0 00 35 01 00 00 0F 6D 86 98 25 32 80 0D FA FF 70 71 7C A8 56 E9 DB FF 13 72 8D B9 3D 5A A4 DB B3 8D 62 6B 76 0A EB 22 E0 37 CB 8D 4F B5 81 5B 9A 89 63 E2 6C BF C0"))
decrypt_message("somfy -> pc", bytes.fromhex("C0 00 25 01 00 00 0B 6F F8 7F 48 07 50 F7 A0 E7 8E BD 26 75 BE 4D EF F8 5B 4B 15 91 58 77 47 35 04 7A 43 1D 46 F3 C0"))
decrypt_message("somfy -> pc", bytes.fromhex("C0 00 25 01 00 00 06 6F F8 7F 48 07 50 F7 A0 E7 8E BD 26 75 BE 4D D4 1F C6 40 29 1B 86 81 3C 07 19 CF 46 A7 75 00 C0"))

# replay always accepted
decrypt_message("pc -> somfy", bytes.fromhex("C0 00 25 01 00 00 0B 3E DA 67 8B 6B 56 1C 49 9D 93 D8 1B F1 87 32 92 16 17 BE 18 E4 B5 6E 48 49 AB F6 74 A9 9E B3 C0"))

# pc -> somfy 0025 01 0000 10 e2 d0510000ffff                                                                                                                                                                                                                                     58e3
# somfy -> pc 0095 01 0000 10 e3 00ffff0038353036373530314130303300ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0138353130323430344130333500ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff be7e
# pc -> somfy 0025 01 0000 11 06                                                                                                                                                                                                                                                  c748
# somfy -> pc 0025 01 0000 11 07 03                                                                                                                                                                                                                                               4da6
# pc -> somfy 0025 01 0000 11 e6                                                                                                                                                                                                                                                  2046
# somfy -> pc 0025 01 0000 11 e7 00                                                                                                                                                                                                                                               96a4

# rollershutter identity (replay not accepted)
# pc -> somfy 0035 01 0000 11 00 220003bea7810101010201feff                                                                                                                                                                                                                       8a27
# somfy -> pc 0025 01 0000 11 01 00                                                                                                                                                                                                                                               2bed
# somfy -> pc 0025 01 0000 11 02 00fe02ffbbff                                                                                                                                                                                                                                     e0bc

# replay always accepted
# pc -> somfy 0025 01 0000 11 03 00                                                                                                                                                                                                                                               185d
print()
print()
print()
print()
print()
print("leutholl: full-capture-with-comments.pdf")
decrypt_message(" 87.097 EP1 OUT", bytes.fromhex("c0 00 25 01 00 00 06 94 f0 02 31 7b 7f 11 3b 6f 3a a4 85 88 03 26 ed 62 84 16 fa 16 e2 da 56 54 d9 0a e0 55 6e fb c0"))
decrypt_message(" 87.101 EP2 IN ", bytes.fromhex("c0 00 95 01 00 00 04 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d 96 f2 32 59 6e 9b dc 25 35 1e d4 00 eb 25 c2 09 bf 25 86 2f c6 b5 35 25 be 03 3c 12 5d 69 24 97 70 66 9a cc e6 78 ca b4 ce ee 2c e3 3d 06 9b 4a 9d 09 e1 77 05 1a b1 bf 37 05 83 61 e7 7e e8 f9 47 bb 53 dd 0e 7a 22 a8 de e1 42 60 f4 e6 31 72 fb f1 44 17 7f fd 0d 9d c8 81 34 ce 70 45 eb 34 9d 09 e1 77 05 1a b1 bf 37 05 83 61 e7 7e e8 07 9d 09 e1 77 05 1a b1 bf 37 05 c2 e0 4d d4 42 ad c0"))
decrypt_message(" 87.300 EP1 OUT", bytes.fromhex("c0 00 25 01 00 00 0c 2b de ca 98 26 0d a3 7f 27 c6 bc 1c 8b 07 42 d6 a5 38 57 67 b3 c5 a1 22 4c 26 4f 58 80 16 f5 c0"))
decrypt_message(" 87.303 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef fe 58 2d 5e 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message(" 87.503 EP1 OUT", bytes.fromhex("c0 00 25 01 00 00 0c da b8 3a c2 55 9b c2 fe ed a2 42 d3 3a e7 2a 4b 1a da b4 f8 8c 75 b0 93 24 e6 b5 b7 76 25 24 c0"))
decrypt_message(" 87.506 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1e 5b f6 5c 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
print()
print("request security key from two way touch screen remote using 'copy remote' function")
decrypt_message("148.626 EP1 OUT", bytes.fromhex("c0 00 25 01 00 00 03 29 62 e9 bf 7a a1 83 45 f4 f7 80 6f c9 6a 80 b0 c7 6b b6 b8 67 59 df e4 c0 f5 74 e5 93 28 3e c0"))
decrypt_message("148.629 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef f8 5b 4b 15 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
print("----------")
decrypt_message("152.767 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef fb 5b 61 7d 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("152.797 EP1 OUT", bytes.fromhex("c0 00 25 01 00 00 0b c3 a8 b4 8b 13 ec d1 02 b7 8c 51 4c b3 54 d6 a8 16 c8 f2 7b 0b b1 20 84 6b 3d 37 85 de b2 44 c0"))
decrypt_message("153.004 EP1 OUT", bytes.fromhex("c0 00 25 01 00 00 0c fb 68 63 ab af 05 8d ce 87 4c 8f 68 69 f0 b0 91 7f 96 c6 7a 4a 91 32 27 e7 09 9d d3 2f 25 68 c0"))
decrypt_message("153.011 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1e 5b f6 5c 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
print("----------")
decrypt_message("157.817 EP1 OUT", bytes.fromhex("c0 00 25 01 00 00 03 0c de 16 d1 ad ce 33 6f b0 f2 ef a9 01 2f 27 8e 60 0c e4 a2 48 3b 3b 1f 72 bc 0f c4 5c 11 de c0"))
decrypt_message("157.823 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef f8 5b 4b 15 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
print("----------")
decrypt_message("161.962 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef fb 5b 61 7d 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("161.968 EP1 OUT", bytes.fromhex("c0 00 25 01 00 00 0b c8 96 aa cb 59 47 e8 a7 5a 5f b3 dd 87 da 0b 49 92 4d f8 bd ce 14 14 94 3e 29 16 2e a1 32 ee c0"))
decrypt_message("162.592 EP1 OUT", bytes.fromhex("c0 00 25 01 00 00 0c 14 4f a2 00 2c 78 ce a3 78 f4 36 e4 48 fa 4a ee 39 86 62 03 48 ac 79 44 ba 6d 97 b7 26 2c fb c0"))
decrypt_message("162.595 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1e 5b f6 5c 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
print("----------")
decrypt_message("176.395 EP1 OUT", bytes.fromhex("c0 00 25 01 00 00 03 a3 cf e4 9e c2 21 dc 03 6b 68 dd 9c 71 f8 15 56 9e 54 24 dd d6 f2 b2 7b 13 e1 65 7f 8e af b3 c0"))
decrypt_message("176.399 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef f8 5b 4b 15 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
print("----------")
decrypt_message("180.563 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef fb 5b 61 7d 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("180.566 EP1 OUT", bytes.fromhex("c0 00 25 01 00 00 0b df f3 6d 2e d8 2c 78 84 ab 94 87 ce ad 33 e9 22 cd 9e 63 82 d4 8f 78 52 7c 43 0b ca 3a 87 82 c0"))
decrypt_message("180.769 EP1 OUT", bytes.fromhex("c0 00 25 01 00 00 0c 4e 00 6e a1 02 1d fd 83 e3 37 75 d0 bb d4 13 e9 72 41 31 83 a1 f3 8e d2 fe c0 dc 28 50 6d 18 c0"))
decrypt_message("180.774 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1e 5b f6 5c 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
print("----------")
decrypt_message("185.569 EP1 OUT", bytes.fromhex("c0 00 25 01 00 00 03 e9 9d 8d 1a 57 7d 5d 8e b8 ff 5e 90 cb f5 6a 19 5d f2 30 03 0b b9 51 22 54 25 e6 52 d6 dc 48 c0"))
decrypt_message("185.579 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef f8 5b 4b 15 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
print("----------")
decrypt_message("189.719 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef fb 5b 61 7d 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("189.771 EP1 OUT", bytes.fromhex("c0 00 25 01 00 00 0b 27 3e 9c 7f b8 5b 27 47 fa 51 90 c0 ab 2f 43 79 4e be 04 14 9a 87 98 4f d9 5f cc 0c 62 50 2b c0"))
decrypt_message("190.372 EP1 OUT", bytes.fromhex("c0 00 25 01 00 00 0c 5d d5 41 a9 86 de f4 13 eb 38 ee 20 88 f2 7b dc 76 73 09 aa 07 1b c0 fe d0 2a 81 c7 da 00 a5 c0"))
decrypt_message("190.376 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1e 5b f6 5c 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
print("----------")
decrypt_message("197.549 EP1 OUT", bytes.fromhex("c0 00 25 01 00 00 03 0b c8 ee fe 02 ac 17 85 fe 59 41 32 2c 06 19 f3 ec da 59 1d b2 e4 a6 33 cd 6c 66 98 a9 5f 79 c0"))
decrypt_message("197.554 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef f8 5b 4b 15 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
print("----------")
decrypt_message("203.100 EP2 IN ", bytes.fromhex("c0 00 45 01 00 00 05 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ce 3c 87 0c c0 60 16 fa 6d b9 87 bf 79 0e d2 99 c8 5b 7e ef 62 51 ac f4 db 39 46 3e 4a 03 5c 6e a5 a4 74 ac 25 7b 50 ed 97 b6 eb 18 a7 c4 d6 cb c0"))
decrypt_message("203.116 EP1 OUT", bytes.fromhex("c0 00 25 01 00 00 0b 9f 6b 98 d6 d9 eb f2 06 2e 70 43 28 66 42 54 d0 17 60 47 f9 2c bd 00 42 a4 64 2f 3f a7 ea ab c0"))
decrypt_message("203.118 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef fb 5b 61 7d 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("203.119 EP1 OUT", bytes.fromhex("c0 00 25 01 00 00 0b 79 93 5b 2a 9e 27 c7 f3 84 6d da 9a 43 16 26 17 ee bb e6 72 98 31 4d 3a 61 ff 6c c6 02 d1 0b c0"))
decrypt_message("203.124 EP1 OUT", bytes.fromhex("c0 00 25 01 00 00 05 f5 34 00 cf eb 23 d3 3f 81 c1 ba bb 2f 42 b5 47 80 ff 7f 97 bc 78 ab fe 1d b9 e6 c8 7f 4d 62 c0"))
decrypt_message("203.126 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef f8 5b 4b 15 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("203.246 EP2 IN ", bytes.fromhex("c0 00 35 01 00 00 08 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d 8f c6 85 a4 99 7a 0e 94 f8 b0 b6 9b ef 56 c8 cd 7e 95 82 1b 31 4b 98 09 2b eb c6 03 33 07 0d ae c0"))
decrypt_message("203.248 EP1 OUT", bytes.fromhex("c0 00 25 01 00 00 0b 22 3b 86 20 b4 e6 c2 a5 ba 4f 54 b4 a4 12 36 56 07 00 89 fa ad 4b 02 e5 8b 83 2c 14 85 02 bb c0"))
decrypt_message("203.251 EP1 OUT", bytes.fromhex("c0 00 25 01 00 00 0c 8a c1 b5 fd 69 bd 4a 9d 73 bd 4c 76 a1 10 9c 3e f5 a7 94 49 3a eb 48 04 b3 86 27 80 f2 f1 de c0"))
decrypt_message("203.257 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1e 5b f6 5c 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("203.436 EP1 OUT", bytes.fromhex("c0 00 45 01 00 00 01 31 52 72 54 fb 6d 76 06 85 76 f6 12 95 01 f2 ef 20 7d 8c 3a 36 7f fb c0 4a da 1b 7b 26 40 cc ca 78 f6 ed 82 1c 13 d1 2a 42 d7 55 42 cd 60 30 59 81 1c d6 39 b6 35 6e ae 37 32 bc c4 88 f5 4d c0"))
decrypt_message("203.440 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1c 5b c5 ec 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("203.467 EP1 OUT", bytes.fromhex("c0 00 35 01 00 00 01 d5 91 12 4a 5a ca c5 f8 54 ca 10 df 47 f9 72 1f 0f e0 b6 28 7c ca 98 bd 9c af 70 cb a7 ac 3e 4c 2c 70 8e d0 b7 b9 0d 02 6c e2 4d ac e0 e7 f3 c0"))
decrypt_message("203.470 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef f8 5b 4b 15 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
print("----------")
decrypt_message("217.725 EP2 IN ", bytes.fromhex("c0 00 45 01 00 00 05 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ce 3c 87 0c c3 60 16 fa a9 b2 87 bf 2d e6 6f 99 74 ef 42 59 ca d8 80 1e cd 91 54 94 70 d6 d3 34 e2 78 ea 37 04 09 6e bd 00 91 e4 7a f1 13 84 8e c0"))
decrypt_message("217.731 EP1 OUT", bytes.fromhex("c0 00 25 01 00 00 0b e3 ea 87 d2 62 5a 00 62 bf 12 7d b7 29 42 c7 fe d8 e1 56 35 42 f3 cf db 7e ec 06 91 c1 73 45 c0"))
decrypt_message("217.735 EP2 IN ", bytes.fromhex("c0 00 45 01 00 00 05 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ce 3c 87 0c c3 60 16 ae 85 04 87 bf 2d e6 6f 99 e6 c2 b1 e6 f4 fb fb 3d d5 70 3e fc 79 af cd be 67 f2 26 e9 e7 90 82 80 31 cd dd 8f 83 ef d6 bc c0"))
decrypt_message("217.743 EP1 OUT", bytes.fromhex("c0 00 25 01 00 00 0b f3 3c 7d 63 44 b1 52 ee 77 bf d3 a8 f0 49 90 7a 86 4b 98 f0 c0 00 e4 80 4d 23 fd 0f 04 ce 8e c0"))
decrypt_message("217.746 EP2 IN ", bytes.fromhex("c0 00 45 01 00 00 05 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ce 3c 87 0c c3 60 16 01 7a 7f 87 bf 82 19 14 99 d0 66 80 74 fb f5 65 16 6e cb 60 a4 5f 99 2f dd 67 f2 26 e9 e7 90 82 80 31 82 ce 8f 83 ef d6 bc c0"))
decrypt_message("217.749 EP1 OUT", bytes.fromhex("c0 00 25 01 00 00 0b 9c d2 9c 15 53 8c cf 68 68 b2 6b 9e fe 4a 9d e7 c1 e1 dc 19 ef 60 e5 c4 4e bb 74 84 35 7a a9 c0"))
decrypt_message("217.759 EP2 IN ", bytes.fromhex("c0 00 45 01 00 00 05 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ce 3c 87 0c c3 60 16 28 d1 78 87 bf 82 19 14 99 83 01 f9 e6 2a 83 f1 d5 65 67 1c ff 7d 15 c0 2c e2 78 ea 37 04 09 6e bd 00 e3 96 7a f1 13 84 8e c0"))
decrypt_message("217.779 EP1 OUT", bytes.fromhex("c0 00 25 01 00 00 0b fb 68 6a 79 c0 f8 68 8c 10 60 65 60 0c 7c 78 80 ba 4e 56 10 a9 1a 77 2f e5 83 01 4b 9b bc 92 c0"))
decrypt_message("217.790 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef fb 5b 61 7d 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("217.790 EP1 OUT", bytes.fromhex("c0 00 25 01 00 00 0b 14 a5 0a 46 ba 2c 11 4b 98 24 89 9d fa 69 06 fa 09 3e 42 74 da 0a 03 b8 db 65 85 5f 55 7c 96 c0"))
decrypt_message("218.001 EP1 OUT", bytes.fromhex("c0 00 25 01 00 00 0c 7e 69 58 29 61 b2 5e 65 f5 7e 34 a9 75 48 7e d9 3e 84 70 5a 90 d4 45 e5 3d 63 b9 2a d9 b1 fb c0"))
decrypt_message("218.011 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1e 5b f6 5c 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("218.014 EP1 OUT", bytes.fromhex("c0 00 45 01 00 00 0f 55 56 6c 67 a1 44 5f a5 b0 96 72 cc ae 81 4e 91 d5 86 de 36 29 fc 5d 0c bb 97 42 80 39 7e 15 f5 c8 9c 0d b2 e7 92 3f 73 c2 a3 2e 7c b3 e7 65 da 42 01 6f f5 80 d4 8f 46 01 18 04 ba cd fe 1b c0"))
decrypt_message("218.017 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1c 5b c5 ec 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("218.021 EP1 OUT", bytes.fromhex("c0 00 45 01 00 00 01 7d 70 e0 cf 6a 7e c0 6c cb dd 92 ce 39 97 3c 05 eb 71 2a 02 d9 23 23 f3 a9 56 d1 ac 26 43 f6 47 c8 c5 9e 75 94 2d 82 4f f4 84 5e 8d b5 0c 13 0b 8a 16 b8 3c eb 2d cc 12 f1 ec a9 cb cd bb a6 c0"))
decrypt_message("218.024 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1c 5b c5 ec 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("218.025 EP1 OUT", bytes.fromhex("c0 00 45 01 00 00 01 b9 82 5c d0 00 7f 29 41 9d 6e 5c c2 94 d6 16 12 36 61 66 2e fd 91 11 71 88 7b 5b ad 40 de 6d f6 c5 6e de 35 74 50 de 6f c5 20 d0 f9 2c bf c0 96 39 13 84 8f de 0a 9f 78 42 c8 91 f0 2d 89 37 c0"))
decrypt_message("218.032 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1c 5b c5 ec 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("218.046 EP1 OUT", bytes.fromhex("c0 00 45 01 00 00 01 37 d6 8c 63 69 c3 c9 04 4a 72 f5 3d 1a 6d 15 6a 3a 6b 86 b8 ae 9f e9 d7 08 12 47 d7 8c 8c bf 8a 51 8a f6 3b 18 de 8c a6 3d b1 42 06 ef 0b 59 17 25 a5 72 25 ee 53 32 25 e1 fc 79 36 ee da b2 c0"))
decrypt_message("218.050 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1c 5b c5 ec 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("218.050 EP1 OUT", bytes.fromhex("c0 00 45 01 00 00 01 a4 ae ff 74 45 9a cc 8c 09 93 c8 b3 d3 cf 46 8d 23 a6 b3 5b 2a 29 ea eb d9 49 c2 34 94 f2 dc 10 8c 54 35 1f c7 b8 05 b1 48 b2 42 2c 3c 4a d9 b9 dc 6f 39 36 c6 e4 f6 26 cc 50 c2 08 f7 96 29 c0"))
decrypt_message("218.054 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1c 5b c5 ec 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("218.055 EP1 OUT", bytes.fromhex("c0 00 45 01 00 00 01 96 26 a1 3d 0e cd 22 67 4f 6b 2c 77 03 4f 72 8c c5 5d 2b 8d 67 e2 b6 cb 9c d4 54 c2 9b 96 10 ca 78 f6 ed 82 1c 13 d1 2a 42 d7 55 42 cd 60 30 59 81 1c d6 39 b6 35 6e ae 37 32 bc c4 88 f5 4d c0"))
decrypt_message("218.058 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1c 5b c5 ec 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("218.060 EP1 OUT", bytes.fromhex("c0 00 35 01 00 00 01 f1 4d 85 f6 e1 47 7b af 14 fc 35 9c f6 6e 64 ac 4b 9a 04 52 44 de 7b 74 ed 39 ff b2 f2 9c d3 19 27 e3 a7 63 fb ba db 05 f8 2d 54 41 d7 c2 17 c0"))
decrypt_message("218.062 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef f8 5b 4b 15 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
print("----------")
decrypt_message("222.213 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef fb 5b 61 7d 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("222.216 EP1 OUT", bytes.fromhex("c0 00 25 01 00 00 0b 14 c2 a2 55 9c 2c 48 1d fe 26 ff ec ff f6 c5 6f 86 68 59 4a c7 7b 8f df 92 0c 26 ee ad 31 19 c0"))
decrypt_message("222.409 EP1 OUT", bytes.fromhex("c0 00 25 01 00 00 0c e4 65 35 8e 72 a5 ea 93 72 f8 66 66 2a 28 06 c2 d3 26 82 55 92 34 d3 46 6e bd 92 6d 21 5a 51 c0"))
decrypt_message("222.412 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1e 5b f6 5c 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("222.412 EP1 OUT", bytes.fromhex("c0 00 45 01 00 00 0f 45 64 d2 87 bc a0 6c 14 27 ca d7 b1 03 46 c2 1c 3b bb 85 45 8c ca 7b d7 cc 46 a6 41 7b 36 89 f5 c8 9c 0d b2 e7 92 3f 73 c2 a3 2e 7c b3 e7 65 da 42 01 6f f5 80 d4 8f 46 01 18 04 ba cd fe 1b c0"))
decrypt_message("222.416 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1c 5b c5 ec 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("222.418 EP1 OUT", bytes.fromhex("c0 00 45 01 00 00 01 31 b3 d6 a8 5c ac 2e b3 6f 9b a5 42 98 89 ec 07 1b 81 ab b3 b4 fb 84 17 0d 6b 89 7e 11 ac 21 47 c8 c5 9e 75 94 2d 82 4f f4 84 5e 8d b5 0c 13 0b 8a 16 b8 3c eb 2d cc 12 f1 ec a9 cb cd bb a6 c0"))
decrypt_message("222.422 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1c 5b c5 ec 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("222.429 EP1 OUT", bytes.fromhex("c0 00 45 01 00 00 01 6b 9e 81 2f 31 5c cd 8f c0 2e 42 53 6e 01 ae 60 04 87 82 bf 21 50 7a 52 45 b4 1b 41 56 be 71 f6 c5 6e de 35 74 50 de 6f c5 20 d0 f9 2c bf c0 96 39 13 84 8f de 0a 9f 78 42 c8 91 f0 2d 89 37 c0"))
decrypt_message("222.432 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1c 5b c5 ec 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("222.434 EP1 OUT", bytes.fromhex("c0 00 45 01 00 00 01 c2 da 33 eb 05 d6 d3 a4 03 81 8e 49 97 42 c8 9a 44 55 62 e6 f0 82 c7 82 82 58 9e ae bf 18 80 8a 51 8a f6 3b 18 de 8c a6 3d b1 42 06 ef 0b 59 17 25 a5 72 25 ee 53 32 25 e1 fc 79 36 ee da b2 c0"))
decrypt_message("222.442 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1c 5b c5 ec 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("222.444 EP1 OUT", bytes.fromhex("c0 00 45 01 00 00 01 4b 06 fe 2f 17 2c 40 52 e5 30 ab 7a d6 41 6f 47 75 63 be bd bd c4 cb 8c 55 6c f6 c4 01 ba 7b 10 8c 54 35 1f c7 b8 05 b1 48 b2 42 2c 3c 4a d9 b9 dc 6f 39 36 c6 e4 f6 26 cc 50 c2 08 f7 96 29 c0"))
decrypt_message("222.448 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1c 5b c5 ec 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("222.449 EP1 OUT", bytes.fromhex("c0 00 45 01 00 00 01 5a 7a 30 19 cf 36 5b 74 4e 9a c4 d9 2a 2d d3 5b fe e9 57 0c 5e 34 d7 53 37 05 4c ee bc 68 b0 ca 78 f6 ed 82 1c 13 d1 2a 42 d7 55 42 cd 60 30 59 81 1c d6 39 b6 35 6e ae 37 32 bc c4 88 f5 4d c0"))
decrypt_message("222.454 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1c 5b c5 ec 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("222.456 EP1 OUT", bytes.fromhex("c0 00 25 01 00 00 05 97 5b ba 8f e5 ed a3 c7 f8 c0 3c 18 ab c2 c9 f3 9b 44 d4 58 23 48 a6 b4 3a 8e 16 6f 54 29 8a c0"))
decrypt_message("222.466 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef f8 5b 4b 15 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("222.753 EP2 IN ", bytes.fromhex("c0 00 35 01 00 00 04 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d 97 13 32 a6 81 c9 8b 7c 69 4d 91 15 95 7d ef 6a 28 85 09 d2 a8 65 80 a0 8d 80 90 db 51 c6 98 43 c0"))
decrypt_message("222.754 EP1 OUT", bytes.fromhex("c0 00 25 01 00 00 0b 21 6b 44 0b e9 b4 a0 03 c9 ee c8 db cb eb f1 14 57 8b 71 61 b1 40 e9 98 af c0 99 ad 05 a1 f1 c0"))
decrypt_message("222.801 EP1 OUT", bytes.fromhex("c0 00 25 01 00 00 01 81 ee c8 00 0e 21 8b d9 67 76 39 47 34 66 a6 eb cf c5 f8 fc 20 72 f2 83 48 ac e0 2e a3 14 fc c0"))
decrypt_message("222.804 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef f8 5b 4b 15 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("222.858 EP2 IN ", bytes.fromhex("c0 00 45 01 00 00 0e 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d 63 ed 57 1e 3a 14 40 9b 51 db 0a 7b ce ec 21 86 b2 37 d6 cf c7 88 0e cd e3 f2 db 2c c4 a1 03 58 51 4f 3f 41 72 08 75 50 17 c3 ae bd 4d f3 7a 7f c0"))
decrypt_message("222.861 EP1 OUT", bytes.fromhex("c0 00 25 01 00 00 0b 96 a7 8c db 91 29 cd 4a 08 6a 48 98 84 db fa 97 6b 7b c5 79 d1 9f a5 62 86 50 51 da db 6c 47 c0"))
decrypt_message("222.867 EP1 OUT", bytes.fromhex("c0 00 25 01 00 00 05 51 58 27 81 41 ac a5 e1 c4 b9 50 b7 ca cd 54 6e 2c 87 a2 bf 39 80 23 cc c7 cd a6 3e 93 4a 5b c0"))
decrypt_message("222.872 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef f8 5b 4b 15 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("222.913 EP2 IN ", bytes.fromhex("c0 00 35 01 00 00 04 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d 97 13 32 a6 81 cc 8d 7e 61 47 94 15 95 7d ef 4a 6f 28 62 14 21 96 c6 d2 6a 11 69 d7 18 ba 25 60 c0"))
decrypt_message("222.916 EP1 OUT", bytes.fromhex("c0 00 25 01 00 00 0b c1 e7 4e a7 21 23 5b c9 45 e3 33 2a db ae 10 85 4e b9 99 11 c5 7f c0 35 04 20 c0 64 f7 2e 80 c0"))
decrypt_message("222.918 EP1 OUT", bytes.fromhex("c0 00 25 01 00 00 01 37 bc 0b 9b a8 31 5a 9d 04 7b c9 1b f1 0e 5d 77 d2 3f 11 6a 2e ac 1e 61 cc 58 4a 97 52 88 c0 c0"))
decrypt_message("222.922 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef f8 5b 4b 15 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("223.040 EP2 IN ", bytes.fromhex("c0 00 45 01 00 00 0e 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d 63 ed 57 1e 3a 14 40 9b 51 db 0a 7b ce ec 21 86 b2 37 d6 cf c7 88 0e cd e3 f2 db 2c c4 a1 0c 58 0c 94 de 15 4e 20 de c6 95 32 0d c0 fc 61 af 70 c0"))
decrypt_message("223.044 EP1 OUT", bytes.fromhex("c0 00 25 01 00 00 0b 83 4e 57 25 0d a6 87 8c 05 05 40 ee 13 ab 8a 89 b8 98 58 b2 e3 a1 b3 19 f6 45 00 e8 94 63 35 c0"))
decrypt_message("223.048 EP1 OUT", bytes.fromhex("c0 00 25 01 00 00 05 53 3e b4 03 84 bf 36 a9 4f 59 dc 25 3f 58 86 d9 b2 57 8f 09 ae ba 35 36 a2 bc 99 c5 7b 05 95 c0"))
decrypt_message("223.055 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef f8 5b 4b 15 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("223.141 EP2 IN ", bytes.fromhex("c0 00 35 01 00 00 04 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d 97 13 32 a6 81 cc 8d 7e 61 47 94 15 b3 75 ef 55 44 be 68 e1 ff 02 1c 09 7a 98 81 d8 bd 8d 7d f7 c0"))
decrypt_message("223.142 EP1 OUT", bytes.fromhex("c0 00 25 01 00 00 0b 09 88 e0 f9 dd 7d ba 2a 6d 48 37 1f 36 42 63 39 8e f5 f0 5c 4f c6 ee 61 a5 e4 be 16 b6 21 de c0"))
decrypt_message("223.144 EP1 OUT", bytes.fromhex("c0 00 25 01 00 00 01 fc 66 95 2b 3e 49 8b 92 ab 9c 49 ae 02 99 31 cb fa 1e 8b 91 16 c8 ea 35 6a 3b 5a 94 20 b0 2b c0"))
decrypt_message("223.147 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef f8 5b 4b 15 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("223.199 EP2 IN ", bytes.fromhex("c0 00 45 01 00 00 0e 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d 63 ed 57 1e 3a 14 40 9b 51 db 0a 7b ce ec 21 86 b2 37 d6 cf c7 88 0e cd e3 f2 db 2c c4 a1 0e 58 e8 09 c6 d3 b1 ba 6d db 95 31 d5 31 fe bc 32 94 c0"))
decrypt_message("223.204 EP1 OUT", bytes.fromhex("c0 00 25 01 00 00 0b 8d f1 3d cd a5 56 93 72 07 60 8b 72 e3 81 29 73 23 da a2 cd 59 25 27 2f bc 10 b7 9e f3 0f ff c0"))
decrypt_message("223.209 EP1 OUT", bytes.fromhex("c0 00 25 01 00 00 05 1e a6 d4 89 66 3a e9 91 5a a7 88 c5 53 b1 76 2c 45 60 1f 29 7e 89 40 56 7b 2b 93 4f 5d 41 10 c0"))
decrypt_message("223.212 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef f8 5b 4b 15 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("223.338 EP2 IN ", bytes.fromhex("c0 00 35 01 00 00 04 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d 97 13 32 a6 81 c9 8b 7c 69 4d 91 15 b3 75 ef 6c 05 97 8c 3e d9 05 ac 2c ba 83 a7 e0 e8 ca 40 37 c0"))
decrypt_message("223.340 EP1 OUT", bytes.fromhex("c0 00 25 01 00 00 0b 1d 10 a1 bf 47 93 d9 8f 3f f3 6c 1e a0 0b 45 9a 29 dd 88 72 1d 66 bd a8 80 93 27 0b 24 df f3 c0"))
decrypt_message("223.342 EP1 OUT", bytes.fromhex("c0 00 25 01 00 00 01 bf a1 28 27 95 14 a4 17 f3 64 92 5c f6 e8 65 24 35 ec 26 1d 14 6d cc 53 bc 91 10 fa d8 01 af c0"))
decrypt_message("223.344 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef f8 5b 4b 15 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("223.441 EP2 IN ", bytes.fromhex("c0 00 45 01 00 00 0e 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d 63 ed 57 1e 3a 14 40 9b 51 db 0a 7b ce ec 7e 94 50 48 7a 27 81 f0 6d c0 3f 3c 2d e0 45 80 be be 2f 8e ea ba 63 63 39 14 49 e1 49 86 6e 41 f9 4b c0"))
decrypt_message("223.445 EP1 OUT", bytes.fromhex("c0 00 25 01 00 00 0b c0 5d 7c ba 43 24 cd 29 cd f3 2f 55 2a e1 74 a5 b5 0d e5 15 99 73 33 c3 78 6c 53 79 95 71 53 c0"))
decrypt_message("223.785 EP1 OUT", bytes.fromhex("c0 00 25 01 00 00 0c fd dc 93 ad 71 f8 44 31 12 b6 bf d6 3c d5 c8 0c 49 d9 e1 4b b2 0e a6 23 b4 87 09 d7 55 c2 e9 c0"))
decrypt_message("223.787 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1e 5b f6 5c 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("223.788 EP1 OUT", bytes.fromhex("c0 00 45 01 00 00 0f cf 5c 82 06 0c 6f ea fa 7d c9 17 fb 39 54 49 ff d8 2a 38 46 b3 c4 03 c4 d9 29 a5 26 2f 97 49 f5 c8 9c 0d b2 e7 92 3f 73 c2 a3 2e 7c b3 e7 65 da 42 01 6f f5 80 d4 8f 46 01 18 04 ba cd fe 1b c0"))
decrypt_message("223.791 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1c 5b c5 ec 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("223.792 EP1 OUT", bytes.fromhex("c0 00 45 01 00 00 01 cf d5 1b 73 df e7 6e f5 92 10 5c 53 db 80 ca f9 17 f1 e2 5e 80 8b 0f c3 5c cf 9a 5f 0e 06 c1 47 c8 c5 9e 75 94 2d 82 4f f4 84 5e 8d b5 0c 13 0b 8a 16 b8 3c eb 2d cc 12 f1 ec a9 cb cd bb a6 c0"))
decrypt_message("223.798 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1c 5b c5 ec 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("223.799 EP1 OUT", bytes.fromhex("c0 00 45 01 00 00 01 00 76 50 ff e4 e8 a7 dd d4 c5 0a 93 97 48 bb 41 ef 75 4a 49 2c 44 59 f9 ba c6 ba ce 13 6c c4 f6 c5 6e de 35 74 50 de 6f c5 20 d0 f9 2c bf c0 96 39 13 84 8f de 0a 9f 78 42 c8 91 f0 2d 89 37 c0"))
decrypt_message("223.802 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1c 5b c5 ec 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("223.809 EP1 OUT", bytes.fromhex("c0 00 45 01 00 00 01 15 9c b6 9b 1e 1c ae 6e 00 c0 d6 ec 16 71 fb b2 87 e9 0a 1c 7d ea 66 52 db 64 ff 81 ec d4 67 8a 51 8a f6 3b 18 de 8c a6 3d b1 42 06 ef 0b 59 17 25 a5 72 25 ee 53 32 25 e1 fc 79 36 ee da b2 c0"))
decrypt_message("223.813 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1c 5b c5 ec 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("223.819 EP1 OUT", bytes.fromhex("c0 00 45 01 00 00 01 84 13 90 22 43 fb 1b a1 b4 15 0a b2 34 8d 76 c5 70 0c 58 4d f7 a4 88 59 2e 21 c9 7f be 22 6a 10 8c 54 35 1f c7 b8 05 b1 48 b2 42 2c 3c 4a d9 b9 dc 6f 39 36 c6 e4 f6 26 cc 50 c2 08 f7 96 29 c0"))
decrypt_message("223.828 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1c 5b c5 ec 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
print()
print("devices identified")
decrypt_message("255.357 EP1 OUT", bytes.fromhex("c0 00 25 01 00 00 03 a2 9d 27 ba 0a a5 a9 31 33 eb 6d c3 10 04 bd b1 cc b7 9e c8 6b c9 95 cd 44 73 b6 76 d3 c3 6b c0"))
decrypt_message("255.359 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef f8 5b 4b 15 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
print("----------")
decrypt_message("266.214 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef fb 5b 61 7d 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("266.215 EP1 OUT", bytes.fromhex("c0 00 25 01 00 00 0b dd fb 8e 5a 04 97 8e e7 a5 f8 1d 92 58 93 be 03 f7 ba d8 65 48 ce b5 92 04 58 21 98 de 49 ea c0"))
decrypt_message("266.405 EP1 OUT", bytes.fromhex("c0 00 25 01 00 00 0c aa 23 f9 4c 7d 04 eb db 46 53 c7 8d 64 32 e7 42 ae b6 7d 88 60 cf 16 e8 d7 d7 88 6a 0a bd 14 c0"))
decrypt_message("266.411 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1e 5b f6 5c 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("266.412 EP1 OUT", bytes.fromhex("c0 00 45 01 00 00 0f a4 b5 aa e0 d0 46 9f 45 1b 41 4a db 57 39 57 66 a4 7f ae d9 d8 ac f4 ca 14 8b f0 72 24 10 6b f5 c8 9c 0d b2 e7 92 3f 73 c2 a3 2e 7c b3 e7 65 da 42 01 6f f5 80 d4 8f 46 01 18 04 ba cd fe 1b c0"))
decrypt_message("266.421 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1c 5b c5 ec 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("266.423 EP1 OUT", bytes.fromhex("c0 00 45 01 00 00 01 e4 77 bf 57 67 be 74 a3 1c 2c 66 6d ef 0f fd dc 0c c3 13 60 a8 50 22 af 9a aa 27 e8 1c 34 8a 47 c8 c5 9e 75 94 2d 82 4f f4 84 5e 8d b5 0c 13 0b 8a 16 b8 3c eb 2d cc 12 f1 ec a9 cb cd bb a6 c0"))
decrypt_message("266.427 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1c 5b c5 ec 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("266.428 EP1 OUT", bytes.fromhex("c0 00 45 01 00 00 01 08 ab 1b 48 34 d7 03 eb 6e 45 de 6f 15 62 5f 30 6c 08 7a 33 d8 a1 70 bd 47 05 7a 58 42 60 65 f6 c5 6e de 35 74 50 de 6f c5 20 d0 f9 2c bf c0 96 39 13 84 8f de 0a 9f 78 42 c8 91 f0 2d 89 37 c0"))
decrypt_message("266.433 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1c 5b c5 ec 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("266.439 EP1 OUT", bytes.fromhex("c0 00 45 01 00 00 01 53 65 c9 34 8e 10 2c 72 d3 89 0d 8f 64 af 54 f8 cf fd 59 2d f3 d3 52 32 4d 36 de fc dc 40 01 8a 51 8a f6 3b 18 de 8c a6 3d b1 42 06 ef 0b 59 17 25 a5 72 25 ee 53 32 25 e1 fc 79 36 ee da b2 c0"))
decrypt_message("266.443 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1c 5b c5 ec 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("266.444 EP1 OUT", bytes.fromhex("c0 00 45 01 00 00 01 af b6 08 53 c4 ad 1e 34 6a bf 47 5b d1 be 5d 9c 2d ac e3 c3 1e f5 4a ea 1c f0 6f 93 3c 22 57 10 8c 54 35 1f c7 b8 05 b1 48 b2 42 2c 3c 4a d9 b9 dc 6f 39 36 c6 e4 f6 26 cc 50 c2 08 f7 96 29 c0"))
decrypt_message("266.448 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1c 5b c5 ec 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("266.449 EP1 OUT", bytes.fromhex("c0 00 25 01 00 00 03 c9 b9 95 a8 0d d1 bf 97 b0 6f c6 6c d1 04 82 99 b0 e4 a6 76 4d 7f 23 a4 61 1c bc 73 1e 6a a8 c0"))
decrypt_message("266.451 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef f8 5b 4b 15 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
print("----------")
decrypt_message("270.601 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef fb 5b 61 7d 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("270.602 EP1 OUT", bytes.fromhex("c0 00 25 01 00 00 0b 95 c9 36 76 bb 80 ff fe 55 74 cf a5 c6 ee f9 6c 25 7f 20 7c 3e 64 87 0d 1a 99 d6 6f d3 15 e9 c0"))
decrypt_message("270.797 EP1 OUT", bytes.fromhex("c0 00 25 01 00 00 0c 65 c0 7a 71 18 10 23 35 e1 7b 85 42 e1 d0 28 a9 3a a9 7c 98 4a eb f6 c2 d4 1d 2c 7e 1c 91 21 c0"))
decrypt_message("270.799 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1e 5b f6 5c 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("270.799 EP1 OUT", bytes.fromhex("c0 00 45 01 00 00 0f 92 ea df 48 f4 8d 75 78 37 40 0d 3b 85 e6 50 95 32 09 0c d2 01 ae 39 2e 02 5a a9 0b 0b 23 d1 f5 c8 9c 0d b2 e7 92 3f 73 c2 a3 2e 7c b3 e7 65 da 42 01 6f f5 80 d4 8f 46 01 18 04 ba cd fe 1b c0"))
decrypt_message("270.802 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1c 5b c5 ec 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("270.803 EP1 OUT", bytes.fromhex("c0 00 45 01 00 00 01 11 60 83 24 00 1c 60 54 28 4c 6d 95 62 02 23 14 ea 78 c2 5f 71 81 74 1d 0b 8d 59 49 ef f8 ac 47 c8 c5 9e 75 94 2d 82 4f f4 84 5e 8d b5 0c 13 0b 8a 16 b8 3c eb 2d cc 12 f1 ec a9 cb cd bb a6 c0"))
decrypt_message("270.806 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1c 5b c5 ec 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("270.807 EP1 OUT", bytes.fromhex("c0 00 45 01 00 00 01 fc 76 47 ae 98 f4 c2 b1 52 2a db 5e c1 56 66 97 9e 36 c1 5d be 9d 04 e8 43 d0 87 c5 f6 17 ba f6 c5 6e de 35 74 50 de 6f c5 20 d0 f9 2c bf c0 96 39 13 84 8f de 0a 9f 78 42 c8 91 f0 2d 89 37 c0"))
decrypt_message("270.810 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1c 5b c5 ec 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("270.810 EP1 OUT", bytes.fromhex("c0 00 45 01 00 00 01 32 12 7d 1a 1c b6 14 d5 58 f2 df 0c c3 04 28 79 fb f5 7b fb 0a 25 fc 97 84 3b 6a 3b 12 fa 49 8a 51 8a f6 3b 18 de 8c a6 3d b1 42 06 ef 0b 59 17 25 a5 72 25 ee 53 32 25 e1 fc 79 36 ee da b2 c0"))
decrypt_message("270.814 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1c 5b c5 ec 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("270.814 EP1 OUT", bytes.fromhex("c0 00 45 01 00 00 01 4c f0 01 c9 3d c8 11 17 00 02 33 30 66 2d 35 4f 85 0f b1 33 8a 60 db 9e e6 38 c0 7d 18 b4 0a 10 8c 54 35 1f c7 b8 05 b1 48 b2 42 2c 3c 4a d9 b9 dc 6f 39 36 c6 e4 f6 26 cc 50 c2 08 f7 96 29 c0"))
decrypt_message("270.817 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1c 5b c5 ec 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
print()
print("devices detected (again)")
decrypt_message("287.177 EP1 OUT", bytes.fromhex("c0 00 35 01 00 00 01 b9 d5 a2 01 94 42 1f ec 94 42 54 30 b3 73 2b 56 e8 04 c9 7a 1b 53 43 a6 39 39 5d a6 1a a5 ce 4c 2c 70 8e d0 b7 b9 0d 02 6c e2 4d ac e0 e7 f3 c0"))
decrypt_message("287.180 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef f8 5b 4b 15 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
print("----------")
decrypt_message("297.816 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef fb 5b 61 7d 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("297.818 EP1 OUT", bytes.fromhex("c0 00 25 01 00 00 0b 2f df 49 15 b8 d6 90 1a e4 25 96 07 c3 c8 59 88 5d 01 93 b3 23 7f 05 34 85 05 67 f5 db 13 b5 c0"))
decrypt_message("298.013 EP1 OUT", bytes.fromhex("c0 00 25 01 00 00 0c 6a 74 81 bb b9 d8 60 fc 63 85 86 8e 0e 1f b8 14 c9 2b a4 6f d5 12 c4 2e 96 d3 96 04 03 bd 8c c0"))
decrypt_message("298.016 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1e 5b f6 5c 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("298.016 EP1 OUT", bytes.fromhex("c0 00 45 01 00 00 0f 85 d5 c8 b9 a5 c7 c1 fc 6b 6f f3 b7 f4 af 75 b6 af 73 e2 5c f6 43 0e 50 d9 77 8c ce 7f e2 7c f5 c8 9c 0d b2 e7 92 3f 73 c2 a3 2e 7c b3 e7 65 da 42 01 6f f5 80 d4 8f 46 01 18 04 ba cd fe 1b c0"))
decrypt_message("298.019 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1c 5b c5 ec 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("298.020 EP1 OUT", bytes.fromhex("c0 00 45 01 00 00 01 d9 3e b7 d3 f3 8b 5e 1e 91 72 a4 85 19 6d a9 b1 4f 81 6d 90 38 04 ee 7e 02 88 da f7 6d 7f d6 47 c8 c5 9e 75 94 2d 82 4f f4 84 5e 8d b5 0c 13 0b 8a 16 b8 3c eb 2d cc 12 f1 ec a9 cb cd bb a6 c0"))
decrypt_message("298.023 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1c 5b c5 ec 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("298.024 EP1 OUT", bytes.fromhex("c0 00 45 01 00 00 01 94 aa 4f d9 c5 0e 97 a4 87 3f fa 77 68 90 14 2d 90 de f3 b6 2b e5 ab 65 ac d9 e1 b3 fa b5 d8 f6 c5 6e de 35 74 50 de 6f c5 20 d0 f9 2c bf c0 96 39 13 84 8f de 0a 9f 78 42 c8 91 f0 2d 89 37 c0"))
decrypt_message("298.027 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1c 5b c5 ec 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("298.027 EP1 OUT", bytes.fromhex("c0 00 45 01 00 00 01 50 85 f4 a4 a1 ee 7b 3f e3 1f 82 d9 8a 3b a4 e7 b9 e3 80 79 d7 09 9b 77 0f 2e ca f0 b1 4a cd 8a 51 8a f6 3b 18 de 8c a6 3d b1 42 06 ef 0b 59 17 25 a5 72 25 ee 53 32 25 e1 fc 79 36 ee da b2 c0"))
decrypt_message("298.031 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1c 5b c5 ec 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("298.031 EP1 OUT", bytes.fromhex("c0 00 45 01 00 00 01 1d b0 2f ec e8 36 66 5e de af 39 4e 76 ce b4 fd 7f 1d 03 7d 1e 48 35 e8 49 04 d1 6e 5c bb c6 10 8c 54 35 1f c7 b8 05 b1 48 b2 42 2c 3c 4a d9 b9 dc 6f 39 36 c6 e4 f6 26 cc 50 c2 08 f7 96 29 c0"))
decrypt_message("298.034 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1c 5b c5 ec 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("298.036 EP1 OUT", bytes.fromhex("c0 00 35 01 00 00 01 9c 75 aa f4 50 27 9c a8 ad 59 01 f0 34 6b a3 02 a7 7b ec 31 32 83 b2 59 63 5f 91 9a b0 4b be 19 27 e3 a7 63 fb ba db 05 f8 2d 54 41 d7 c2 17 c0"))
decrypt_message("298.040 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef f8 5b 4b 15 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
print("----------")
decrypt_message("302.191 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef fb 5b 61 7d 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("302.193 EP1 OUT", bytes.fromhex("c0 00 25 01 00 00 0b 3c a4 61 17 56 89 6d d6 34 52 bf 58 d0 7e 1f b1 fe 84 b7 42 79 d1 f2 51 29 ba 1a 92 70 a5 bf c0"))
decrypt_message("302.405 EP1 OUT", bytes.fromhex("c0 00 25 01 00 00 0c f6 92 eb 1f e4 8e cc 66 05 2d 47 e5 d9 6e 50 e6 16 48 86 50 4c 0b 98 52 ac 29 00 65 4a 45 a3 c0"))
decrypt_message("302.409 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1e 5b f6 5c 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("302.410 EP1 OUT", bytes.fromhex("c0 00 45 01 00 00 0f 6b 63 67 c1 86 38 38 36 02 88 fe ba 09 71 0d 8f 1a 26 18 1c 18 72 50 7a 8e e7 59 ed 24 bf e7 f5 c8 9c 0d b2 e7 92 3f 73 c2 a3 2e 7c b3 e7 65 da 42 01 6f f5 80 d4 8f 46 01 18 04 ba cd fe 1b c0"))
decrypt_message("302.414 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1c 5b c5 ec 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("302.417 EP1 OUT", bytes.fromhex("c0 00 45 01 00 00 01 cb 3a 57 03 ba a3 8d e6 f0 0d 1e f2 2d 73 f4 b0 76 2f a8 1b 9c 17 8b 60 13 3c e2 a4 5f b9 bc 47 c8 c5 9e 75 94 2d 82 4f f4 84 5e 8d b5 0c 13 0b 8a 16 b8 3c eb 2d cc 12 f1 ec a9 cb cd bb a6 c0"))
decrypt_message("302.420 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1c 5b c5 ec 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("302.431 EP1 OUT", bytes.fromhex("c0 00 45 01 00 00 01 3c 29 26 2b e1 ca 60 d7 cc 4e d5 04 db 90 13 bd 24 eb 81 60 85 ad 64 23 60 46 16 20 e5 67 04 f6 c5 6e de 35 74 50 de 6f c5 20 d0 f9 2c bf c0 96 39 13 84 8f de 0a 9f 78 42 c8 91 f0 2d 89 37 c0"))
decrypt_message("302.437 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1c 5b c5 ec 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("302.441 EP1 OUT", bytes.fromhex("c0 00 45 01 00 00 01 3a 79 dd 19 45 51 69 1a 9d 56 ec ca 15 b0 6a a4 58 77 74 70 07 22 4b a0 0d 72 25 ad 93 d9 ea 8a 51 8a f6 3b 18 de 8c a6 3d b1 42 06 ef 0b 59 17 25 a5 72 25 ee 53 32 25 e1 fc 79 36 ee da b2 c0"))
decrypt_message("302.448 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1c 5b c5 ec 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("302.452 EP1 OUT", bytes.fromhex("c0 00 45 01 00 00 01 1f 43 c9 b7 ee 3e 18 b4 4b 1e d0 d4 1c eb 2c 94 0c 47 d5 c4 f3 55 b8 f1 b0 67 35 3b 09 df 29 10 8c 54 35 1f c7 b8 05 b1 48 b2 42 2c 3c 4a d9 b9 dc 6f 39 36 c6 e4 f6 26 cc 50 c2 08 f7 96 29 c0"))
decrypt_message("302.455 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1c 5b c5 ec 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
print()
print("all devices detected and list confirmed complete")
print("going to retrieve info from device roller hall")
decrypt_message("334.236 EP1 OUT", bytes.fromhex("c0 00 25 01 00 00 05 f3 ba 56 64 00 11 fa 0e 85 23 71 01 97 59 fd ab b3 dc 85 82 37 51 95 55 dd fc 78 d2 0b 2f f7 c0"))
decrypt_message("334.238 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef f8 5b 4b 15 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("334.291 EP2 IN ", bytes.fromhex("c0 00 35 01 00 00 04 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d 97 13 32 a6 81 c9 8b 7c 69 4d 91 15 b3 75 ef 6c 05 97 8c 3e d9 05 ac 2c b6 83 0e 40 e8 ca 40 37 c0"))
decrypt_message("334.292 EP1 OUT", bytes.fromhex("c0 00 25 01 00 00 0b 6e 35 8b 1f 4a 9d 1e cd c1 9e 2b a1 cc 74 13 02 e1 60 b3 5d 1d e5 b6 9b c6 e9 c7 14 57 d8 74 c0"))
print()
print("will identify device roller hall")
decrypt_message("355.675 EP1 OUT", bytes.fromhex("c0 00 35 01 00 00 0f c4 99 2d 65 d2 e8 2b 82 98 13 c0 e6 d1 d2 71 ff 26 5a f6 36 cb 70 62 00 eb b7 9c 4e 8d 94 05 45 59 c7 e0 58 18 0f 57 84 20 6f fd d3 00 bf 05 c0"))
decrypt_message("355.677 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef f8 5b 4b 15 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("355.752 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 06 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d d4 1f c6 40 29 1b 89 81 bf cf 19 cf 46 a7 75 00 c0"))
decrypt_message("355.753 EP1 OUT", bytes.fromhex("c0 00 25 01 00 00 0b 7a d3 75 e9 e1 49 ba 23 1b ec db cf 6e 5b 0f 15 f0 12 3d c1 5e 45 85 98 6f 74 2b 7a d0 2f 63 c0"))
print()
print("finished identifying")
print("will retrieve info from roller nils")
decrypt_message("416.365 EP1 OUT", bytes.fromhex("c0 00 25 01 00 00 05 81 01 ff 10 ad 03 25 e5 fa d5 28 83 f3 15 ed 91 a1 73 82 31 29 a1 24 f1 eb 2f 19 eb 3b 57 cd c0"))
decrypt_message("416.367 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef f8 5b 4b 15 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("416.405 EP2 IN ", bytes.fromhex("c0 00 35 01 00 00 04 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d 97 13 32 a6 81 cc 8d 7e 61 47 94 15 95 7d ef 4a 6f 28 62 14 21 96 c6 d2 66 11 c0 77 18 ba 25 60 c0"))
decrypt_message("416.406 EP1 OUT", bytes.fromhex("c0 00 25 01 00 00 0b 7c a1 f7 7a 5b 0b d4 eb df 3c 4e 99 ac b6 07 ff cd 92 9f 4c ae 95 0c 8e 55 be ed 22 45 f1 6b c0"))
print()
print("finished retrieving roller nils")
print("will retrieve window hall")
decrypt_message("442.520 EP1 OUT", bytes.fromhex("c0 00 25 01 00 00 05 ae ae f7 31 f5 cb 0c 09 2a 05 b3 77 9c c8 23 c0 09 d5 71 e7 73 05 f1 e9 48 56 b3 6d 45 d0 d6 c0"))
decrypt_message("442.523 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef f8 5b 4b 15 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("442.560 EP2 IN ", bytes.fromhex("c0 00 35 01 00 00 04 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d 97 13 32 a6 81 cc 8d 7e 61 47 94 15 b3 75 ef 55 44 be 68 e1 ff 02 1c 09 74 98 1b c8 bd 8d 7d f7 c0"))
decrypt_message("442.561 EP1 OUT", bytes.fromhex("c0 00 25 01 00 00 0b e7 5b 79 f7 a1 be fb 48 9d 95 45 81 2d bc c0 d8 d3 26 42 95 72 70 92 df 16 59 5c 35 44 72 7f c0"))
print()
print("finished")
print("will retrieve window nils")
decrypt_message("457.677 EP1 OUT", bytes.fromhex("c0 00 25 01 00 00 05 e8 72 67 8a 7a fb e5 49 0c 75 27 b7 44 e0 d0 87 b6 03 84 a7 80 fa 2f e6 3f bb d1 25 d5 1c 9b c0"))
decrypt_message("457.681 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef f8 5b 4b 15 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("457.721 EP2 IN ", bytes.fromhex("c0 00 35 01 00 00 04 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d 97 13 32 a6 81 cc 8d 7e 61 47 94 15 95 7d ef 4a 6f 28 62 14 21 96 c6 d2 66 11 c0 77 18 ba 25 60 c0"))
decrypt_message("457.722 EP1 OUT", bytes.fromhex("c0 00 25 01 00 00 0b 92 78 1d 1b 0d ea 51 54 78 74 ff 40 41 33 31 8b 7f d8 db a5 b6 b5 90 dd ee ae 2d 22 aa 84 39 c0 "))
print()
print("finished")
print("will retrieve window hall")
print("again")
decrypt_message("478.762 EP1 OUT", bytes.fromhex("c0 00 25 01 00 00 05 21 ef 26 b4 b7 48 56 ba f8 51 93 cf c9 35 42 f4 17 c6 03 8a 1d ac c1 21 a5 25 9b 6a 2f 02 d6 c0"))
decrypt_message("478.764 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef f8 5b 4b 15 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("478.802 EP2 IN ", bytes.fromhex("c0 00 35 01 00 00 04 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d 97 13 32 a6 81 cc 8d 7e 61 47 94 15 b3 75 ef 55 44 be 68 e1 ff 02 1c 09 75 98 02 10 bd 8d 7d f7 c0"))
decrypt_message("478.803 EP1 OUT", bytes.fromhex("c0 00 25 01 00 00 0b 90 85 dc 47 fe 92 41 9a e9 d8 40 8c 45 4e f1 9c b5 01 a2 49 ca 8a b0 d4 c4 40 31 10 94 45 ab c0 "))
print()
print("will identify win hall")
decrypt_message("489.379 EP1 OUT", bytes.fromhex("c0 00 35 01 00 00 0f 3d de 7f 55 54 59 3a 58 7d d5 3d f4 b4 25 25 4a a5 c3 b1 28 34 2f a4 58 f6 22 85 15 28 92 5a e8 80 2d f7 0f eb d9 a0 23 56 da 28 6a 4d 02 9e c0"))
decrypt_message("489.381 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef f8 5b 4b 15 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("489.435 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 06 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d d4 1f c6 40 29 1b 8e 81 f2 c7 19 cf 46 a7 75 00 c0"))
decrypt_message("489.436 EP1 OUT", bytes.fromhex("c0 00 25 01 00 00 0b 80 eb 0e 64 e8 08 5c 92 ea ce 52 cd 04 b4 40 95 9b ee 4c e1 5c d2 b3 5b d9 45 bf f3 5c b3 d0 c0"))
print("----------")
decrypt_message("494.369 EP1 OUT", bytes.fromhex("c0 00 35 01 00 00 0f 87 39 2f c0 74 59 82 76 f4 f1 8b b8 ae 89 a6 9c 3d f4 86 bc 94 f5 71 3e 00 56 7f 6b 5f bb 13 e8 80 2d f7 0f eb d9 a0 23 56 da 28 6a 4d 02 9e c0"))
decrypt_message("494.372 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef f8 5b 4b 15 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("494.425 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 06 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d d4 1f c6 40 29 1b 87 81 25 df 19 cf 46 a7 75 00 c0"))
decrypt_message("494.426 EP1 OUT", bytes.fromhex("c0 00 25 01 00 00 0b 0c b8 60 25 e9 00 3f 60 8f 50 a2 f7 7d a1 c2 db 0c 7e c2 ed af 6b 43 4f 29 a0 31 b0 d9 09 28 c0"))
print("----------")
decrypt_message("499.370 EP1 OUT", bytes.fromhex("c0 00 35 01 00 00 0f 39 4b 1d c5 43 6a 87 a8 e6 a7 4e 10 c4 d9 29 89 34 24 fc 53 79 8c 31 80 2b 52 0b c8 85 d1 0a e8 80 2d f7 0f eb d9 a0 23 56 da 28 6a 4d 02 9e c0"))
decrypt_message("499.372 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef f8 5b 4b 15 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("499.425 EP2 IN ", bytes.fromhex("c0 00 25 01 00 00 06 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d d4 1f c6 40 29 1b 83 81 42 bf 19 cf 46 a7 75 00 c0"))
decrypt_message("499.426 EP1 OUT", bytes.fromhex("c0 00 25 01 00 00 0b b1 cb a4 67 66 7c b8 d4 b4 18 77 6b cb 2c 64 47 48 eb 4d 08 c7 4c 00 c3 ca 23 3e 7d ef e1 7c c0"))
print()
print()
print()
print()
print()

# from Sam Grimee: full-sequence-a.log.gz
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 25 01 00 00 06 5a d2 b5 aa 04 9f 4c d3 f6 bb 65 73 c1 1c a9 ec c1 93 f7 72 9a 44 f1 35 0d 81 2c b6 94 9f 05 c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 95 01 00 00 04 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d 96 f2 32 59 6e 9b dc 25 35 1e d4 00 eb 25 c2 09 bf 25 86 2f c6 b5 35 25 be 03 3c 12 5d 69 24 97 70 66 9a cc e6 78 ca b4 ce ee 2c e3 3d 06 9b 4a 9d 09 e1 77 05 1a b1 bf 37 05 83 61 e7 7e e8 f9 47 bb 53 dd 0e 7a 22 a8 de e1 42 60 f4 e6 31 72 fb f1 44 17 7f fd 0d 9d c8 81 34 ce 70 45 eb 34 9d 09 e1 77 05 1a b1 bf 37 05 83 61 e7 7e e8 07 9d 09 e1 77 05 1a b1 bf 37 05 c2 e0 4d d4 42 ad c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 25 01 00 00 0c 73 72 d0 d2 66 7c 52 5d 9a 49 15 82 37 54 2f b7 a8 0d a4 82 d4 cf 79 8c 34 62 4a 16 9f bf f6 c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef fe 58 2d 5e 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 25 01 00 00 0c c9 b8 7e 9d f3 47 83 ed 84 3d 2c d2 bb 58 3f 69 3b f5 8f 3b 9d a4 bf 89 74 40 90 64 d9 f6 dc c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1e 5b f6 5c 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 25 01 00 00 03 71 3e e2 b5 e5 3c 63 3c cb 53 0d 95 59 01 8b 0b fb 48 ae 5a 3e 7a d2 04 91 c4 53 2c d2 18 65 c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef f8 5b 4b 15 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef fb 5b 61 7d 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 25 01 00 00 0b cb ce ea 54 d3 b3 b3 34 9d d1 c4 27 13 43 b4 41 22 c6 b3 1d 9b 52 36 f6 db 7c 80 67 c8 65 fa c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 25 01 00 00 0c 38 23 8b a4 8e 44 15 59 3b 8f 0e 56 15 f2 f9 9a 6d 63 b2 0e 66 d7 9b d3 36 fa b5 a7 62 9a a7 c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1e 5b f6 5c 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 25 01 00 00 03 c1 1f 76 e6 5a cb 39 b7 4f 9c 0e 57 2e 6d 55 6d a8 72 58 ba 08 51 e5 03 ce 82 b1 78 bc e4 96 c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef f8 5b 4b 15 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 45 01 00 00 05 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ce 3c 87 0c c0 60 16 95 cb 28 87 bf 16 a8 43 99 5c 73 07 db d2 e6 73 50 af 32 65 66 e2 03 01 f7 a5 a4 74 ac 25 7b 50 ed 97 44 a4 18 a7 c4 d6 cb c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 25 01 00 00 0b 54 c5 f2 14 b6 33 a5 d2 86 f7 c0 47 ea 3a 72 9f e1 00 3f d6 c0 32 9e 3a e1 cf 36 e3 88 88 46 c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef fb 5b 61 7d 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 25 01 00 00 0b 5d 3d 2b f7 90 08 aa b0 37 50 0d f3 bb 0f 4b 15 2a 33 80 a9 b5 c0 5d 5b 48 6a 36 f3 5e 22 7c c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 25 01 00 00 05 b5 43 4e 4c ab df c5 b0 1e bb 65 d0 08 5c b6 51 d1 ed fc 30 83 65 d0 91 4d 53 2c 9b 70 d6 67 c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef f8 5b 4b 15 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 35 01 00 00 08 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d 8f c6 85 a4 99 7a 0e 94 f8 b0 b6 9b ef 56 c8 cd 7e 95 82 1b 31 4b 98 09 2b eb c6 03 33 07 0d ae c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 25 01 00 00 0b c0 fc 74 4a 3b 0d 2b 01 ab 7d 1d f0 02 b8 b9 47 53 4e 54 0c 1e be ea 31 81 a3 da 44 11 62 80 c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 25 01 00 00 0c 20 9b bb 4c 69 45 a8 5e e7 f8 2c 9a fc f4 cf 58 b2 99 57 29 7e 77 87 6c 2d 79 db 24 3f 8d 29 c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1e 5b f6 5c 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 45 01 00 00 01 e0 d9 eb 60 8b 4d 27 08 2d 9c 9f 77 53 fb 8d 57 75 cd 62 d2 42 3a a5 61 53 35 21 ff 9b d4 8b 7d 9f 7f d2 d8 cf fd 9f d6 f5 af c5 e6 df ef d0 18 80 ee a0 dc 06 b5 33 91 b0 bc 19 c2 c1 26 d4 c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1c 5b c5 ec 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 35 01 00 00 01 f4 bf e1 f1 dd ca 62 98 22 12 e4 29 d1 f6 2f e9 c9 71 53 b3 a2 f2 45 43 3e 22 87 31 69 74 fa 4c 2c 70 8e d0 b7 b9 0d 02 6c e2 4d ac e0 e7 f3 c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef f8 5b 4b 15 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 45 01 00 00 05 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ce 3c 87 0c c3 60 16 28 7f 4e 87 bf 42 c3 2c 99 a6 5a 8b 85 16 df 2a 42 21 85 66 b7 d7 0f 42 2d e2 78 ea 37 04 09 6e bd 00 c8 b6 7a f1 13 84 8e c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 25 01 00 00 0b 0c ee 2a 63 a6 6a f3 e4 c6 80 3c b0 ae 2f 2e e3 aa 33 ad 2b b5 fc 4c f3 52 ea df 13 f1 c5 09 c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 45 01 00 00 05 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ce 3c 87 0c c3 60 16 90 c7 c6 87 bf 13 a4 ad 99 a1 36 f7 05 f6 46 c7 01 51 25 c3 98 f4 ba 24 dc 67 f2 26 e9 e7 90 82 80 31 f7 ca 8f 83 ef d6 bc c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 25 01 00 00 0b 3e 9e 3b 70 5f 56 52 b4 31 5d c5 c5 9e 94 85 a3 82 64 d5 5f a7 b5 c4 96 7e 49 22 6e 19 23 b4 c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 45 01 00 00 05 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ce 3c 87 0c c3 60 16 0a 0d 54 87 bf 13 a4 ad 99 4f 9c 3b f0 4a 1d 46 45 11 96 ae 68 75 66 db 90 e2 78 ea 37 04 09 6e bd 00 85 2e 7a f1 13 84 8e c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 25 01 00 00 0b a9 8c e0 af 1a 1f 6b 7a df 39 52 bf 4f ab 34 78 77 e2 d4 da 02 57 35 fc f2 ee 30 d6 1d 18 be c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 45 01 00 00 05 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ce 3c 87 0c c3 60 16 c1 a0 47 87 bf 42 c3 2c 99 b3 21 fa 7e b2 fd e8 30 e0 37 68 2e 3c e6 4a 73 67 f2 26 e9 e7 90 82 80 31 b9 6c 8f 83 ef d6 bc c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 25 01 00 00 0b f4 87 20 87 d6 8e 56 11 88 0a a2 7f 7f ac 4b 41 5d 99 36 76 f1 52 d6 30 1c 9b 39 0a d6 fd 65 c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef fb 5b 61 7d 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 25 01 00 00 0b 75 ef fd c3 ff 11 b1 43 d4 02 32 e1 4c 7f 7a c7 09 29 e7 cb a3 be 40 bb 48 b4 6c b4 4d fd 13 c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 25 01 00 00 0c dc 14 c5 f9 1c 30 c8 2a 17 d5 44 d8 6a 79 82 9b 4d 90 bc b5 94 69 42 51 8e d4 e9 67 24 30 64 c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1e 5b f6 5c 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 45 01 00 00 0f b2 f4 21 f6 4b 9f c0 42 cb 54 e9 46 4a 1d 0b 40 0e 15 b3 ef c5 59 9c 86 0c 28 eb ff 15 ed ad f5 c8 9c 0d b2 e7 92 3f 73 c2 a3 2e 7c b3 e7 65 da 42 01 6f f5 80 d4 8f 46 01 18 04 ba cd fe 1b c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1c 5b c5 ec 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 45 01 00 00 01 86 47 d3 0c 7c 58 40 84 00 84 18 6a 73 67 c2 01 fd 31 e3 08 dd c0 de e3 bd c6 f8 3c 06 59 2e d7 14 5b 16 d3 60 02 c3 34 d7 ef 56 26 46 5b e9 0b bf 99 76 76 56 54 bb ab 14 2d a7 bd d8 47 df c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1c 5b c5 ec 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 45 01 00 00 01 65 d6 95 40 a5 6a 52 36 7b 0e 18 69 74 fc 05 a0 a2 0c 47 f5 dd 97 3d 77 23 12 d1 7f 4e c1 b7 d6 90 35 87 5f 1a c2 06 cc 71 08 08 d9 43 e3 e9 51 b7 52 52 32 7c 82 fc eb 20 38 de 11 70 83 eb c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1c 5b c5 ec 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 45 01 00 00 01 a2 54 0f a6 62 9e 36 3a 42 08 46 e3 79 93 c8 7d 6c e4 7c 65 85 4d 81 a1 5b 98 80 31 e5 16 48 09 23 e8 81 89 50 a3 e4 82 ab 1a 7d 23 2b 4c 31 b8 ee a6 29 94 da d4 f8 47 9e ca 24 d2 e1 96 ca c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1c 5b c5 ec 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 45 01 00 00 01 dc 5f 9d ed 30 63 a5 5c 05 4f 17 ee fb 4e e1 e9 17 31 72 ca 82 af 2c c2 0e 43 16 ba ed e6 a6 c4 19 11 f5 a7 44 f5 46 68 c1 ae 6e 20 b0 8f e4 38 80 dc 57 f0 05 a7 2b 63 84 63 b9 92 3a 21 d3 c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1c 5b c5 ec 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 45 01 00 00 01 0f a5 92 1b e9 b1 0b 88 fd bb 0f 3b 58 50 5d a4 4b e5 5b 4e 15 dc 1e 70 23 5d 9c 66 61 49 71 7d 9f 7f d2 d8 cf fd 9f d6 f5 af c5 e6 df ef d0 18 80 ee a0 dc 06 b5 33 91 b0 bc 19 c2 c1 26 d4 c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1c 5b c5 ec 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 35 01 00 00 01 27 00 3d 6e de d6 95 64 51 7e 95 9b cb 83 cf e0 53 02 5b 9b 10 a6 a9 a7 f0 21 08 ec 88 5e 01 19 27 e3 a7 63 fb ba db 05 f8 2d 54 41 d7 c2 17 c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef f8 5b 4b 15 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef fb 5b 61 7d 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 25 01 00 00 0b 2c fb 5f c3 5d 4f 87 50 58 6c 26 1f 17 07 ba 6d 7f f2 5e 2d 99 b9 f0 b5 5c b0 51 34 c6 52 1e c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 25 01 00 00 0c 7d f0 e2 23 b9 a3 4a 68 81 50 c1 c6 59 4f 33 60 ad 41 8c 07 9f 6e a8 c7 76 fa b6 55 a6 20 dd c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1e 5b f6 5c 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 45 01 00 00 0f 35 9b 31 72 17 22 fb 46 24 12 d9 d8 4d d3 56 d5 46 8a 25 bd c5 67 a7 eb 61 61 64 49 f8 18 c0 f5 c8 9c 0d b2 e7 92 3f 73 c2 a3 2e 7c b3 e7 65 da 42 01 6f f5 80 d4 8f 46 01 18 04 ba cd fe 1b c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1c 5b c5 ec 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 45 01 00 00 01 bc b9 c4 66 6c 7d a6 39 6d 41 57 3c f6 74 d2 3c b4 96 52 8b 49 af ba e2 ed f6 ba 01 f1 a4 66 d7 14 5b 16 d3 60 02 c3 34 d7 ef 56 26 46 5b e9 0b bf 99 76 76 56 54 bb ab 14 2d a7 bd d8 47 df c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1c 5b c5 ec 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 45 01 00 00 01 29 55 36 0d 95 e2 a9 ae ec c0 c3 2f 27 3f 55 38 6c 41 2d 11 77 37 e5 ee 6e 28 0a 6c e0 fc 22 d6 90 35 87 5f 1a c2 06 cc 71 08 08 d9 43 e3 e9 51 b7 52 52 32 7c 82 fc eb 20 38 de 11 70 83 eb c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1c 5b c5 ec 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 45 01 00 00 01 6c 4d 15 6a 26 f8 52 a5 84 f6 39 c9 23 46 d6 5f 1d 80 ac 6b a2 b7 80 1d 0e 36 a2 21 7a 35 52 09 23 e8 81 89 50 a3 e4 82 ab 1a 7d 23 2b 4c 31 b8 ee a6 29 94 da d4 f8 47 9e ca 24 d2 e1 96 ca c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1c 5b c5 ec 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 45 01 00 00 01 10 aa 6f 9d 7e 79 97 cc ce 77 38 e5 2f 87 e5 7d f4 b4 f3 22 04 a2 af 64 f8 20 aa d5 d7 ee 49 c4 19 11 f5 a7 44 f5 46 68 c1 ae 6e 20 b0 8f e4 38 80 dc 57 f0 05 a7 2b 63 84 63 b9 92 3a 21 d3 c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1c 5b c5 ec 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 45 01 00 00 01 fc 6a a7 07 32 a9 4c eb 0b 78 f8 26 09 2d 98 05 c4 a1 79 f8 99 3b dd 4a 2a 61 f8 f0 99 c5 ec 7d 9f 7f d2 d8 cf fd 9f d6 f5 af c5 e6 df ef d0 18 80 ee a0 dc 06 b5 33 91 b0 bc 19 c2 c1 26 d4 c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1c 5b c5 ec 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 25 01 00 00 05 92 32 6b b0 f1 e0 ce de 7f 9b 89 ba 70 42 fa 89 52 c9 31 c1 cc 49 47 88 b2 96 fd 2b ef 44 c7 c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef f8 5b 4b 15 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 35 01 00 00 04 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d 97 13 32 a6 81 c9 8b 7c 69 4d 91 15 95 7d ef 4a 6d e2 41 90 3a d2 cf bd fe 4f 6d 7b e7 2a d3 83 c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 25 01 00 00 0b a0 bc 55 00 67 16 9b 1c 88 8b f4 1c d1 9d a1 b6 51 83 87 f1 9f 71 55 58 9f ff c8 ae 60 77 4c c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 25 01 00 00 01 66 12 4f c3 9b dd 04 5c af e0 9b a0 22 d7 ac 73 52 a6 bf 40 fd 2d b2 11 d0 ae 87 7f c6 95 c7 c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef f8 5b 4b 15 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 45 01 00 00 0e 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d 63 ed 57 1e 3a 14 40 9b 51 db 0a 7b ce ec 21 86 b2 37 d6 cf c7 88 0e cd e3 f2 db 2c c4 a1 73 58 bc 2a 70 4c a3 4d e3 58 35 c0 cc 0b f5 3a 3d b0 c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 25 01 00 00 0b cf 7f ab 5c 76 d2 b9 94 43 30 d4 29 54 ff 06 98 b5 96 dc 76 b6 fb 47 aa 4e c4 f6 c6 5c 51 dd c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 25 01 00 00 05 b7 2c 31 94 b1 28 01 52 87 b6 72 ce 43 15 2c c9 e1 f8 e0 45 1d 35 eb 5b 33 c3 25 26 b7 78 b5 c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef f8 5b 4b 15 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 35 01 00 00 04 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d 97 13 32 a6 81 cc 8d 7e 61 47 94 15 b3 75 ef 55 44 be 68 e1 ff 02 1c 09 06 98 d8 bc bd 8d 7d f7 c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 25 01 00 00 0b 5b 8d ec e2 80 7f 71 e6 d2 25 82 18 d2 22 58 2c 7d 86 9b 20 49 8c 6d 95 27 d0 b0 e0 ab 10 7f c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 25 01 00 00 01 d7 b6 58 3c 16 ca f5 e9 44 57 df fa 2f 9d d6 e3 9e f2 74 ba e5 ce 5a 64 91 56 e8 41 74 5c 88 c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef f8 5b 4b 15 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 45 01 00 00 0e 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d 63 ed 57 1e 3a 14 40 9b 51 db 0a 7b ce ec 53 38 c0 bd a4 4e 5d 5c ba 65 27 17 4a ce e1 c5 62 3d 59 49 e3 d0 5d 3e 13 42 88 53 37 34 f3 1c 11 01 c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 25 01 00 00 0b 1e 81 f8 3a 5e 0d 9c e6 44 85 0f f1 18 d2 ca 53 e1 c5 1c ce 60 38 8f f8 9c cd fc b2 6e c7 45 c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 25 01 00 00 05 da 17 a1 26 ee cd 63 08 62 76 55 5c fc 9e c7 78 55 19 ab 91 4d 1b 1f 1f 22 bb a2 03 cc 09 64 c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef f8 5b 4b 15 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 35 01 00 00 04 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d 97 13 32 a6 81 c9 8b 7c 69 4d 91 15 b3 75 ef 55 c5 74 32 32 66 f9 b7 85 03 1b 2f d0 a8 17 c4 2a c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 25 01 00 00 0b eb bc c3 42 87 65 56 b2 2a 5b d2 45 f4 ac 31 b9 e6 4a 62 78 b1 60 1f 6b 62 46 c1 12 41 55 ca c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 25 01 00 00 01 23 af ba 8e a4 c6 6c 41 2f 49 44 29 6a fb 54 3d d2 ac 47 fc d8 df eb 1c d6 ef 7a df ad 94 8a c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef f8 5b 4b 15 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 45 01 00 00 0e 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d 63 ed 57 1e 3a 14 40 9b 51 db 0a 7b ce ec 11 32 3f b6 f3 23 d6 7e 55 7a 8c 2c 08 ac 45 09 09 20 42 69 80 87 3c cb 12 94 cf f6 c4 a5 29 8c b1 45 c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 25 01 00 00 0b 7f e4 fd 63 f6 da 0d 45 6a 4d f7 af e8 00 2d 85 c8 5d 4d 2c 09 c6 45 46 14 49 6c bf f8 da 87 c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 25 01 00 00 05 8f 5b 97 19 37 a5 6d 2b 4e 65 59 30 f1 3f 05 0c d0 39 43 e9 70 c0 2f 31 41 6c f8 38 25 ab 5a c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef f8 5b 4b 15 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 35 01 00 00 04 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d 97 13 32 a6 81 cc 8d 7e 61 47 94 15 95 7d ef 4a 6f 28 62 14 21 96 c6 d2 18 11 aa a3 18 ba 25 60 c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 25 01 00 00 0b f4 e4 e1 f5 c1 45 93 fa b2 9b 9a 20 7b bc 3a cb 1f 1d d8 9d 6b 89 0a c3 f7 2a a1 e6 3d 51 ad c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 25 01 00 00 01 dc 8f 5e 91 84 4b cc 28 d2 15 99 6a 88 09 c5 31 13 f3 70 f0 9c 0a 5e a1 7a 81 66 19 b4 7a f4 c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef f8 5b 4b 15 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 45 01 00 00 0e 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d 63 ed 57 1e 3a 14 40 9b 51 db 0a 7b ce ec 53 38 c0 bd a4 4e 5d 5c ba 17 13 65 7e ce e1 c5 62 3d a8 7b 87 dc a6 d2 16 9d 1c e4 a4 c3 b4 c8 3c f6 c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 25 01 00 00 0b e3 ec 30 33 73 35 cc de 5a 9b cb ae 4c 36 d7 f0 34 d1 b7 3d 29 0f 63 2a 3f b1 0d 97 a5 d5 f4 c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 25 01 00 00 0c 62 63 43 18 62 34 06 2f fc ce f0 6b d9 ed 2b 36 e7 02 05 5a 29 3f ce 02 7e 66 69 90 40 b3 c9 c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1e 5b f6 5c 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 45 01 00 00 0f c9 27 23 30 be 50 48 a2 5c b8 f6 00 d1 51 50 49 25 39 c0 cf 6f 69 7c d3 ad 3d 2c 93 b3 58 a7 f5 c8 9c 0d b2 e7 92 3f 73 c2 a3 2e 7c b3 e7 65 da 42 01 6f f5 80 d4 8f 46 01 18 04 ba cd fe 1b c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1c 5b c5 ec 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 45 01 00 00 01 63 d0 8b e8 e9 ea 6e 0c 01 54 53 35 2f 3a 23 30 b8 c0 b4 51 a0 61 72 60 66 55 1a 74 50 48 92 d7 14 5b 16 d3 60 02 c3 34 d7 ef 56 26 46 5b e9 0b bf 99 76 76 56 54 bb ab 14 2d a7 bd d8 47 df c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1c 5b c5 ec 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 45 01 00 00 01 ef 78 09 83 f7 28 d8 d1 df 07 56 60 fa b3 66 64 91 c3 31 0c 21 72 c0 c3 13 59 0f e7 3d b0 94 d6 90 35 87 5f 1a c2 06 cc 71 08 08 d9 43 e3 e9 51 b7 52 52 32 7c 82 fc eb 20 38 de 11 70 83 eb c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1c 5b c5 ec 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 45 01 00 00 01 d9 dc 40 d8 28 34 cb 53 db 4a 24 f7 63 e3 3a 4f d5 64 63 58 ff 38 cc 44 9d 8c 9a 21 7f 16 cf 09 23 e8 81 89 50 a3 e4 82 ab 1a 7d 23 2b 4c 31 b8 ee a6 29 94 da d4 f8 47 9e ca 24 d2 e1 96 ca c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1c 5b c5 ec 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 45 01 00 00 01 b9 13 dd 6e 0f 50 41 74 de d4 1c f4 48 6f de 5f 09 5e 52 8f b9 37 d1 95 e8 1b ac 71 4b db 11 c4 19 11 f5 a7 44 f5 46 68 c1 ae 6e 20 b0 8f e4 38 80 dc 57 f0 05 a7 2b 63 84 63 b9 92 3a 21 d3 c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1c 5b c5 ec 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 25 01 00 00 03 85 57 29 8f 31 06 33 9d 2b c8 8d 88 e2 f7 c9 81 45 65 67 74 e6 06 97 54 00 d9 9f 92 80 23 a3 c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef f8 5b 4b 15 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef fb 5b 61 7d 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 25 01 00 00 0b 46 09 47 cd 88 d4 c4 09 c7 fc 58 00 4c c3 68 ff 0a ff 1f df 4a f6 86 58 80 da 6c 0d e1 cb dd c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 25 01 00 00 0c 84 06 90 94 a8 72 60 19 ac 5d 97 e5 ee c7 79 2d ab 43 7f e3 0b 9a 9b 1b d2 dd 8e 10 67 db 41 c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1e 5b f6 5c 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 45 01 00 00 0f de 27 b5 d9 6a fd 2d 39 be 35 3a f0 f8 82 24 c0 5f 5a f5 6e 27 d9 fc ca d9 40 5d e7 32 b0 04 f5 c8 9c 0d b2 e7 92 3f 73 c2 a3 2e 7c b3 e7 65 da 42 01 6f f5 80 d4 8f 46 01 18 04 ba cd fe 1b c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1c 5b c5 ec 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 45 01 00 00 01 93 93 46 ba 37 39 46 f2 c0 79 9e 99 e1 6e ef ee 77 e2 23 2d 55 03 1c 2b 51 5f 7f 32 24 6b 31 d7 14 5b 16 d3 60 02 c3 34 d7 ef 56 26 46 5b e9 0b bf 99 76 76 56 54 bb ab 14 2d a7 bd d8 47 df c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1c 5b c5 ec 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 45 01 00 00 01 70 ec de 28 6c 30 d1 d8 6e f4 38 61 32 c7 96 52 96 cb 84 0c 57 e0 65 3a 36 ef 69 ea ac 03 62 d6 90 35 87 5f 1a c2 06 cc 71 08 08 d9 43 e3 e9 51 b7 52 52 32 7c 82 fc eb 20 38 de 11 70 83 eb c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1c 5b c5 ec 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 45 01 00 00 01 11 c1 4d 4f 64 2e 22 88 7d e7 0d 35 1a 5d 26 3e 40 ba c8 a0 1b 81 af d5 c8 22 88 bd d3 eb db 09 23 e8 81 89 50 a3 e4 82 ab 1a 7d 23 2b 4c 31 b8 ee a6 29 94 da d4 f8 47 9e ca 24 d2 e1 96 ca c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1c 5b c5 ec 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 45 01 00 00 01 50 0c 53 0a d1 81 93 dc 53 1a 57 23 14 22 30 49 10 87 9a 40 35 e6 59 22 ea de 45 8e d9 21 2a c4 19 11 f5 a7 44 f5 46 68 c1 ae 6e 20 b0 8f e4 38 80 dc 57 f0 05 a7 2b 63 84 63 b9 92 3a 21 d3 c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1c 5b c5 ec 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 25 01 00 00 03 42 32 ec a9 a3 c9 97 7b 43 ec 4b 90 c8 04 38 b6 8e d0 db d1 be 58 b6 b4 08 5c 88 a2 21 b0 59 c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef f8 5b 4b 15 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef fb 5b 61 7d 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 25 01 00 00 0b 9e c8 a0 46 ab 66 37 ed 37 f2 ee 07 5a ad df ac 91 c9 77 7b 9d 0f 6b e6 65 db b3 36 31 8f 90 c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 25 01 00 00 0c 16 9a 68 f5 d8 c8 0d d7 9c a4 d5 f7 3a 94 3d 20 b2 fc 74 cc 00 6e 18 75 85 cd 13 16 eb 63 86 c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1e 5b f6 5c 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 45 01 00 00 0f 48 1a 36 75 9b 28 17 5e 3c 2d 4f d0 c8 6c 52 60 5b 7b 9a 73 da 6c 5e f7 ee cc 73 b2 9f 3b e3 f5 c8 9c 0d b2 e7 92 3f 73 c2 a3 2e 7c b3 e7 65 da 42 01 6f f5 80 d4 8f 46 01 18 04 ba cd fe 1b c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1c 5b c5 ec 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 45 01 00 00 01 42 cd e1 c2 89 2f 24 74 cd f6 3b 92 59 64 5a 0d 63 3e c5 7c 7f 4b 7f 55 81 a5 d5 b7 63 61 86 d7 14 5b 16 d3 60 02 c3 34 d7 ef 56 26 46 5b e9 0b bf 99 76 76 56 54 bb ab 14 2d a7 bd d8 47 df c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1c 5b c5 ec 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 45 01 00 00 01 01 7f 06 ea eb 20 a4 c4 a1 17 af 0f b8 1c 31 ef 15 d2 5a c3 ca c5 67 f6 34 a4 1d ae 6a ba 73 d6 90 35 87 5f 1a c2 06 cc 71 08 08 d9 43 e3 e9 51 b7 52 52 32 7c 82 fc eb 20 38 de 11 70 83 eb c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1c 5b c5 ec 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 45 01 00 00 01 9d 83 57 b8 32 de 3d 5a a7 69 ea 4c 45 17 99 9f 7b 44 ca f3 d1 d5 4e 5b cd 52 69 52 57 10 33 09 23 e8 81 89 50 a3 e4 82 ab 1a 7d 23 2b 4c 31 b8 ee a6 29 94 da d4 f8 47 9e ca 24 d2 e1 96 ca c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1c 5b c5 ec 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 45 01 00 00 01 16 43 50 68 ef d8 68 05 48 b5 bb 7d 0b 66 38 f5 e2 13 cd 24 d1 4c 5f 67 4b e2 95 ae 34 d4 10 c4 19 11 f5 a7 44 f5 46 68 c1 ae 6e 20 b0 8f e4 38 80 dc 57 f0 05 a7 2b 63 84 63 b9 92 3a 21 d3 c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1c 5b c5 ec 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 35 01 00 00 01 c5 9e 76 98 2c 24 bc 10 63 15 be cd 35 a7 8f 33 7d e6 f4 91 e0 53 07 c5 fe f3 72 7e 58 57 2b 4c 2c 70 8e d0 b7 b9 0d 02 6c e2 4d ac e0 e7 f3 c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef f8 5b 4b 15 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef fb 5b 61 7d 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 25 01 00 00 0b ef a7 17 16 5f 9b 5a 1f 41 a7 3c 1c 3c 45 72 54 2d 26 06 33 4d f4 10 56 a2 b4 a5 79 4d 09 9e c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 25 01 00 00 0c 0c 7e ff af 5c a3 c8 3e 3f 60 24 2a 50 2c 49 d0 f1 98 d0 45 ad d1 19 27 53 03 ce 1c 30 c7 99 c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1e 5b f6 5c 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 45 01 00 00 0f 7b f9 b9 dd 99 7a 75 83 47 ff f2 d3 5d a4 67 4d e4 b7 e0 9a 66 62 06 5e e3 ec 32 1b 8d 77 48 f5 c8 9c 0d b2 e7 92 3f 73 c2 a3 2e 7c b3 e7 65 da 42 01 6f f5 80 d4 8f 46 01 18 04 ba cd fe 1b c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1c 5b c5 ec 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 45 01 00 00 01 ec ac e5 20 48 29 3b 20 f9 d8 7f bd ef 88 cc 22 2d 24 28 88 7c 03 70 77 c4 91 cd 7e b5 c3 6c d7 14 5b 16 d3 60 02 c3 34 d7 ef 56 26 46 5b e9 0b bf 99 76 76 56 54 bb ab 14 2d a7 bd d8 47 df c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1c 5b c5 ec 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 45 01 00 00 01 7d 84 e8 6b 02 dc f7 a1 42 52 5d c1 e0 9b af ba df 56 9d 63 a1 7e 63 66 62 63 28 a4 0d 46 75 d6 90 35 87 5f 1a c2 06 cc 71 08 08 d9 43 e3 e9 51 b7 52 52 32 7c 82 fc eb 20 38 de 11 70 83 eb c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1c 5b c5 ec 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 45 01 00 00 01 80 e4 b6 2c dc 9b 67 fc 87 f2 56 6e 48 ff 7c bb b7 dd 2f 5c 03 ae a4 a2 a7 a6 5c 55 69 d3 9f 09 23 e8 81 89 50 a3 e4 82 ab 1a 7d 23 2b 4c 31 b8 ee a6 29 94 da d4 f8 47 9e ca 24 d2 e1 96 ca c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1c 5b c5 ec 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 45 01 00 00 01 48 26 1b 11 b1 d4 3a 8e b4 42 dc 05 ec b8 57 25 c5 e3 8d 44 8f b2 0e a0 a2 af 26 82 7c 83 34 c4 19 11 f5 a7 44 f5 46 68 c1 ae 6e 20 b0 8f e4 38 80 dc 57 f0 05 a7 2b 63 84 63 b9 92 3a 21 d3 c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1c 5b c5 ec 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 35 01 00 00 01 5d 5e 6a c5 b1 0b e4 57 69 3e 3d 63 3e 23 72 4c e7 28 a8 ef c1 65 9f 25 cf d6 52 7d 09 3f ca 19 27 e3 a7 63 fb ba db 05 f8 2d 54 41 d7 c2 17 c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef f8 5b 4b 15 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef fb 5b 61 7d 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 25 01 00 00 0b e7 cb ab df cc df 46 2c bc 26 7b 9d c2 5c eb 42 1e 52 23 c0 7d 4f 94 13 5a 33 6f 2e 5d 76 b7 c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 25 01 00 00 0c 3c 8a bb bf a4 81 b1 0a fa a0 a4 2d e0 28 d8 b9 15 d7 fc a5 cc 93 d8 b1 b2 af ac 8b ff b8 ec c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1e 5b f6 5c 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 45 01 00 00 0f c4 d9 1c 24 1a fc bd a9 ba 70 c9 1c 1d 7c db 1d 5f 69 16 45 87 18 39 9a 29 d2 cc 8b 07 5d f2 f5 c8 9c 0d b2 e7 92 3f 73 c2 a3 2e 7c b3 e7 65 da 42 01 6f f5 80 d4 8f 46 01 18 04 ba cd fe 1b c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1c 5b c5 ec 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 45 01 00 00 01 e4 fa ae 96 a2 4f f8 fc 54 93 20 ad b6 31 7e 05 47 92 af 7e 65 ec 2a 4a ff f0 a5 64 7e 47 cd d7 14 5b 16 d3 60 02 c3 34 d7 ef 56 26 46 5b e9 0b bf 99 76 76 56 54 bb ab 14 2d a7 bd d8 47 df c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1c 5b c5 ec 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 45 01 00 00 01 5a 12 c4 61 2f 16 25 0c 82 ee cd aa 8d 33 95 8b 51 14 1a 92 f9 19 01 63 8f 92 ae 2c c7 f4 9b d6 90 35 87 5f 1a c2 06 cc 71 08 08 d9 43 e3 e9 51 b7 52 52 32 7c 82 fc eb 20 38 de 11 70 83 eb c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1c 5b c5 ec 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 45 01 00 00 01 2e 77 ef 61 78 7e 46 b3 b8 7c fd b8 61 9c 85 ee 3d e2 3b 59 a4 35 a2 07 4e b3 1c b8 39 63 1f 09 23 e8 81 89 50 a3 e4 82 ab 1a 7d 23 2b 4c 31 b8 ee a6 29 94 da d4 f8 47 9e ca 24 d2 e1 96 ca c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1c 5b c5 ec 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 45 01 00 00 01 d7 aa 7e a4 3e fa 98 7a 84 24 1a f7 e3 e8 19 39 1e bc 13 6f 81 06 cb e3 bc d8 a4 a1 31 65 cb c4 19 11 f5 a7 44 f5 46 68 c1 ae 6e 20 b0 8f e4 38 80 dc 57 f0 05 a7 2b 63 84 63 b9 92 3a 21 d3 c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef 1c 5b c5 ec 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 25 01 00 00 05 74 07 8b 4d 97 0f 0c 30 21 b6 c0 b5 da 33 d1 f4 fb ce 6e 62 79 29 77 ed f3 be 6b bc 77 d5 13 c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef f8 5b 4b 15 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 35 01 00 00 04 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d 97 13 32 a6 81 c9 8b 7c 69 4d 91 15 b3 75 ef 55 c5 74 32 32 66 f9 b7 85 0c 1b ac 18 a8 17 c4 2a c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 25 01 00 00 0b 73 3e d7 81 7d 0c f6 97 b7 6e 19 e4 e9 d5 0a fc 47 df 28 cc 70 da f4 1e cf 0c 66 cb 4c a2 74 c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 35 01 00 00 0f 41 67 32 bc f5 7b c1 9c e2 7e f9 4e 71 be e0 8d 7b c0 5f b8 f6 ca 8c 12 3d 32 30 2a 40 27 80 92 bd b6 46 e8 a7 76 04 2b 88 89 ac 59 28 7c 72 c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef f8 5b 4b 15 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 25 01 00 00 06 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d d4 1f c6 40 29 1b fe 81 02 03 19 cf 46 a7 75 00 c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 25 01 00 00 0b 64 8b 20 57 0e a7 ac 91 57 37 d3 5c eb 71 bd ef 40 23 70 63 8c f7 bb b6 d6 b7 f7 2d 2d 1f 3c c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 35 01 00 00 0f 61 f7 d5 58 06 27 52 89 15 46 7c 25 d8 97 b6 74 10 a1 b9 ab 14 9f 17 c8 4b df 48 8b 30 48 e5 92 bd b6 46 e8 a7 76 04 2b 88 89 ac 59 28 7c 72 c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef f8 5b 4b 15 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 25 01 00 00 06 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d d4 1f c6 40 29 1b f4 81 ff 73 19 cf 46 a7 75 00 c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 25 01 00 00 0b 18 cb 55 b3 79 8e 83 49 c5 42 75 de 1e f2 2b 92 9a 86 ad d2 a3 f0 d7 51 e7 1e e9 49 c1 a5 7c c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 35 01 00 00 0f 7a c9 3c 09 cb b9 d2 e2 15 66 08 f7 64 c8 13 23 52 af f3 24 7f 50 aa c9 3e fc 6f e0 8b 83 b3 92 bd b6 46 e8 a7 76 04 2b 88 89 ac 59 28 7c 72 c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef f8 5b 4b 15 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 25 01 00 00 06 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d d4 1f c6 40 29 1b f7 81 d5 1b 19 cf 46 a7 75 00 c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 25 01 00 00 0b d5 00 ae 21 b8 74 3d e9 66 1a eb f5 0c 99 ae 35 62 68 3f 81 bc fe ae 1e c9 0b c2 8f aa 24 fc c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 35 01 00 00 07 29 32 34 ac cf 44 53 39 c0 b1 34 68 d4 3d 2a 1a 16 d8 55 e7 4e f7 1d 27 69 50 f3 5c fa ca c3 5a ae db 9d 9a d4 be 58 f3 e9 51 fa 47 5a eb dc c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 25 01 00 00 0b 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d ef f8 5b 4b 15 91 58 77 47 35 04 7a 43 1d 46 f3 c0"))
decrypt_message("from usb dump: somfy -> pc", bytes.fromhex("c0 00 25 01 00 00 06 6f f8 7f 48 07 50 f7 a0 e7 8e bd 26 75 be 4d d4 1f c6 40 29 1b 83 81 42 bf 19 cf 46 a7 75 00 c0"))
decrypt_message("from usb dump: pc -> somfy", bytes.fromhex("c0 00 25 01 00 00 0b f5 46 75 4b cf 2d e7 00 10 b6 0c 57 aa 4a 7e a8 bf e3 7e e2 e1 36 fe 18 84 7a 7a 1f cd 70 07 c0"))


if False:
    def decrypt_firmware_page(packet):
        iv = packet[4:20]
        ciphertext = packet[20:-2]
        plaintext = cipher.decrypt_custom(ciphertext, iv)
        command, address, size = struct.unpack('>HLH', plaintext[:8])
        data = plaintext[8:520]
        crc, = struct.unpack('>H', plaintext[520:522])
        padding = plaintext[522:] # content seems to be undefined
        #print(plaintext[-32:].hex(), command, hex(address), hex(size), hex(crc), len(plaintext))
        assert command == 0xe057
        assert len(data) == size

        return address, data

    with open("5102404A042V2.seb", "rb") as firmware_file:
        header = firmware_file.read(0x18)
        expected_address = None
        output_file = None
        for i in range(950):
            crypted_page = firmware_file.read(550)
            address, data = decrypt_firmware_page(crypted_page)
            if address != expected_address:
                if output_file: output_file.close()
                output_file = open("firmware_%08X.bin" % address, "wb")
            output_file.write(data)
            expected_address = address + len(data)
